{
    "Strings": [
        "mouse button",
        "touchscreen press",
        "key",
        "mouse wheel up",
        "mouse wheel down",
        "gamepad button",
        "gamepad axis",
        "virtual button",
        "mouse button left",
        "mouse button middle",
        "mouse button right",
        "mouse button back",
        "mouse button forward",
        "mouse button unknown",
        "gamepad face south",
        "gamepad face east",
        "gamepad face west",
        "gamepad face north",
        "gamepad shoulder l",
        "gamepad shoulder r",
        "gamepad trigger l",
        "gamepad trigger r",
        "gamepad start",
        "gamepad thumbstick l click",
        "gamepad thumbstick r click",
        "gamepad dpad up",
        "gamepad dpad down",
        "gamepad dpad left",
        "gamepad dpad right",
        "gamepad guide",
        "gamepad misc 1",
        "gamepad touchpad click",
        "gamepad paddle 1",
        "gamepad paddle 2",
        "gamepad paddle 3",
        "gamepad paddle 4",
        "gamepad thumbstick l left",
        "gamepad thumbstick l right",
        "gamepad thumbstick l up",
        "gamepad thumbstick l down",
        "gamepad thumbstick r left",
        "gamepad thumbstick r right",
        "gamepad thumbstick r up",
        "gamepad thumbstick r down",
        "gamepad select",
        "gamepad input unknown",
        "binding unknown",
        "empty binding",
        ", gamepad=",
        " \"",
        "\"",
        ", gamepad=\"",
        ", threshold=",
        "->",
        "Warning! Binding type has not been defined",
        "Unhandled binding type \"",
        "type",
        "__type",
        "value",
        "__value",
        "axis_negative",
        "__axis_negative",
        "gamepad_description",
        "__gamepad_description",
        "threshold_min",
        "__threshold_min",
        "threshold_max",
        "__threshold_max",
        "Warning! Could not import binding, clearing this binding (typeof=",
        ")",
        "Binding \"type\" not found; binding is corrupted",
        "Binding \"value\" not found; binding is corrupted",
        "Binding \"axis_negative\" not found; binding is corrupted",
        "Warning! Legacy gamepad constant found, updating value (= ",
        "Cannot use mb_none as a mouse button binding\nInstead please use mb_any and then invert the result",
        "Binding type \"",
        "\" not recognised",
        "State \"",
        "aim_left",
        "aim_right",
        "aim_up",
        "aim_down",
        "SwitchJoyConPair",
        "SwitchJoyConLeft",
        "SwitchJoyConRight",
        "Gamepad ",
        " discovered, type = \"",
        "\" (",
        ", guessed=",
        "), description = \"",
        "\" (vendor=",
        ", product=",
        " is blacklisted",
        " has a custom mapping",
        ", clearing GameMaker's native mapping string",
        "a",
        "b",
        "x",
        "y",
        "dpup",
        "dpright",
        "dpdown",
        "dpleft",
        "leftx",
        "lefty",
        "rightx",
        "righty",
        "Fully extending XInput trigger scale for gamepad ",
        "Partially extending XInput trigger scale for gamepad ",
        "Using default mapping for Stadia controller",
        "Setting Stadia controller to alternate analogue mapping for gamepad ",
        "Setting Stadia controller to analogue mapping for gamepad ",
        "lefttrigger",
        "righttrigger",
        "Axis calibration confirmed for gamepad ",
        "32769",
        "32770",
        "xbox 360",
        "AppleController",
        "horizontal",
        "ps5",
        "switch",
        "switch joycon left",
        "switch joycon right",
        "vertical",
        "radial",
        "JoyCon",
        "SwitchHandheld",
        "Value ",
        " not a gamepad trigger",
        "Profile \"",
        "\" already exists for player ",
        "Cannot remove profile \"",
        "\" as it is a default profile",
        "Warning! Failed to set profile for player ",
        " (was ",
        "\" doesn't exist for player ",
        "Setting player ",
        " profile to \"",
        "multidevice",
        "keyboard_and_mouse",
        "touch",
        "gamepad",
        "Invalid source (",
        "mixed",
        "",
        "Profile name cannot be an empty string",
        "Input must be valid JSON (typeof=",
        "Player ",
        " data is missing verb \"",
        "JSON malformed, player ",
        " verb \"",
        "\" should have ",
        " alternate bindings, but it had ",
        "Unhandled INPUT_FALLBACK_PROFILE_BEHAVIOR value (",
        "Warning! Cannot set binding, profile was <undefined>",
        "unknown",
        "Gamepad constant value ",
        " cannot be used as keyboard binding for verb ",
        " in profile ",
        "Warning! Gamepad constant value ",
        "Keyboard binding \"",
        "\" not supported for profile \"",
        "Warning! Keyboard binding \"",
        "Mouse binding \"",
        "Warning! Mouse binding \"",
        "Touchscreen binding \"",
        "Warning! Touchscreen binding \"",
        "Gamepad binding \"",
        "Warning! Gamepad binding \"",
        "Binding for profile \"",
        "\" verb \"",
        "\" alternate ",
        " set to \"",
        "Warning! Cannot remove binding, profile was <undefined>",
        "Warning! Cannot reset binding, profile was <undefined>",
        "\" doesn't exist as a default profile",
        "Verb name cannot be an empty string",
        "\" does not exist for player ",
        "Verb \"",
        "\" has already been added to player ",
        "Chord state with name \"",
        "Warning! Cannot get invalid bindings, profile was <undefined>",
        " profiles are corrupted",
        " gamepad axis thresholds are corrupted",
        "gyro",
        " gyro parameters are corrupted",
        "__gyro",
        "Warning! Player ",
        " gyro parameters not found, using defaults",
        "gamepad_type_override",
        "__gamepad_type_override",
        " gamepad type override is corrupted",
        " gamepad type override not found, defaulting to <undefined>",
        "vibration_strength",
        "__vibration_strength",
        " vibration strength is corrupted",
        " vibration strength not found, defaulting to ",
        "trigger_effect_strength",
        "__trigger_effect_strength",
        " trigger effect strength is corrupted",
        " trigger effect strength not found, defaulting to ",
        "cursor_inverted",
        "__cursor_inverted",
        " cursor inversion is corrupted",
        " cursor inversion not found, defaulting to <false>",
        "Warning! New vibration event ignored, player ",
        " vibration is paused",
        "Warning! New trigger effect ignored, player ",
        " trigger effect is paused",
        "Warning! Failed to determine whether a view is active",
        "Binding scan failed: Player ",
        " is using INPUT_TOUCH which cannot be rebound",
        "Binding scan failed: Source array for player ",
        " is empty (the player has no source assigned)",
        "Binding scan failed: Source filter array for player ",
        " is empty (no sources are permitted)",
        " is a ghost",
        " is inactive",
        " disconnected",
        "Binding scan failed: Timed out",
        "Now scanning for a new binding from player ",
        "Value in filter array is not a source (index ",
        ", ",
        "__input_class_source",
        "Binding found for player ",
        ": \"",
        "Binding scan success callback set to an illegal value (typeof=",
        "Binding scan for player ",
        " failed (error=",
        "Binding scan failure callback set to an illegal value (typeof=",
        "Source \"",
        "Binding validity unhandled",
        "keyboard and mouse",
        "gamepad ",
        "feedback",
        "off",
        "vibration",
        "weapon",
        "Un-consuming verb \"",
        "Number of sampling frames must be 1 or greater",
        "Number of sampling frames (",
        ") cannot exceed INPUT_TOUCH_HISTORY_FRAMES (",
        "Reference point type (",
        ") not supported",
        "Not a binding",
        "Empty",
        "Virtual button",
        "xbox one",
        "A",
        "B",
        "X",
        "Y",
        "LB",
        "RB",
        "LT",
        "RT",
        "view",
        "menu",
        "dpad left",
        "dpad right",
        "dpad up",
        "dpad down",
        "thumbstick l left",
        "thumbstick l right",
        "thumbstick l up",
        "thumbstick l down",
        "thumbstick l click",
        "thumbstick r left",
        "thumbstick r right",
        "thumbstick r up",
        "thumbstick r down",
        "thumbstick r click",
        "share",
        "P1",
        "P2",
        "P3",
        "P4",
        "cross",
        "circle",
        "square",
        "triangle",
        "L1",
        "R1",
        "L2",
        "R2",
        "create",
        "options",
        "L3",
        "R3",
        "touchpad click",
        "mic",
        "L",
        "R",
        "ZL",
        "ZR",
        "minus",
        "plus",
        "home",
        "capture",
        "face south",
        "face east",
        "face west",
        "face north",
        "SL",
        "SR",
        "thumbstick left",
        "thumbstick right",
        "thumbstick up",
        "thumbstick down",
        "thumbstick click",
        "back",
        "start",
        "ps4",
        "psx",
        "select",
        "gamecube",
        "Z",
        "W",
        "S",
        "D",
        "C",
        "\n",
        ",",
        "A basic verb named \"",
        "\" already exists",
        "A chord named \"",
        "Input 8.1.1:\n",
        "\n ",
        "Would you like to copy this error to your clipboard?",
        "__input_config_verbs() must contain a struct (was ",
        ")\nDocumentation on __input_config_verbs() can be found offline in __input_config_verbs()\nOnline documentation can be found at https://jujuadams.github.io/Input",
        "__input_config_verbs() must contain at least one profile",
        "\" definition must be a struct (was ",
        "\" for default profile \"",
        "\" has too many alternate bindings (",
        " versus max ",
        ")\nPlease increase INPUT_MAX_ALTERNATE_BINDINGS if you'd like to use more alternate bindings",
        "\", verb \"",
        "\", alternate ",
        " is not a binding\nPlease use one of the input_binding_*() functions to create bindings",
        "Warning! Default profile for keyboard \"",
        "\" has not been defined in __input_config_verbs()",
        "Warning! Default profile for mouse \"",
        "Warning! Default profile for gamepad \"",
        "Warning! Default profile for mixed \"",
        "Warning! Default profile for multidevice \"",
        "Warning! Default cursor up verb \"",
        "\" has not been defined for any profile",
        "Warning! Default cursor down verb \"",
        "Warning! Default cursor left verb \"",
        "Warning! Default cursor right verb \"",
        "Warning! Default profile \"",
        "\" does not include a definition for basic verb \"",
        "__input_config_verb_groups() must contain a struct (was ",
        ")\nDocumentation on __input_config_verb_groups() can be found offline in __input_config_verbs()\nOnline documentation can be found at https://jujuadams.github.io/Input",
        "\" doesn't exist\nPlease check __input_config_verb_groups() matches __input_config_verbs()",
        "\" already has a group (",
        "Warning! No SDL definition found for ",
        " (vendor=",
        "00000000000000000000000000000000",
        "Warning! GUID was empty",
        "0000",
        "Warning! GUID \"",
        "\" does not fit expected pattern. VID+PID cannot be extracted",
        "0300",
        "0500",
        "\" driver ID does not match expected (Found ",
        ", expect either 0300 or 0500)",
        "68",
        "Warning! Controller ",
        " (VID+PID \"",
        "\") __blacklisted: no button or axis",
        "Wheel",
        "Flightstick",
        "Throttle",
        "Guitar",
        "Drumkit",
        "Dancepad",
        "Skateboard",
        "Warning! Device ",
        " is blacklisted (Not a gamepad)",
        " ",
        "7e05",
        "0920",
        " is blacklisted (Switch Pro Controller over USB)",
        "4c05",
        "6802",
        " is blacklisted (Incorrectly configured PS3 controller)",
        " is blacklisted (Steam Deck virtual keyboard)",
        "CommunitySteamDeck",
        " __blacklisted (matches Joy-Con motion unit)",
        "HIDWiiMotionPlus",
        "HIDWiiRemoteNunchuk",
        "HIDWiiRemoteIMU",
        "HIDWiiRemoteIRSensor",
        " is blacklisted, type (\"",
        "\")",
        "keyboard",
        "mouse",
        "touchpad",
        "joystick",
        "pg-9167",
        "harmonix",
        "wirelesscontroller",
        " is blacklisted, type (matches mouse or keyboard)",
        "de28",
        "Warning! Controller type is blacklisted by Steam Input (\"",
        "windows",
        "linux",
        "macos",
        "android",
        "OS not supported",
        "vid+pid",
        "description contains",
        "Warning! Controller is blacklisted (found by GUID \"",
        "Warning! Controller is blacklisted (found by VID+PID \"",
        "Warning! Controller is blacklisted (banned substring \"",
        "\" found in description)",
        "XInput",
        "SDL2 remapping unsupported for this platform",
        "leftstick",
        "rightstick",
        "leftshoulder",
        "rightshoulder",
        "CommunityStadia",
        "CommunityGameCube",
        "CommunityN64",
        "CommunityAnnePro",
        "CommunityOuya",
        "CommunityNeoGeoMini",
        "CommunitySaturn",
        "HIDJoyConLeft",
        "HIDJoyConRight",
        "HIDAtariVCSClassic",
        "HIDWiiRemote",
        "HIDWiiClassic",
        "CommunityLikeSwitch",
        "Setting default Stadia controller mapping",
        "guide",
        "misc1",
        "Setting MFi controller mapping",
        "6f0e1311",
        "Setting Saffun GameCube mapping to GameCube",
        "3412adbe",
        "Setting GameCube adapter slot to alternate mapping",
        "8f0e1330",
        "63257505",
        "Overriding mapping to N64",
        "Overriding mapping to Obins Anne Pro 2",
        "bc200155",
        "JJ",
        "Overriding mapping to NeoGeo Arcade Stick Pro (Mode 1)",
        "Overriding mapping to NeoGeo Arcade Stick Pro (Mode 3)",
        "Overriding mapping to NeoGeo Mini",
        "7e051720",
        "Genesis 3btn",
        "Overriding mapping to Mega Drive 3b",
        "Genesis 6btn",
        "Overriding mapping to Mega Drive 6b",
        "Overriding mapping to Joy-Con Left",
        "Overriding mapping to Joy-Con Right",
        "Overriding mapping to Atari VCS Classic",
        "Overriding mapping to Wii Remote",
        "Overriding mapping to Wii Classic",
        "00000000",
        "Setting PowerA Switch controller mapping",
        "5e04e002",
        "5e04fd02",
        "Setting Xbox One Wireless controller to alternate mapping. Trigger data unavailable.",
        "4c056802",
        "Overriding PS3 Controller on Windows",
        "no mapping",
        "Overriding from \"no mapping\" on Mac",
        "03000000de2800000512000010010000",
        "Overriding mapping for Steam Deck controller",
        "paddle2",
        "paddle1",
        "paddle4",
        "paddle3",
        "Generic X-Box pad",
        "X360 Controller",
        "Overriding mapping for Xbox controller",
        "4e696e74656e646f2053776974636820",
        "484a5a204d6179666c61736820576969",
        "64633735616665613536653363336132",
        "4a4a0000000000006d61743300000000",
        "4a4a0000000000000000000000000000",
        "Nintendo Switch Pro Controller",
        "Nintendo Switch Right Joy-Con",
        "HJZ Mayflash WiiU Pro Game Controller Adapter",
        "Setting WiiU Pro Adapter mapping",
        "HJZ Mayflash Wiimote PC Adapter",
        "Setting DolphinBar mapping",
        "Retroid Pocket Controller",
        "Setting Retroid Pocket \"Retro mode\" mapping",
        "Setting Retroid Pocket \"Xbox mode\" mapping",
        "Setting NeoGeo gamepad mapping",
        ":",
        "-",
        "+",
        "platform",
        "Warning! Entry name \"",
        "\" not recognised (full string was \"",
        "~",
        "h",
        "Warning! Mapping entry could not be parsed (full string was \"",
        "Warning! Mapping for \"",
        "\" is a redefinition of entry name \"",
        "Elite",
        "No SDL2 remapping available, falling back to GameMaker's mapping (",
        "Handheld",
        "Pro Controller",
        "Joy-Con (L)",
        "Joy-Con (R)",
        "SwitchProController",
        "PS4Controller",
        "PS5Controller",
        "XBoxOneController",
        "Pro Controller (",
        "Joy-Con L+R (STA",
        "Wireless Control",
        "Xbox 360 Control",
        "CommunityPS4",
        "CommunityLikeXBox",
        "Warning! VID+PID not found. Guessing controller type based on description = \"",
        "Warning! VID+PID \"",
        "\" not found in raw type database. Guessing controller type based on description = \"",
        "neogeo",
        "CommunityNeoGeo",
        "8bitdo",
        "xbox",
        "ultimate",
        "zero",
        "2c",
        "zero 2",
        " s30",
        " m30",
        " p30",
        "CommunityPSX",
        " n64",
        " ngc",
        "Community8BitDo",
        "snes",
        "CommunitySNES",
        "retroid",
        "odin",
        "sfc",
        "CommunitySuperFamicom",
        "saturn",
        "stadia",
        "luna",
        "amazon game",
        "CommunityLuna",
        "ouya",
        "steam",
        "SteamController",
        "dualsense",
        "backbone one playstation",
        "dualshock 4",
        "sony interactive entertainment wireless controller",
        "playstation",
        "ps1",
        "ps2",
        "ps3",
        "dualshock",
        "wired fight pad pro for nintendo",
        "core (plus) wired",
        "for switch",
        "for nintendo switch",
        "switch controller",
        "switch pro",
        "lic pro",
        "mobapad",
        "wii",
        "joy-con (l/r)",
        "joy-con (l)",
        "left joy-con",
        "joy-con (r)",
        "right joy-con",
        "xbox elite",
        "xbox wireless",
        "xbox bluetooth",
        "CommunityXBoxOne",
        "xbox360",
        "logitech gamepad f",
        "CommunityXBox360",
        "nimbus",
        "horipad ultimate",
        "mfi",
        "throttle",
        "flight quadrant",
        "SDLThrottle",
        "flightstick",
        "hotas",
        "flight",
        "sim",
        "eclipse",
        "stick",
        "yoke",
        "rudder",
        "SDLFlightstick",
        "driving force",
        "momo force",
        "openffboard",
        "wheel",
        "racing",
        "steering",
        "base",
        "SDLWheel",
        "Unknown",
        "drum",
        "guitar",
        " fender ",
        "skateboard",
        "ddr",
        "dance",
        "hyperkin",
        "0d000000",
        "d90493a2",
        "d62010a7",
        "d62011a7",
        "Overridding controller ",
        " type to GameCube",
        "GameCube",
        "Overriding controller ",
        " type to MFi",
        "MFi Extended",
        " type to NeoGeo Mini",
        "NeoGeo Mini",
        "USB ",
        "SWITCH CO.,LTD. Retro-bit Controller",
        " type to Switch",
        "Saturn Wireless Pro",
        "Controller (Dinput)",
        " type to N64",
        "N64",
        "NeoGeo G1 Pro",
        "SNK NEOGEO Arcade Stick Pro",
        " type to Anne Pro 2",
        "Anne Pro 2",
        "8f0e",
        "1330",
        "N64 Adapter",
        "d620",
        "10a7",
        " type to Saffun N64",
        "Saffun N64",
        " type to Saffun GameCube",
        "Saffun GameCube",
        "03000000d620000011a7000000020000",
        "Wireless Gamepad",
        "4a4a000000000000",
        "Classic Controller",
        "CommunityVCSClassic",
        "050000007e0500000620000001800000",
        "HIDWiiNunchuk",
        " type to \"",
        "Nintendo Wii Classic Controller",
        " type to \"HIDWiiRemoteIMU\"",
        " type to \"HIDWiiRemoteIRSensor\"",
        " type to \"HIDWiiRemote\"",
        "Nintendo Wii Remote",
        "Warning! Raw type \"",
        "\" not found in lookup table, setting simple type to \"",
        "000000000000504944564944",
        "XInput STANDARD GAMEPAD",
        "Input Gamepad Tester",
        "Control",
        "Gamepad",
        "Debug blocks input",
        "Close",
        "Input (via SDL)",
        " = ",
        "GameMaker Native",
        "Raw",
        "__target_gamepad",
        "__gamepad_desc",
        "__block_input",
        "__raw_input_string",
        "gp_face1",
        "gp_face2",
        "gp_face3",
        "gp_face4",
        "gp_padd",
        "gp_padu",
        "gp_padl",
        "gp_padr",
        "gp_axislh",
        "gp_axislv",
        "gp_axisrh",
        "gp_axisrv",
        "gp_stickl",
        "gp_stickr",
        "gp_shoulderl",
        "gp_shoulderlb",
        "gp_shoulderr",
        "gp_shoulderrb",
        "gp_select",
        "gp_start",
        "gp_paddle1",
        "gp_paddle2",
        "gp_paddle3",
        "gp_paddle4",
        "gp_guide",
        "gp_touchpad",
        "Description = \"",
        "  ",
        "axis ",
        "axis 4106 = ",
        " (XInput)\n",
        "axis 4107 = ",
        "button ",
        "hat ",
        "super famicom",
        "Warning! Cannot hotswap because player 0 is a ghost",
        "Hotswap callback set to an illegal value (typeof=",
        "Hotswapping on gamepad ",
        "\" button press",
        "\" axis press",
        "Hotswapping on keyboard press",
        "Hotswapping on touch",
        "Hotswapping on mouse button press",
        "Hotswapping on mouse wheel",
        "Hotswapping on mouse pointer movement",
        "input___",
        "___",
        ".txt",
        "Welcome to Input by Juju Adams and Alynne Keith! This is version ",
        "8.1.1",
        "2025-02-06",
        "Error!\nGM constant 'infinity' is undefined. Please file a bug with YoYoGames.",
        "Juju\nwaz\nere",
        "Juju",
        "waz",
        "ere",
        "Error!\nGM extended string functions are unavailable. Please update GameMaker.",
        "Warning!\nFound indirection for GM native \"string_split\" function. Overriding \"string_split\" degrades load performance.",
        "Using is_instanceof() for comparisons",
        "is_instanceof() unavailable, using legacy comparisons",
        "Using native extended gamepad values",
        "Native extended gamepad values unavailable",
        "Using debug overlay status to block input",
        "Debug overlay status is unavailable",
        "Allowing native gamepad tester",
        "Native gamepad tester is unavailable",
        "Warning! input_controller_object has been deactivated. Please ensure that input_controller_object is never deactivated. You may need to use instance_activate_object(input_controller_object)",
        "Warning! Please consider an alternative method to reset game state: avoid using \"game_restart()\"",
        "Warning! input_controller_object has been destroyed. Please ensure that input_controller_object is never destroyed",
        "Warning! input_controller_object has been set as non-persistent. Please ensure that input_controller_object is always persistent",
        "Warning! input_controller_object depth has been changed (expected ",
        ", got ",
        ")\nPlease ensure that input_controller_object is never manually created and depth is not manually set",
        "127.0.0.1",
        "localhost",
        "Due to changes in security policy, some browsers may not permit the use of gamepads when testing locally.\n \nPlease host on a remote web service (itch.io, GX.games, etc.) if you are encountering problems.",
        "cancel",
        "Skipping loading SDL database",
        "sdl2.txt",
        "Warning! \"",
        "\" not found in Included Files",
        "SDL_GAMECONTROLLERCONFIG",
        "Steamworks",
        "SteamEnv",
        "1",
        "EnableConfiguratorSupport",
        "0",
        "Warning! Steam Input may block gamepads when GameMaker IDE is run through Steam.",
        "External SDL2 string found",
        "Error!\n\n%SDL_GAMECONTROLLERCONFIG% could not be parsed.\nYou may see unexpected behaviour when using gamepads.\n\nTo remove this error, clear %SDL_GAMECONTROLLERCONFIG%\n\nInput ",
        "   @jujuadams and @offalynne ",
        "controllertypes.csv",
        "Skipping loading controller blacklist database",
        "controllerblacklist.csv",
        "QWERTY",
        "ar-DZ",
        "ar-MA",
        "ar-TN",
        "br-FR",
        "co-FR",
        "ff-SN",
        "fr-BE",
        "fr-CD",
        "fr-CI",
        "fr-CM",
        "fr-FR",
        "fr-HT",
        "fr-MA",
        "fr-MC",
        "fr-ML",
        "fr-RE",
        "nl-BE",
        "oc-FR",
        "wo-SN",
        "tzm-DZ",
        "mg-",
        "gsw-FR",
        "cs-CZ",
        "de-AT",
        "de-CH",
        "de-DE",
        "de-LI",
        "de-LU",
        "fr-CH",
        "fr-LU",
        "sq-AL",
        "hr-BA",
        "hr-HR",
        "hu-HU",
        "lb-LU",
        "rm-CH",
        "sk-SK",
        "sl-SI",
        "dsb-DE",
        "sr-BA",
        "hsb-DE",
        "AZERTY",
        "QWERTZ",
        "`",
        "=",
        ";",
        "'",
        ".",
        "]",
        "[",
        "/",
        "\\",
        "scroll lock",
        "caps lock",
        "num lock",
        "left meta",
        "right meta",
        "clear",
        "print screen",
        "pause break",
        "escape",
        "backspace",
        "space",
        "enter",
        "arrow up",
        "arrow down",
        "arrow left",
        "arrow right",
        "tab",
        "right alt",
        "left alt",
        "alt",
        "right shift",
        "left shift",
        "shift",
        "right ctrl",
        "left ctrl",
        "ctrl",
        "f1",
        "f2",
        "f3",
        "f4",
        "f5",
        "f6",
        "f7",
        "f8",
        "f9",
        "f10",
        "f11",
        "f12",
        "numpad /",
        "numpad *",
        "numpad -",
        "numpad +",
        "numpad .",
        "numpad 0",
        "numpad 1",
        "numpad 2",
        "numpad 3",
        "numpad 4",
        "numpad 5",
        "numpad 6",
        "numpad 7",
        "numpad 8",
        "numpad 9",
        "delete",
        "insert",
        "page up",
        "page down",
        "end",
        "f",
        "<",
        "!",
        "$",
        "Steamworks extension unavailable",
        "480",
        "Error!\nSteamworks extension incorrectly configured (Application ID 480).\nYou may see unexpected behaviour when using gamepads.\n\nTo remove this error, set Application ID.\n\nInput ",
        "SteamDeck",
        "video_adapter_description",
        "AMD Custom GPU 0",
        "SDL_GAMECONTROLLER_USE_BUTTON_LABELS",
        "WINEDLLPATH",
        "XBox360Controller",
        "Xbox 360 Controller",
        "Xbox One Controller",
        "PS3Controller",
        "PS3 Controller",
        "PS4 Controller",
        "PS5 Controller",
        "Steam Controller",
        "SteamControllerNeptune",
        "Steam Deck Controller",
        "MobileTouch",
        "Steam Link",
        "Switch Pro Controller",
        "Joy-Con",
        "Joy-Con Pair",
        "SwitchJoyConSingle",
        "UnknownNonSteamController",
        "Controller",
        "2",
        "3",
        "async",
        "virtual",
        "Loading controller blacklist CSV from \"",
        " controller blacklist definitions found",
        "Loaded in ",
        "ms",
        "Loading SDL2 database from \"",
        "Could not load external SDL2 database \"",
        "Unpacking SDL2 string...",
        "platform:Windows",
        "platform:Linux",
        "platform:Android",
        "platform:Mac OS X",
        "platform:iOS",
        "platform:MacOS",
        "platform:Mac",
        "Warning! Platform not found for ",
        "Warning! Overwriting GUID \"",
        "\" with ",
        " (old=",
        " controller definitions found, of which ",
        " are active for this platform",
        "Loading SDL2 database from string \"",
        "Loading controller type CSV from \"",
        " controller type definitions found",
        "Multiplayer leave verb \"",
        "\" doesn't exist\n(You should call input_join_params_set() to set the leave verb)",
        "Assignment: Moving player ",
        " (connected) to ",
        " (disconnected)",
        "Assignment: Player ",
        " aborted source assignment",
        " joined",
        " left",
        "Assignment: Restoring source mode ",
        "Multiplayer abort callback set to an illegal value (typeof=",
        "Invalid player index provided (",
        "Player index too large (",
        " must be less than ",
        ")\nIncrease INPUT_MAX_PLAYERS to support more players",
        "Binding unsupported\nplayer index = ",
        "\nprofile = ",
        "\nsource = ",
        "\nverb = ",
        "\nalt = ",
        "\nbinding = ",
        "{\n",
        "    ",
        "Key type \"",
        "\" not supported\n ",
        "\" : ",
        ",\n",
        "}",
        "{}",
        "{",
        "\":",
        "[\n",
        "[]",
        "\\\\",
        "\\n",
        "\r",
        "\\r",
        "\t",
        "\\t",
        "\\\"",
        "null",
        "true",
        "false",
        "__value not struct or array. Returning empty string\n ",
        "command_data",
        "_param",
        "mode",
        "trigger_mask",
        "apple_web",
        " gamepad disconnected",
        " connected",
        "New gamepad = \"",
        "\", GUID=\"",
        "\", buttons = ",
        ", axes = ",
        ", hats = ",
        "Input: LOUD ",
        "Input: ",
        "Unhandled output coordinate system (",
        "Unhandled input coordinate system (",
        "INPUT_PC_KEYBOARD must be either <true> or <false>",
        "INPUT_PC_MOUSE must be either <true> or <false>",
        "INPUT_PC_GAMEPAD must be either <true> or <false>",
        "INPUT_WINDOWS_VIBRATION must be either <true> or <false>",
        "INPUT_MOBILE_GAMEPAD must be either <true> or <false>",
        "INPUT_MOBILE_MOUSE must be either <true> or <false>",
        "INPUT_MOBILE_WEB_KEYBOARD must be either <true> or <false>",
        "INPUT_ANDROID_KEYBOARD must be either <true> or <false>",
        "INPUT_SWITCH_KEYBOARD must be either <true> or <false>",
        "INPUT_SWITCH_MOUSE must be either <true> or <false>",
        "INPUT_SWITCH_TOUCH must be either <true> or <false>",
        "INPUT_SWITCH_VIBRATION must be either <true> or <false>",
        "INPUT_PS4_VIBRATION must be either <true> or <false>",
        "INPUT_PS5_VIBRATION must be either <true> or <false>",
        "INPUT_XBOX_VIBRATION must be either <true> or <false>",
        "INPUT_ALLOW_OUT_OF_FOCUS must be either <true> or <false>",
        "INPUT_TIMER_MILLISECONDS must be either <true> or <false>",
        "INPUT_ALLOW_STEAMWORKS must be either <true> or <false>",
        "INPUT_BINDING_SCAN_TIMEOUT must be a number that is greater than or equal to 1000",
        "INPUT_MAX_ALTERNATE_BINDINGS must be an integer that is greater than or equal to 1",
        "INPUT_FLEXIBLE_VERB_IMPORT must be either <true> or <false>",
        "INPUT_FLEXIBLE_ALTERNATE_BINDING_IMPORT must be either <true> or <false>",
        "INPUT_REPEAT_DEFAULT_DELAY must be a number that is greater than or equal to 1",
        "INPUT_REPEAT_DEFAULT_PREDELAY must be a number that is greater than or equal to 1",
        "INPUT_LONG_DELAY must be a number that is greater than or equal to 1",
        "INPUT_DOUBLE_DELAY must be a number that is greater than or equal to 1",
        "INPUT_QUICK_BUFFER must be a number that is greater than or equal to 1",
        "INPUT_CHORD_DEFAULT_TIME must be a number that is greater than or equal to 1",
        "INPUT_2D_CLAMP must be either <true> or <false>",
        "INPUT_2D_XY_AXIS_BIAS_DIAGONALS must be either <true> or <false>",
        "INPUT_AUTO_PROFILE_FOR_KEYBOARD must be a string (or <undefined> if the profile is to be unavailable)",
        "INPUT_AUTO_PROFILE_FOR_GAMEPAD must be a string (or <undefined> if the profile is to be unavailable)",
        "INPUT_AUTO_PROFILE_FOR_TOUCH must be a string (or <undefined> if the profile is to be unavailable)",
        "INPUT_AUTO_PROFILE_FOR_MIXED must be a string (or <undefined> if the profile is to be unavailable)",
        "INPUT_AUTO_PROFILE_FOR_MULTIDEVICE must be a string (or <undefined> if the profile is to be unavailable)",
        "INPUT_ASSIGN_KEYBOARD_AND_MOUSE_TOGETHER must be either <true> or <false>",
        "INPUT_ALLOW_ASYMMETRIC_DEFAULT_PROFILES must be either <true> or <false>",
        "INPUT_HOTSWAP_DELAY must be a number that is greater than or equal to 1",
        "INPUT_HOTSWAP_ON_GAMEPAD_AXIS must be either <true> or <false>",
        "INPUT_HOTSWAP_ON_MOUSE_BUTTON must be either <true> or <false>",
        "INPUT_HOTSWAP_ON_MOUSE_MOVEMENT must be either <true> or <false>",
        "INPUT_HOTSWAP_AUTO_PROFILE must be either <true> or <false>",
        "INPUT_MAX_PLAYERS must be an integer that is greater than or equal to 1",
        "INPUT_SDL2_REMAPPING must be either <true> or <false>",
        "INPUT_SDL2_ALLOW_EXTERNAL must be either <true> or <false>",
        "INPUT_SDL2_DATABASE_PATH must be a string or <undefined>",
        "INPUT_CONTROLLER_TYPE_PATH must be a string or <undefined>",
        "INPUT_BLACKLIST_PATH must be a string or <undefined>",
        "INPUT_ANDROID_KEYBOARD_ALLOWED must be either <true> or <false>",
        "INPUT_SWITCH_KEYBOARD_ALLOWED must be either <true> or <false>",
        "INPUT_MERGE_CONTROL_KEYS must be either <true> or <false>",
        "INPUT_MOUSE_ALLOW_SCANNING must be either <true> or <false>",
        "INPUT_MOUSE_MOVE_DEADZONE must be a number that is greater than or equal to 0",
        "INPUT_MOUSE_ALLOW_VIRTUAL_BUTTONS must be either <true> or <false>",
        "INPUT_MAX_TOUCHPOINTS must be an integer that is greater than or equal to 1",
        "INPUT_TOUCH_EDGE_DEADZONE must be a number that is greater than or equal to 0",
        "INPUT_TOUCH_HISTORY_FRAMES must be an integer that is greater than or equal to 1",
        "INPUT_VIRTUAL_BUTTON_MIN_THRESHOLD must be a number greater than or equal to 0, and less than INPUT_VIRTUAL_BUTTON_MAX_THRESHOLD",
        "INPUT_VIRTUAL_BUTTON_MAX_THRESHOLD must be a number greater than or equal to 0, and greater than INPUT_VIRTUAL_BUTTON_MIN_THRESHOLD",
        "INPUT_VIRTUAL_KEYBOARD_PREDICTIVE_TEXT_ENABLED must be either <true> or <false>",
        "INPUT_DEFAULT_AXIS_MIN_THRESHOLD must be a number greater than or equal to 0, and lesser than INPUT_DEFAULT_AXIS_MAX_THRESHOLD",
        "INPUT_DEFAULT_AXIS_MAX_THRESHOLD must be a number less than or equal to 1, and greater than INPUT_DEFAULT_AXIS_MAX_THRESHOLD",
        "INPUT_DEFAULT_TRIGGER_MIN_THRESHOLD must be a number greater than or equal to 0, and lesser than INPUT_DEFAULT_TRIGGER_MAX_THRESHOLD",
        "INPUT_DEFAULT_TRIGGER_MAX_THRESHOLD must be a number less than or equal to 1, and greater than INPUT_DEFAULT_TRIGGER_MIN_THRESHOLD",
        "INPUT_ANDROID_GAMEPAD_ENUMERATION_INTERVAL must be a number that is greater than or equal to 1",
        "INPUT_SWITCH_SWAP_AB must be either <true> or <false>",
        "INPUT_PS_REGION_SWAP_CONFIRM must be either <true> or <false>",
        "INPUT_SWITCH_HORIZONTAL_HOLDTYPE must be either <true> or <false>",
        "INPUT_SWITCH_JOYCON_MOTION_RIGHT_HAND must be either <true> or <false>",
        "INPUT_GYRO_DEFAULT_SENSITIVITY_X must be a number",
        "INPUT_GYRO_DEFAULT_SENSITIVITY_Y must be a number",
        "INPUT_CURSOR_VERB_UP must be a string or <undefined>",
        "INPUT_CURSOR_VERB_DOWN must be a string or <undefined>",
        "INPUT_CURSOR_VERB_LEFT must be a string or <undefined>",
        "INPUT_CURSOR_VERB_RIGHT must be a string or <undefined>",
        "INPUT_CURSOR_START_SPEED must be a number that is greater than 0",
        "INPUT_CURSOR_START_SPEED must be a number",
        "INPUT_VIBRATION_DEFAULT_STRENGTH must be a number between 0.0 and 1.0 (inclusive)",
        "INPUT_VIBRATION_JOYCON_STRENGTH must be a number between 0.0 and 1.0 (inclusive)",
        "INPUT_TRIGGER_EFFECT_DEFAULT_STRENGTH must be a number between 0.0 and 1.0 (inclusive)",
        "Fonts should be specified using their name as a string\nUse <undefined> to not set a new font",
        "pin_left",
        "pin_centre",
        "pin_center",
        "pin_right",
        "fa_justify",
        "Colour name \"",
        ".fog() has been replaced by .flash()",
        "Warning! One or more Bezier parameters were not numeric (",
        "Wrong number of arguments (",
        ") provided\nExpecting 0 or 8",
        "Region \"",
        "\" not found",
        "Warning! Cannot set a text element's page to less than 0",
        "Warning! Page ",
        " is too big. Valid pages are from 0 to ",
        " (pages are 0-indexed)",
        ".get_pages() has been replaced by .get_page_count()",
        ".animation_tick_speed() has been replaced by .animation_speed()",
        ".animation_sync() has been removed\nPlease get in touch if this feature is essential for your project",
        ".animation_wave() has been replaced by scribble_anim_wave()",
        ".animation_wave() has been replaced by scribble_anim_shake()",
        ".animation_rainbow() has been replaced by scribble_anim_rainbow()",
        ".animation_wobble() has been replaced by scribble_anim_wobble()",
        ".animation_pulse() has been replaced by scribble_anim_pulse()",
        ".animation_wheel() has been replaced by scribble_anim_wheel()",
        ".animation_cycle() has been replaced by scribble_anim_cycle()",
        ".animation_jitter() has been replaced by scribble_anim_jitter()",
        ".animation_blink() has been replaced by scribble_anim_blink()",
        ":default",
        "Warning! Flushing element \"",
        "\" due to cache name collision (try choosing a different unique ID)",
        "u_fTime",
        "u_vColourBlend",
        "u_fBlinkState",
        "u_vGradient",
        "u_vSkew",
        "u_vFlash",
        "u_vRegionActive",
        "u_vRegionColour",
        "u_aDataFields",
        "u_aBezier",
        "u_iTypewriterUseLines",
        "u_iTypewriterMethod",
        "u_iTypewriterCharMax",
        "u_fTypewriterWindowArray",
        "u_fTypewriterSmoothness",
        "u_vTypewriterStartPos",
        "u_vTypewriterStartScale",
        "u_fTypewriterStartRotation",
        "u_fTypewriterAlphaDuration",
        "u_vShadowOffsetAndSoftness",
        "u_vShadowColour",
        "u_vBorderColour",
        "u_fBorderThickness",
        "u_vOutputSize",
        ".typewriter_*() methods have been deprecated\nIt is recommend you move to the new \"typist\" system\nPlease visit https://www.jujuadams.com/Scribble/\n \n(Set SCRIBBLE_WARNING_LEGACY_TYPEWRITER to <false> to turn off this warning)",
        "\" due to cache name collision",
        "100%",
        "__glyphs_map",
        "__glyph_data_grid",
        "__name",
        "__style_regular",
        "__style_bold",
        "__style_italic",
        "__style_bold_italic",
        "Cannot clear non-superfont fonts",
        "Page index ",
        " doesn't exist. Minimum page index is 0",
        " doesn't exist. Maximum page index is ",
        "Getting the revealed glyph bounding box requires SCRIBBLE_ALLOW_GLYPH_DATA_GETTER to be set to <true>",
        "Cannot get text, SCRIBBLE_ALLOW_TEXT_GETTER = <false>\nPlease set SCRIBBLE_ALLOW_TEXT_GETTER to <true> to get text",
        "Getting glyph data requires SCRIBBLE_ALLOW_GLYPH_DATA_GETTER to be set to <true>",
        "Warning! Rebuilding model \"",
        "Cannot call text element methods using the result from .draw()\nThis can occur in two situations:\n  1. scribble().draw().method();\n  2. t = scribble().draw(); t.method()\n\nInstead use:\n  1. scribble().method().draw();\n  2. t = scribble(); t.method(); t.draw();",
        "u_vTexel",
        "u_fMSDFRange",
        "u_fMSDFThicknessOffset",
        "u_fSecondDraw",
        "Cannot get glyph data, SCRIBBLE_ALLOW_GLYPH_DATA_GETTER = <false>\nPlease set SCRIBBLE_ALLOW_GLYPH_DATA_GETTER to <true> to get glyph data",
        "SCRIBBLE_ALLOW_GLYPH_DATA_GETTER must be set to <true> to use sound-per-character exceptions",
        "SCRIBBLE_ALLOW_GLYPH_DATA_GETTER must be set to <true> to use per-character delay",
        "Cannot synchronise to a sound asset. Please provide a sound instance (as returned by audio_play_sound())",
        "Sound instance ",
        " is not playing\nCannot sync to a stopped sound instance",
        "Warning! Typist's target text element has been garbage collected",
        "pause",
        "delay",
        "sync",
        "speed",
        "/speed",
        "__scribble_audio_playback__",
        "__scribble_typist_sound__",
        "__scribble_typist_sound_per_char__",
        "Warning! Ignoring [pause] command before the end of a page",
        "Warning! Event [",
        "] not recognised",
        "Warning! Typist page (",
        ") exceeds text element page count (",
        "wave",
        "shake",
        "rainbow",
        "wobble",
        "pulse",
        "cycle",
        "jitter",
        "blink",
        "slant",
        "/wave",
        "/shake",
        "/rainbow",
        "/wobble",
        "/pulse",
        "/wheel",
        "/cycle",
        "/jitter",
        "/blink",
        "/slant",
        "WAVE",
        "SHAKE",
        "RAINBOW",
        "WOBBLE",
        "PULSE",
        "WHEEL",
        "CYCLE",
        "JITTER",
        "BLINK",
        "SLANT",
        "/WAVE",
        "/SHAKE",
        "/RAINBOW",
        "/WOBBLE",
        "/PULSE",
        "/WHEEL",
        "/CYCLE",
        "/JITTER",
        "/BLINK",
        "/SLANT",
        "scribble skip",
        "__newfont",
        "Scribble MSDF",
        "scribble MSDF",
        "Scribble msdf",
        "scribble msdf",
        "scribblemsdf",
        "\"scribble msdf\" tag should only be applied to sprite assets (\"",
        "\" had the tag)",
        "Warning! A font for \"",
        "\" has already been added. Destroying the old font and creating a new one",
        "Warning! Font \"",
        "\" may have been scaled during compilation (font size = ",
        ", space height = ",
        ", scaling factor = ",
        "). Check that the font is rendering correctly. If it is not, try setting SCRIBBLE_ATTEMPT_FONT_SCALING_FIX to <false>",
        "There was an error whilst reading \"",
        "\"\nPlease reimport the font into GameMaker and reset character ranges\nIf this issue persists, please report it",
        "Warning! An MSDF font for \"",
        "\" has already been added. Destroying the old MSDF font and creating a new one",
        ".json",
        "Could not find \"",
        ".json\"\nPlease add it to the project's Included Files",
        "metrics",
        "glyphs",
        "atlas",
        "kerning",
        "size",
        "distanceRange",
        "lineHeight",
        "planeBounds",
        "atlasBounds",
        "unicode",
        "left",
        "top",
        "right",
        "bottom",
        "advance",
        "Warning! Space character not found in character set for MSDF font \"",
        "unicode2",
        "unicode1",
        "Warning! A spritefont for \"",
        "\" has already been added. Destroying the old spritefont and creating a new one",
        "Warning! Maximum width (",
        ") has been replaced with Bezier curve length (",
        "). Use -1 as the maximum width to turn off this warning",
        "%",
        "Could not parse line spacing \"",
        "\"\nLine spacing must be number or percentage strings e.g. \"200%\"",
        "/font",
        "/f",
        "/colour",
        "/color",
        "/c",
        "/alpha",
        "/a",
        "/scale",
        "/s",
        "/page",
        "scale",
        "scaleStack",
        "alpha",
        "fa_left",
        "fa_center",
        "fa_centre",
        "fa_right",
        "fa_top",
        "fa_middle",
        "fa_bottom",
        "nbsp",
        "&nbsp",
        "nbsp;",
        "&nbsp;",
        "r",
        "/b",
        "/i",
        "/bi",
        "i",
        "bi",
        "surface",
        "region",
        "/region",
        "zwsp",
        "typistSound",
        "typistSoundPerChar",
        "r2l",
        "l2r",
        "indent",
        "/indent",
        "The default font has not been set\nCheck that you've added fonts to Scribble (scribble_font_add() / scribble_font_add_from_sprite() etc.)",
        "The space character is missing from font definition for \"",
        "Not enough parameters for [scale] tag!",
        "Not enough parameters for [scaleStack] tag!",
        "Regular style not set for font \"",
        "Font \"",
        "\" not found (regular style for \"",
        "Bold style not set for font \"",
        "\" not found (bold style for \"",
        "Italic style not set for font \"",
        "\" not found (italic style for \"",
        "Bold-Italic style not set for font \"",
        "\" not found (bold-italic style for \"",
        "[region] tags must contain a name e.g. [region,This is a region]",
        "[typistSound] tags must use the same arguments as .sound()",
        "[typistSoundPerChar] tags must use the same arguments as .sound_per_char()",
        "Macro argument count ",
        " unsupported",
        "#",
        "0x",
        "Error! \"",
        "\" could not be converted into a hexcode",
        "d",
        "\" could not be converted into a decimal",
        "Warning! Unrecognised command tag [",
        "In-line vertical alignment cannot be set more than once",
        "...",
        "Couldn't find glyph data for character code ",
        " (",
        ") in font \"",
        "Couldn't find \"missing character\" glyph data, character code 63 (?) in font \"",
        "Devanagari substring insertion length > 2. Please report this error",
        "Warning! Devanagari parser extended beyond the end of the available characters",
        "In-line sprites cannot have more than 64 frames (",
        "Image speed cannot be more than 4.0 (",
        "Image speed cannot be less than 0.0 (",
        "‘",
        "’",
        "“",
        "”",
        "(",
        "।",
        "?",
        "µ",
        "॰",
        "०",
        "१",
        "२",
        "३",
        "४",
        "५",
        "६",
        "७",
        "८",
        "९",
        "फ़्",
        "क़",
        "ख़",
        "ग़",
        "ज़्",
        "ज़",
        "ड़",
        "ढ़",
        "फ़",
        "य़",
        "ऱ",
        "ऩ",
        "त्त्",
        "त्त",
        "क्त",
        "दृ",
        "कृ",
        "ह्न",
        "ह्य",
        "हृ",
        "ह्म",
        "ह्र",
        "ह्",
        "द्द",
        "क्ष्",
        "क्ष",
        "त्र्",
        "त्र",
        "ज्ञ",
        "छ्य",
        "ट्य",
        "ठ्य",
        "ड्य",
        "ढ्य",
        "द्य",
        "द्व",
        "श्र",
        "ट्र",
        "ड्र",
        "ढ्र",
        "छ्र",
        "क्र",
        "फ्र",
        "द्र",
        "प्र",
        "ग्र",
        "रु",
        "रू",
        "्र",
        "ओ",
        "औ",
        "आ",
        "अ",
        "ई",
        "इ",
        "उ",
        "ऊ",
        "ऐ",
        "ए",
        "ऋ",
        "क्",
        "क",
        "क्क",
        "ख्",
        "ख",
        "ग्",
        "ग",
        "घ्",
        "घ",
        "ङ",
        "चै",
        "च्",
        "च",
        "छ",
        "ज्",
        "ज",
        "झ्",
        "झ",
        "ञ",
        "ट्ट",
        "ट्ठ",
        "ट",
        "ठ",
        "ड्ड",
        "ड्ढ",
        "ड",
        "ढ",
        "ण्",
        "ण",
        "त्",
        "त",
        "थ्",
        "थ",
        "द्ध",
        "द",
        "ध्",
        "ध",
        "न्",
        "न",
        "प्",
        "प",
        "फ्",
        "फ",
        "ब्",
        "ब",
        "भ्",
        "भ",
        "म्",
        "म",
        "य्",
        "य",
        "र",
        "ल्",
        "ल",
        "ळ",
        "व्",
        "व",
        "श्",
        "श",
        "ष्",
        "ष",
        "स्",
        "स",
        "ह",
        "ऑ",
        "ॉ",
        "ो",
        "ौ",
        "ा",
        "ी",
        "ु",
        "ू",
        "ृ",
        "े",
        "ै",
        "ं",
        "ँ",
        "ः",
        "ॅ",
        "ऽ",
        "्",
        "^",
        "*",
        "Þ",
        "ß",
        "¼",
        "½",
        "¿",
        "À",
        "¾",
        "&",
        "Œ",
        "å",
        "ƒ",
        "„",
        "…",
        "†",
        "‡",
        "ˆ",
        "‰",
        "Š",
        "‹",
        "Û",
        "¶",
        "[k",
        "T",
        "t",
        "M+",
        "<+",
        "Q",
        "j",
        "u",
        "Ù",
        "Ùk",
        "Dr",
        "–",
        "—",
        "à",
        "á",
        "â",
        "ã",
        "ºz",
        "º",
        "í",
        "{k",
        "«",
        "K",
        "Nî",
        "Vî",
        "Bî",
        "Mî",
        "<î",
        "|",
        "J",
        "Vª",
        "Mª",
        "<ªª",
        "Nª",
        "Ø",
        "Ý",
        "æ",
        "ç",
        "xz",
        "z",
        "vks",
        "vkS",
        "vk",
        "v",
        "bZ",
        "m",
        "Å",
        ",s",
        "_",
        "ô",
        "?k",
        "³",
        "pkS",
        "P",
        "p",
        "N",
        "÷",
        ">",
        "¥",
        "ê",
        "ë",
        "V",
        "ì",
        "ï",
        "M",
        ".k",
        "F",
        "Fk",
        "n",
        "/k",
        "U",
        "I",
        "c",
        "H",
        "Hk",
        "E",
        "e",
        "¸",
        "G",
        "O",
        "o",
        "'k",
        "\"k",
        "l",
        "g",
        "v‚",
        "‚",
        "ks",
        "kS",
        "k",
        "q",
        "w",
        "s",
        "¡",
        "·",
        "scribble_fallback_font",
        "Welcome to Scribble by @jujuadams! This is version 8.7.0, 2023-03-13",
        "Verbose mode is off, set SCRIBBLE_VERBOSE to <true> to see more information",
        "Versions earlier than GameMaker 2022 LTS are not supported",
        "Scribble: ",
        "Scribble:\n",
        "Scribble 8.7.0: ",
        "\n          ",
        "Using font directory \"",
        "Warning! Font directory \"",
        "\" could not be found in \"",
        "\"!",
        "Colour \"",
        "\" not recognised. Please add it to __scribble_config_colours()",
        "scribble krutidev",
        "Scribble krutidev",
        "Scribble Krutidev",
        "Warning! Determinant of the matrix is zero",
        "\" does not exist in Scribble\n(Fonts added with font_add() are not supported)",
        "__draw_text_scribble__",
        "\" is a chord verb. Verbs passed to this function must be basic verb",
        "Parameter is not a binding (typeof=",
        "\" icon data not found",
        "not a binding",
        "-3",
        "empty",
        "\" unsupported",
        "Warning! Could not find valid icon for \"",
        "\" using \"",
        "Profile name \"",
        "\" doesn't exist",
        "Value provided is not a binding",
        "Warning! Cannot get verbs from binding, profile was <undefined>",
        "Invalid \"alternate\" argument (",
        "\"alternate\" argument too large (",
        ")\nIncrease INPUT_MAX_ALTERNATE_BINDINGS for more alternate binding slots",
        "default",
        "Source must be specified when getting a binding from the default player",
        "Player \"",
        "\" not supported",
        "Usage of input_binding_scan_params_set() has changed. Please refer to documentation for details",
        "Usage of input_binding_scan_start() has changed. Please refer to documentation for details",
        "Binding scan started for player ",
        "Warning! More than one binding collision found, resolution may not be desirable",
        "Collision found in profile=",
        ", verb=",
        ", alternate=",
        "New binding (",
        ") is the same as existing binding for profile=",
        "Warning! Value isn't a binding, ignoring",
        "Warning! Cannot test binding collisions, profile was <undefined>",
        "Verb not recognised (",
        "Repeat opposing check unhandled",
        "Opposing check unhandled",
        "Left verb not recognised (",
        "Right verb not recognised (",
        "Up verb not recognised (",
        "Down verb not recognised (",
        "Invalid color value ",
        "Usage of input_direction() has changed. Please refer to documentation for details",
        "gp_misc1",
        "Gamepad tester not available on GameMaker versions before 2023.8",
        "Hotswap callback must be a function, a script, or <undefined>",
        "Please use input_icon_not_a_binding() to define \"not a binding\" fallback icon",
        "Please use input_icon_empty() to define empty binding fallback icon",
        "Please use input_icons_keyboard() to define keyboard icons",
        "input_icons_gamepad() has been removed. Please use one of the following functions:\n- input_icons_gamepad()\n- input_icons_keyboard_and_mouse()\n- input_icon_not_a_binding()\n- input_icon_empty()",
        "Cannot ignore vk_anykey (=",
        "Could not ignore keycode ",
        ", it is already ignored",
        "Could not un-ignore keycode ",
        ", it is already permitted",
        "input_join_params_set() must be given at least 4 arguments",
        "Invalid maximum player count provided (",
        "Maximum player count too large (",
        " must not be greater than ",
        "Invalid minimum player count provided (",
        "Minimum player count larger than maximum (",
        "Multiplayer leave verb must be a string or <undefined>",
        "Multiplayer abort callback must be a function, a script, or <undefined>",
        "Warning! Onscreen keyboard is not suitable for use on the current platform",
        "Consider using async dialog for modal text input instead",
        "Mouse button out of range (",
        "Invalid source player index provided (",
        "Source player index too large (",
        "Invalid destination player index provided (",
        "Destination player index too large (",
        "Gamepad type \"",
        "Invalid player index A provided (",
        "Player index A too large (",
        "Invalid player index B provided (",
        "Player index B too large (",
        "input_player_verify() failed with the following error: ",
        "Cannot use INPUT_GAMEPAD for a source\nPlease use a specific gamepad e.g. INPUT_GAMEPAD[1]",
        "Invalid source provided (",
        "input_profile_verify() failed with the following error: ",
        "Cannot claim ",
        ", no keyboard or mouse bindings have been created in a default profile (see __input_config_verbs())",
        ", no mouse bindings have been created in a default profile (see __input_config_verbs())",
        ", no gamepad bindings have been created in a default profile (see __input_config_verbs())",
        "Storing previous source mode (",
        "Accessibility settings are corrupted",
        "Momentary toggle verbs are corrupted",
        "Cooldown verbs are corrupted",
        "Mouse settings are corrupted",
        "Player settings are corrupted",
        "Player settings length mismatch\nFound ",
        " players in JSON but we are expecting ",
        " players",
        "input_system_verify() failed with the following error: ",
        "__input_class_binding",
        "Verb group \"",
        "\" doesn't exist\nPlease make sure it has been defined in __input_config_verbs()",
        "\" doesn't exist\nPlease make sure it has been defined in __input_config_verb_groups()",
        "Animation curve doesn't exist (",
        "Warning! input_window_has_focus() has been deprecated. Please use input_game_has_focus()",
        "basic",
        "added ",
        "removed a card",
        "didnt find a card to remove)",
        "started remove from tag",
        "found tag: ",
        " at index: ",
        "checking card ",
        "found matching tag!",
        "none",
        "energy",
        "gas",
        "durability",
        "money",
        "careful_car_owner",
        "cash",
        "carhealth",
        "car_health",
        "OUTDATED SCRIPT",
        "NEW Quest",
        "quest_show",
        "drunk",
        "wasted",
        "alcoholic",
        "negative",
        "hungry",
        "starving",
        "dirty",
        "tired",
        "saver",
        "spender",
        "hot",
        "cold",
        "ac",
        "dirty_seat",
        "radiator",
        "heater",
        "scared",
        "rattmuff_1",
        "rattmuff_2",
        "speeded",
        "rehab",
        "low",
        "junkie",
        "inspired",
        "hh_no_inspire",
        "inspire_happy",
        "happy",
        "sad",
        "be_happy",
        "downer",
        "satisfied",
        "high",
        "happy_user",
        "heartless",
        "spartan",
        "extra_neg_status",
        "positive",
        "ailment",
        "happy_place",
        "hunger",
        "demanding",
        "lose_happy_sad",
        "both",
        "newly_added",
        "weather_clear",
        "rain",
        "energy_low",
        "gas_low",
        "durability_low",
        "money_low",
        "city",
        "rough_road",
        "suburbs",
        "mountain",
        "coast",
        "desert",
        "forest",
        "country",
        "ailment_drunk",
        "ailment_hot",
        "ailment_cold",
        "ailment_happy",
        "ailment_tired",
        "ailment_dirty",
        "ailment_inspired",
        "ailment_sad",
        "ailment_hungry",
        "ailment_social",
        "trait_optimist",
        "trait_broke",
        "trait_ocd",
        "trait_jawa",
        "trait_smoker",
        "trait_bad_driver",
        "trait_good_driver",
        "trait_pinch_purse",
        "trait_careful_car_owner",
        "trait_vegetarian",
        "trait_macgyver",
        "item_toolbox",
        "item_cigarettes",
        "item_tag_alcohol",
        "item_tag_food",
        "car_truck",
        "car_muscle",
        "car_volvo",
        "music_playing",
        "no_music",
        "punk_music",
        "hh_kid",
        "hh_punk",
        "hh_idiot",
        "hh_convict",
        "hh_hurricane",
        "hh_hippie_girl",
        "hh_sleeper",
        "hh_suit",
        "hh_songwriter",
        "hh_mechanic",
        "hh_bride",
        "hh_hiker",
        "night",
        "day",
        "rough",
        "social",
        "optimist",
        "broke",
        "smoker",
        "heavy_smoker",
        "bad_driver",
        "good_driver",
        "pinch_purse",
        "vegetarian",
        "macgyver",
        "toolbox",
        "cigarettes",
        "alcohol",
        "food",
        "kid",
        "punk",
        "idiot",
        "convict",
        "hurricane",
        "hippie_girl",
        "sleeper",
        "suit",
        "songwriter",
        "mechanic",
        "bride",
        "hiker",
        "NO MORE BANTERS",
        "biome in: ",
        "layer in: ",
        "barr_size:",
        "bg out: ",
        "no bg found with name: ",
        ". BG set to none.",
        "sidewalk_7",
        "sidewalk_desert_7",
        "sidewalk_dirt_7",
        "water_1",
        "water_2",
        "water_3",
        "chance",
        "other",
        "behind",
        "start_empty",
        "mid_hill_transition",
        "infront",
        "ocean",
        "lake",
        "midr",
        "rise",
        "lower",
        "mid",
        "wheat",
        "raps",
        "lavender",
        "sunflowers",
        "wheat_5",
        "wheat_6",
        "wheat_7",
        "raps_5",
        "raps_6",
        "raps_7",
        "lavender_5",
        "lavender_6",
        "highgrass_7",
        "sunflower_5",
        "sunflower_6",
        "sunflower_7",
        "railing",
        "rural",
        "railing_desert",
        "railing_country",
        "railing_mountain",
        "railing_city",
        "motorway",
        "destination",
        "railing_forest",
        "env",
        "inherited_land",
        "No bg strip created, bg_id = -1",
        "festival_3",
        "water",
        "road",
        "struct deleted",
        "fg",
        "didn't add sprite (",
        ", since its height exceeds 255 pixels",
        "no sprites in struct, returned spr_bg_space_64",
        "Adding sprites from tag: ",
        "sprites found: ",
        "walk",
        "keep_driving",
        "tow",
        "phone",
        "not_enough_energy_title",
        "not_enough_energy_desc",
        "not_enough_money_title",
        "not_enough_money_desc",
        "walk_gas",
        "cant_drive_title",
        "cant_drive_desc",
        "towing",
        "fade_in",
        "phone_tween_in",
        "tween_out",
        "stopped",
        "winch",
        "black_out",
        "runaway_bride",
        "lose_race",
        "losing",
        "breakable_glass",
        "coffee_cafe",
        "coffee_cafe_broken",
        "beer_glass",
        "beer_glass_broken",
        "wine_glass",
        "wine_glass_broken",
        "tea",
        "tea_broken",
        "milk_shake",
        "milk_shake_broken",
        "month_view",
        "calendar",
        "Deadline: ",
        "quest",
        "quests",
        "main",
        "zooming",
        "car_menu_open_wait",
        "pc_driver",
        "sfx_car_menu_select",
        "hh",
        "inventory",
        "hh_suit_hitch2",
        "ACH_HH_SUIT",
        "hh_hiker_hitch2",
        "hh_mechanic_hitch_non_volvo",
        "hh_hippie_girl_second_hitch",
        "flat_tire",
        "idle",
        "keep driving...",
        "driving",
        "on_the_run",
        "police_pull_over",
        "hitch",
        "road_event",
        "deer",
        "normal",
        "sheep",
        "fallen_tree",
        "fallen_rocks",
        "kids_playing",
        "car_crash",
        "abandoned_car",
        "find_item",
        "dumpster_diving",
        "abandoned_hut",
        "birds_on_road",
        "credits",
        "spins",
        "bonus",
        "gambler",
        "casino",
        "lucky_cat",
        "sfx_cc_car_select",
        "fog",
        "deleted dynamic sprite for strip, no: ",
        "chonky",
        "stack",
        "cloud_chonky_start",
        "cloud_chonky_end",
        "bg_0_clouds_1",
        "cloud_stack_start",
        "cloud_stack_end",
        "cloud_stack_part",
        ": ",
        "- ",
        "text",
        "sun rises",
        "race",
        "give_quest",
        "campsite",
        "Enter",
        "[spr_sss_gas]",
        "building",
        "junk_yard",
        "leave",
        "shop",
        "introspection",
        "work",
        "garage",
        "explore",
        "sleep",
        "goal",
        "dialogue",
        "Use",
        "[spr_sss_culture]",
        "[spr_sss_junkyard]",
        "Leave",
        "[spr_sss_leave]",
        "[spr_sss_shop]",
        "thrift",
        "[spr_sss_shop_thrift]",
        "[spr_sss_shop_parts]",
        "[spr_sss_work]",
        "[spr_sss_mechanic]",
        "Explore",
        "[spr_sss_explore]",
        "[spr_sss_sleep]",
        "[spr_sss_food]",
        "[spr_sss_home]",
        "[spr_sss_goal]",
        "Check",
        "Race!",
        "[spr_sss_race]",
        "Talk",
        "[spr_sss_talk]",
        "player_home",
        "festival_friends",
        "inherited_land_sign",
        "Look",
        "mountain_flag",
        "hospital",
        "[spr_sss_hospital]",
        "person",
        "sq_instrument_turn_in_greeting",
        "sq_gas_turn_in_greeting",
        "sq_band_girls_recognize",
        " by ",
        "game_over",
        "festival",
        "prison",
        "inheritance",
        "party",
        "ACH_ENDING_FAIL",
        "end_game_over",
        "ACH_ENDING_RACE",
        "end_race",
        "ACH_ENDING_FESTIVAL",
        "end_festival",
        "ACH_ENDING_JAIL",
        "end_prison",
        "ACH_ENDING_MOUNTAIN",
        "end_mountain",
        "ACH_ENDING_WORK",
        "end_work",
        "ACH_ENDING_REHAB",
        "end_rehab",
        "ACH_ENDING_INHERITANCE",
        "end_inheritance",
        "ACH_ENDING_PARTY",
        "end_party",
        "200X-",
        "ending_photo_",
        ".png",
        "ending",
        "game_over_time",
        "inheritance_bad",
        " [",
        "stats",
        "check",
        "choice",
        "light_house",
        ") ",
        "drunk_man",
        "dealer",
        "haggler",
        "skill_tree",
        "camera_girl",
        "zimmer_full",
        "rehab_doctor",
        "rehabilitated",
        "rehab_patient",
        "quest added in calendar",
        "NO",
        "§dest",
        "west",
        "east",
        "north ",
        "south",
        "settle_down",
        "§location",
        "money:",
        "  [#FFBD00]Cash:[/color] ",
        "skill_point:",
        "  [#7DB29B]Skill Points:[/color] ",
        " Days",
        "[spr_symbol_infinity]",
        "[fnt_debug_small]",
        "]\n\nTime:\n  [",
        "]\nRewards:\n[",
        "Location:\n",
        "new_quest",
        "seat_sport",
        "roof_hardcover",
        "skills",
        "driving_mastery",
        "on_road",
        "slow_driving",
        "robber",
        "foggy_windows",
        "apple_orchard",
        "pee_break",
        "loan_sharks",
        "police_chase",
        "behind_large_truck",
        "chicken_transport",
        "traffic_jam",
        "tailgating",
        "sportscar",
        "prison_transport",
        "old_man_driving",
        "thunder_storm",
        "window_cleaner",
        "water_puddles",
        "race_hard_turn",
        "muddy_road",
        "rough_terrain",
        "falcon",
        "pot_holes",
        "tumbleweed",
        "construction_area",
        "speed_cameras",
        "chicken_race",
        "ambulance",
        "tractor",
        "epa",
        "cyclist",
        "hh_argument",
        "biker_gang",
        "skate_kids",
        "pushing_car",
        "traffic_light",
        "insect_swarm",
        "fireflies",
        "bee",
        "cow",
        "snake",
        "turtle",
        "car_weird_sounds",
        "sun_in_eyes",
        "road_kill",
        "leg_cramps",
        "goats",
        "confusing_road",
        "lost",
        "forest_shadows",
        "rural_apple_orchard",
        "police",
        "police_pull_over_event",
        "police_chase_event",
        "semitruck",
        "behind_truck",
        "truck_small",
        "saab",
        "t01",
        "hatchback_golf",
        "minivan",
        "stationwagon",
        "workvan",
        "boring_mini",
        "enemy_puddle",
        "mud",
        "enemy_pothole",
        "enemy_tumbleweed",
        "construction_workers",
        "construction_props",
        "skate_kid",
        " to",
        "plain",
        "mountains",
        "fnt_dashboard_top",
        "c_menu_bg",
        "gas_station",
        "supermarket",
        "flag_gas",
        "flag_supermarket",
        "flag_garage",
        "upg_roll_cage",
        "roll_cage",
        "market",
        "cd",
        "coffee",
        "honey_1",
        "honey_2",
        "return",
        "ran super old script scr_create_skill_check. remove from game",
        "linger",
        " Skill points!",
        " Skill point!",
        "+ ",
        "Exp: ",
        "all",
        "city_small",
        "permanent_position",
        "undefined",
        "work ui instance successfully destroyed",
        "FAIL: work ui not found: wrong type of object",
        "rehab_home",
        "dest_leave",
        "graveyard",
        "festival_gate",
        "dog",
        "dennis",
        "dennis_drinking",
        "dennis_laying",
        "dest",
        "explore_",
        "exp_grid_cave_",
        "exp_grid_cave_dir_",
        "exp_grid_height_",
        "exp_grid_height_dir_",
        "exp_grid_special_",
        "grid_special_done_",
        "grid_special_dir_",
        "grid_special_type_",
        "grid_special_id_",
        "door",
        "grid_special_twin_x_",
        "grid_special_twin_y_",
        "grid_special_object_x_",
        "grid_special_object_y_",
        "grid_special_object_zrot_",
        "exp_props",
        "exp_prop_x_",
        "exp_prop_y_",
        "exp_prop_zrot_",
        "exp_prop_ii_",
        "exp_prop_sprite_",
        "world",
        "dest_id",
        "muggers",
        "spr_16_square_bottom_left",
        "work_jobs_",
        "work_work_",
        "work_times_worked_",
        "qb_quests_",
        "qb_quest_id_",
        "qb_quest_taken_",
        "qb_quest_obj_dest_",
        "qb_quest_dest_",
        "qb_quest_x_",
        "qb_quest_y_",
        "park",
        "bar",
        "bar_city",
        "bar_forest",
        "bar_desert",
        "cafe_town_country",
        "cafe_city",
        "cafe_desert",
        "cafe_forest",
        "pub",
        "cafe",
        "shop_items_",
        "shop_type_",
        "shop_buy_multiplier_",
        "shop_shoplifted_",
        "shop_item_",
        "shop_item_x_",
        "shop_item_y_",
        "apple",
        "junkyard_car_sprite_",
        "junkyard_car_ii_",
        "junkyard_car_difficulty_",
        "junkyard_car_available_",
        "spr_ui_menu_junkyard_cars_kombi",
        "pressed",
        "side_stop",
        "tweening",
        "event",
        "festival_info",
        "closed",
        "Come back in the morning",
        "festival_ticket",
        "q_festival_turn_in_greeting",
        "q_festival_turn_in_reject",
        "q_festival_turn_in_done",
        "race_post",
        "letter_race",
        "race_got_quest",
        "race_lost_pamphlet",
        "video_game",
        "No video game!",
        "You've gotta get the video game from your house before you leave!",
        "letter_festival",
        "You got mail!",
        "You should grab the letters from your house before you leave!",
        "choose",
        "no_wheels_leave_title",
        "no_wheels_leave_desc",
        "Leave destination",
        "Keep driving towards ",
        "prompt",
        "inheritance_2",
        "inheritance_3",
        "party_turn_in_greeting",
        "q_festival_friends_complete",
        "kid_auth",
        "idiot_mission",
        "no desc",
        "no title",
        "created work ui",
        "created Explore Object",
        "explore_city",
        "created JUNKYARD Object",
        "dest_option-found for [type quest]: ",
        "Ta",
        "Sko",
        "Hon",
        "Han",
        "Got",
        "Fre",
        "Po",
        "Lin",
        "Par",
        "Dus",
        "Tor",
        "Lang",
        "Kort",
        "Lon",
        "Stol",
        "Tim",
        "Far",
        "Karl",
        "Mead",
        "Inn",
        "er",
        "ims",
        "do",
        "kop",
        "um",
        "tar",
        "le",
        "ta",
        "ska",
        "burgh",
        "dilly",
        "stown",
        "sby",
        "rby",
        "sta",
        "rud",
        "ville",
        "hamn",
        "ston",
        "is",
        "dorf",
        "ol",
        "ing",
        "schol",
        "polis",
        "erry",
        "grad",
        "sund",
        "mouth",
        "forest_pine",
        "town_country",
        "city_small_3",
        "delivery",
        "festival_ticket_vendor",
        "race_track",
        "demo_journal_girl",
        "empty_space",
        "mountain_top",
        "party_cabin",
        "puking_guy",
        "hot_tub_girls",
        "party_guys",
        "race_depot",
        "race_man",
        "race_podium",
        "grandma",
        "thrift_shop",
        "shop_thrift_forest",
        "part_shop",
        "car_part_shop",
        "error",
        "map",
        "mountain_forest",
        "mountain_trail",
        "shop deleted",
        "dennis_festival",
        "dennis_race",
        "dennis_rehab",
        "dennis_party",
        "dennis_inheritance",
        "dennis_lose",
        "dennis_jail",
        "dennis_mountain",
        "dennis_complete",
        "true_ending",
        "dennis_intro",
        "no dialogue with id: ",
        "sprite",
        "journal",
        "left_left",
        "left_right",
        "left_up",
        "left_down",
        "dimmed_windows",
        "next",
        "km",
        "last",
        "NOT DRAWING ANY DESTINATION, REMOVE THIS SCRIPT CALL",
        "glovebox",
        "lv: ",
        "pickup",
        "trunk",
        "consumable",
        "Don't forget your letter!",
        "extra_space",
        "upgrades",
        "illegal",
        "customize",
        ": [",
        " Hours",
        "---- ",
        "Gas: ",
        "$: ",
        "player",
        "car",
        "c:",
        ",s:",
        "idiot_think",
        "adapt",
        "GG",
        "EE",
        "MM",
        "DD",
        "crafting",
        ",2]",
        "c_dashboard",
        "item",
        "item_shop",
        "[fa_left][fa_top]",
        "c_white",
        "[fa_right][fa_top]",
        "skill",
        "Day: ",
        "/30",
        "ERROR: no ending text found. Maybe a monkey stole it?",
        "treasure",
        "punk_city_club",
        "city_east",
        "punk_club",
        "item:",
        "hh:",
        "trait:",
        "item_find",
        "cave",
        "rocks",
        "cheap_repair",
        "gas_pumps",
        "close",
        "open",
        "Adding assets from tag: ",
        "assets found: ",
        "AM",
        "PM",
        "th",
        "nd",
        "rd",
        "st",
        "outdated script scr_get_trait_text_color",
        "didn't find any type for the reward",
        "stop_car",
        "clear_ailments",
        "honk",
        "TYPE: ",
        "neutral",
        "ITEM: ",
        "AILMENT: ",
        "ROAD_EVENT: ",
        "QUEST: ",
        "trait",
        "TRAIT: ",
        "EVENT REWARD",
        "skill_point",
        "SKILL POINT",
        "music",
        "MUSIC",
        "STOP CAR",
        "AMOUNT: ",
        "social_drinker",
        "passive",
        "didn't add perk",
        "car_full",
        "flag_1",
        "flag_2",
        "flag_3",
        "seat: ",
        "pee_breaks",
        "Duncan",
        "dog_head",
        "No exp given to hh, since slot ",
        "is empty.",
        "stranger",
        "help_kid",
        "help_convict",
        "help_bride",
        "help_punk",
        "HHs possible: ",
        "small",
        "full",
        "sfx_volvo_door_close",
        "kick_penalty",
        "hh_drive_faster",
        "kicked_stranger",
        "songwriter_guitar",
        "messy",
        "random_trash",
        "no space found when adding item: ",
        "cigarettes_2",
        "cigarettes_3",
        "toilet_paper",
        "cigarette_share",
        "[Gambler]",
        "street_musician",
        "[Street Musician]",
        "hostel",
        "c_white_text",
        "[fa_right][fa_middle]",
        "[fa_left][fa_middle]",
        "items",
        "item_",
        "found item name: ",
        "got item id: ",
        "hh_",
        "found hh name: ",
        "got hh id: ",
        "env:",
        "got ENV tag: ",
        "road:",
        "trait_",
        "ailment_",
        "bad_parent_relation",
        "CALLING SCRIPT THAT IS REPLACED",
        "adjseat: ",
        "Warning!",
        "You can't throw away the Songwriter's Guitar",
        "Warning",
        "All items outside the trunk will be lost",
        "close_sleep",
        "opened",
        "camera",
        "thrifty",
        "board",
        "hiking",
        "tire_holder",
        "wheels",
        "OUT OF SEQUENCE",
        "sfx_inv_pickup",
        "sfx_inv_pickdown",
        "sfx_car_seat_down",
        "sfx_car_seat_up",
        "combat",
        "book",
        "item_tag",
        "egg_jar",
        "ACH_EXTRA_TWOLANE",
        "sunglasses",
        "random_car_upgrade",
        "random_junk_car_upgrade",
        "random_food",
        "random_drug",
        "random_common_find",
        "random_mushroom",
        "random_berries",
        "random_scrap",
        "random_camping",
        "random_music_equipment",
        "random_porn",
        "random_box",
        "random_book",
        "random_spray",
        "Mom's words:",
        "There is a time and place for everything... but not now",
        "Items Outside",
        "This action will close the trunk, items outside would be lost",
        "gourmet",
        "uncooked",
        "portable_stove",
        "instant_coffee",
        "liquor",
        "consume_alcohol",
        "drunk_energy",
        "junk_food",
        "junk_food_inspire",
        "gourmand",
        "illegal_drug",
        "no_drugs",
        "meat",
        "drunk_meat_eater",
        "sugar",
        "sugar_addict",
        "beverage",
        "pill",
        "snort",
        "smoke",
        "weed",
        "relax",
        "hot_coffee",
        "jumper_cables",
        "litterbug",
        "random_drug_illegal",
        "upgrade_find,junk_upgrade",
        "junk_upgrade",
        "food,!non_shop",
        "illegal_drug,legal_drug",
        "common_find",
        "cat",
        "missing_cat",
        "trash",
        "mushroom",
        "camping",
        "porn",
        "scrap",
        "berries",
        "box",
        "musical_equipment",
        "spray",
        "\n[#646899]Unlock: ",
        "][#E7E9DB]",
        "[fa_left]",
        "[fa_top]",
        "[color][#132116]",
        "\n\n",
        "ailment:dirty,",
        "item:random_car_upgrade",
        "item:random_scrap",
        "junkyard",
        "headache",
        " left: ",
        ", right:",
        "help_stranger",
        "next_log_id",
        "quest_devname_",
        "quest_log_id_",
        "quest_start_month_",
        "quest_start_day_",
        "quest_end_month_",
        "quest_end_day_",
        "quest_objectives_",
        "quest_dest_",
        "quest_desc_h_",
        "quest_hh_",
        "quest_dest_normal_",
        "ERROR",
        "quest_obj_dest_normal_",
        "quest_obj_done_",
        "quest_obj_pin_active_",
        "quest_obj_progress_",
        "quest_obj_progress_id_",
        "quest_obj_dest_",
        "next_dest_options",
        "road_controller",
        "road_type",
        "road_env",
        "dest_length",
        "next_dest_option_id_",
        "next_dest_option_type_",
        "next_dest_option_x_",
        "next_dest_option_hh_occupied_",
        "person_id_",
        "person_interacted_",
        "person_quest_",
        "person_hh_quest_complete_",
        "person_quest_complete_id",
        "next_dest_bg_sprites",
        "dest_bg_sprite_",
        "spr_button",
        "dest_bg_sprite_x_",
        "car_pos",
        "savedata",
        "savedata_demo",
        "showdialog",
        "savedata.ini",
        "savedata/savedata.ini",
        "savedata/prev_savedata.ini",
        "prev_savedata.ini",
        "savedata_demo.ini",
        "hitchhikers",
        "hhs",
        "hh_level_",
        "hh_exp_",
        "hh_blocked_",
        "hh_picked_up_",
        "hh_list",
        "hh_talk_done_",
        "hh_talk_available_",
        "hh_banter",
        "banters_seen",
        "banter_seen_",
        "nada",
        "item_x_",
        "item_y_",
        "item_quest_",
        "item_rotated_",
        "item_charges_",
        "item_in_trunk_",
        "item_in_es_",
        "gb_items",
        "gb_item_",
        "gb_item_x_",
        "gb_item_y_",
        "gb_item_quest_",
        "gb_item_charges_",
        "seat_active_",
        "seat_passenger_",
        "extra_space_active_",
        "skill_uses_name_",
        "skill_uses_",
        "skill_",
        "dest_current",
        "destinations",
        "dest_is_goal_",
        "dest_is_sidestop_",
        "dest_name_",
        "name not loaded",
        "dest_type_",
        "dest_id_",
        "side_stop_gas",
        "dest_x_",
        "dest_y_",
        "dest_hidden_",
        "dest_exists_",
        "dest_road_type_",
        "dest_map_text_",
        "load_error",
        "dest_env_",
        "dest_bgset_",
        "dest_coast_0_",
        "dest_coast_1_",
        "dest_coast_2_",
        "special_dests",
        "special_dest_",
        "roads",
        "road_start_",
        "road_goal_",
        "road_name_",
        "no name",
        "road_dmin_",
        "road_dmax_",
        "road_hidden_",
        "road_industry_",
        "road_pn_",
        "road_px_",
        "road_py_",
        "road_env_changes_",
        "road_env_change_",
        "road_env_change_pos_",
        "road_env_change_point_",
        "road_env_change_water_",
        "road_type_changes_",
        "road_type_change_",
        "road_type_change_point_",
        "road_type_change_pos_",
        "road_start_road_type_",
        "road_end_road_type_",
        "road_exists_",
        "road_subpaths_",
        "road_subpath_type_",
        "road_sub_path_start_",
        "road_sub_path_end_",
        "road_type_main_",
        "road_type_second_",
        "mountain_road",
        "lakes",
        "lake_x_",
        "lake_y_",
        "lake_ii_",
        "lake_angle_",
        "lake_scale_",
        "forests",
        "forest_x_",
        "forest_y_",
        "forest_ii_",
        "forest_angle_",
        "forest_scale_",
        "deserts",
        "desert_x_",
        "desert_y_",
        "desert_ii_",
        "desert_angle_",
        "desert_scale_",
        "mountain_x_",
        "mountain_y_",
        "mountain_ii_",
        "mountain_angle_",
        "mountain_scale_",
        "mountain_blend_",
        "cities",
        "city_x_",
        "city_y_",
        "city_ii_",
        "city_angle_",
        "city_scale_",
        "ic_legend_expanded",
        "ic_legend_icon_active_",
        "pen_marker_sprite.png",
        "playlist_track_",
        "playing",
        "paused",
        "current_track",
        "track_pos",
        "playlist_exists",
        "playlist_length",
        "song_groups_unlocked",
        "song_group_unlocked_",
        "cds_collected",
        "road_t",
        "road_signs",
        "road_sign_done_",
        "road_sign_",
        "road_sign_x_",
        "road_sign_id_",
        "speed_signs",
        "speed_sign_value_",
        "audio",
        "sound_volume",
        "music_volume",
        "master_volume",
        "display",
        "camera_lut_map",
        "streamer_mode",
        "full_screen",
        "borderless",
        "month",
        "time_hour",
        "time_minute",
        "day_status",
        "portrait",
        "road_level",
        "skill_points",
        "traits",
        "daydreamer",
        "have_a_go_nerf",
        "roads_done",
        "ailments",
        "ailment_timer_",
        "ailment_timer_max",
        "tired_stacks",
        "current_car",
        "upg_",
        "engine",
        "counter_",
        "meta",
        "memories",
        "memory_",
        "wears",
        "wear_",
        "wear_alpha_current_",
        "wear_sprites_",
        "wear_sprite_alpha_",
        "discard_size",
        "discard_",
        "map_dest_id",
        "map_last_dest_id",
        "weather",
        "bg_strips",
        "count",
        "bg_strip_",
        "bg_strip_set_x_",
        "tmp_objects",
        "amount",
        "tmp_object_sprite_name_",
        "spr_nothing",
        "tmp_object_x_",
        "tmp_object_y_",
        "tmp_object_front_",
        "tmp_object_way_back_",
        "tmp_object_loop_",
        "tmp_bg_objects",
        "tmp_object_layer_",
        "traffic",
        "traffic_paused",
        "special",
        "race_exists",
        "race_ready",
        "race_complete",
        "festival_exists",
        "ticket_used",
        "unfold_2",
        "fold_1",
        "TEST DEST",
        "no name generated",
        "started new main path",
        "stops: ",
        "stops done, making dests",
        "done making dests",
        "start dest: ",
        "goal dest: ",
        "scr_map_add_path start",
        "------------NEW PATH (number: ",
        "force_motorway = ",
        "------------IGNORED BLOCKERS FOR ROAD ",
        "path unsuccessful between ",
        " and ",
        "Road ",
        "start type: ",
        "subpaths for road number ",
        " is ",
        "did not add path",
        "scr_map_add_path end",
        "scr_bug_check_road_start",
        "scr_bug_check_road_end",
        "scr_map_adjust_dest_pos_with_grid, breaking loop",
        "quest_preview",
        "closest dest from: ",
        "gas_shop_forest",
        "gas, ",
        "thrift_shop, ",
        "get icon string",
        "[region,",
        "] ",
        "[/region]",
        "scr_map_dests_update_icon_string called",
        "[fa_left][fa_bottom][fnt_debug_small]",
        "c_dark_white",
        "fnt_debug_small",
        "[fa_center][fa_middle]",
        "road_info",
        "\nkm",
        "DEBUG",
        "created quest with same pickup dest as goal",
        "city_not_main_1",
        "city_not_main_2",
        "first_stop",
        "rural_3",
        "removed a path of length 0",
        "changed road type for dest: ",
        " from ",
        " to country",
        "------------------------------REMOVED ISOLATED DEST: ",
        "harder",
        "Home",
        "<FINALIZED, MAKING SPECIAL PATHS> ADDED NEW PATH FROM ",
        " to ",
        "The WAY OUT Festival",
        "ADDED FORWARD PATH FROM {0} to {1}",
        "ADDED WHATEVER PATH FROM ",
        "ADDED 2nd FORWARD PATH FROM {0} to {1}",
        "FAILED with blocker boy. Iteration: ",
        "didn't fail, adding dest",
        "city_north",
        "city_coast",
        "motor_way",
        "show_new_dest",
        "remove_path_start",
        "No path to remove between dest_",
        " and dest_",
        "remove_path end",
        "---no pin found to remove, dest: ",
        "[spr_text_gas,0] : ",
        "[spr_text_time] : ",
        "sfx_pen_circle",
        "rally_wheels",
        "upgrade",
        "take_in_nature",
        "spoiler_2",
        "sport_tires",
        "spoiler_1",
        "exhaustpipe",
        "muffler",
        "hh_city_hate",
        "hh_perk",
        "Active Road Effects:\n",
        "[c_bonus_pos] + ",
        "[c_bonus_neg] - ",
        "\n[/color]",
        "SPECIAL DEST",
        "mountain_base",
        "Festival",
        "birch_hills",
        "Mt. Base",
        "Mt. Peak",
        "Skovde",
        "Your Land",
        "Racetrack",
        "The Cabin",
        "forest_mix",
        "Rehab",
        "St.Pauls",
        "El Cobra",
        "Vinga",
        "lighthouse",
        "side_stop_camping_grounds",
        "side_stop_fruit_stand",
        "side_stop_garage",
        "side_stop_junkyard",
        "side_stop_honey_stand",
        "side_stop_gas_desert_church",
        "side_stop_motel_desert",
        "side_stop_gas_desert",
        "side_stop_gas_forest",
        "side_stop_gas_forest_church",
        "side_stop_explore_forest",
        "R ",
        " to:",
        "Threat level: ",
        "ERROR no menu text found matching: ",
        "%t",
        "camping_grounds",
        " - ",
        "cd_tween_in",
        "playlist",
        "edit",
        "----",
        "mm_eject_title",
        "mm_eject",
        "mm_back_title",
        "mm_back",
        "mm_next_title",
        "mm_next",
        "mm_stop_title",
        "mm_stop",
        "mm_play_title",
        "mm_play",
        "mm_pause_title",
        "mm_pause",
        "compass",
        "countdown",
        "Screen_Pause.png",
        "Closed",
        "It is closed",
        "sfx",
        "master",
        "sleep_car",
        "hostel_6",
        "hostel_12",
        "idiot_flowers",
        "dog_friend",
        "hiker_new_roads",
        "give_calendar",
        "give_pillow",
        "reward",
        "quest_turn_in",
        "hobo",
        "race_enter_accept",
        "give_zimmer_cd",
        "grandma_greeting",
        "fwa_1",
        "Car Menu Update!",
        "JOURNAL, REST and MUSIC added to car menu.",
        "Sleep!",
        "Sleep added to car menu. Rest wherever you are!",
        "QUEST COMPLETE",
        "Turn in quest?",
        "quest_turn_in_prompt",
        "Give Money",
        "Give one buck to the man?",
        "hobo_prompt",
        "hh_songwriter_talk_max",
        "hurricane_drunk_driving",
        "kid_dad_1",
        "kid_dad_2",
        "kid_dad_3",
        "kid_dad_4",
        "bride_fun_stuff",
        "bride_go_home",
        "hh_hurricane_give_cd",
        "makthaverskan",
        "hh_punk_give_cd",
        "mundane",
        "hh_hiker_quest_fail",
        "The Hiker left",
        "The Hiker has left your car",
        "level_up",
        "perk_story",
        "upg:roll_cage",
        "tag:",
        "festival_ticket_vendor_greeting_lost_ticket",
        "race_wowed",
        "hh_default_dest_greeting",
        "hh_default_kicked_greeting",
        "human",
        "default_done",
        "default_reject",
        "race_yelp",
        "hitchhiker",
        "inc",
        "punk_city",
        "film_extra",
        "black_spray",
        "advert",
        "warrior_energy",
        "side",
        "quest_complete",
        "Quest Complete!",
        "You finished [",
        "].",
        "gas_delivery",
        "suit_get_to_family",
        "Suit left",
        "The Suit has left your car",
        "help_suit",
        "The Kid left",
        "The Kid has left your car",
        "ACH_HH_KID",
        "convict_escape",
        "The Convict left",
        "The Convict has left your car",
        "ACH_HH_CONVICT",
        "hiker_go_mountain",
        "help_hiker",
        "The Bride left",
        "The Bride has left your car",
        "stranger_casino",
        "hh_stranger_q2_begin",
        "ACH_HH_PUNK",
        "ACH_HH_BRIDE",
        "hh_idiot_q_complete_again",
        "stranger_debt",
        "ACH_HH_STRANGER",
        "instrument_delivery",
        "demo_main",
        "demo_game_over",
        "hh_punk_fail_quest",
        "Quest Failed",
        "You failed [",
        "untrustworthy",
        "quest_fail",
        "quest_turn_in_test",
        "§set",
        "hidden",
        "pick_up_generate",
        "pick_up_same",
        "new_dest",
        "any_city",
        "employment_office",
        "closer_quests",
        "N/A",
        "finished",
        "Changing bg, water distance: ",
        "energy_cost_mod",
        "gas_cost_mod",
        "car_health_cost_mod",
        "fnt_interact_text",
        "c_vanilla_text",
        "road_event_wait",
        "roof_wrap_1",
        "roof_wrap_2",
        "sfx_cc_car_swap",
        "random",
        "waiting",
        "attacking",
        "partner_in_crime",
        "gun",
        "Busted!",
        "The cops took The Convict",
        "stop",
        "[blink]THREAT AVERTED",
        "race_music",
        "race_inspire",
        "race_happy",
        "playing_music",
        "speakers",
        "rough_road_shields",
        "tractor_humming",
        "all_attack",
        "stat_change",
        "saving_grace",
        "tribe:",
        "racer",
        "ail:",
        "spec:",
        "hh_in_car",
        "gb_organize",
        "specific",
        "moving",
        "phase_execute",
        "crowbar",
        "flash_light",
        "rope",
        "loner",
        "shattering",
        "suspension",
        "double_engine",
        "rough_road_tires",
        "winter_tires",
        "used_wheels",
        "rim_wheels",
        "super_wide_tires",
        "junk_wheels",
        "super_tires",
        "compressor",
        "NO ENEMY FOUND FOR ROAD TYPE: ",
        " LEVEL: ",
        "extra",
        "shield",
        "done",
        "bomb",
        "clone",
        "debuff",
        "crit",
        "flee_easy",
        "oblivious",
        "weather_extra_energy",
        "headlights_1",
        "headlights_2",
        "roof_lights",
        "waiting_for_skill",
        "sfx_re_hit_d",
        "sfx_re_hit_e",
        "sfx_re_hit_g",
        "sfx_re_hit_m",
        "sfx_re_t_disappear",
        "sfx_re_t_perfect",
        "sfx_re_t_warning",
        "sfx_re_t_attack",
        "event_start",
        "select_attackers",
        "player_phase",
        "road_phase",
        "basic_wheels",
        "animal_big",
        "light",
        "execute",
        "threat_status_tween_in",
        "player_phase_wait",
        "old_seats",
        "night_sleep",
        "[c_menu_bg]",
        "[fnt_debug_small][c_menu_bg]\nGas cost: ",
        "fnt_debug",
        "[STOP FOR HITCHHIKER]",
        "clouds",
        "distant_hills_green",
        "flat_grass_3_1",
        "grassy_hills_5",
        "grassy_hills_6",
        "grassy_hills_7",
        "basic_fg",
        "festival_6_campers",
        "grassy_hills",
        "texel_size",
        "blur_vector",
        "tex",
        "mix_amount",
        "forest_leaf",
        "industry_3",
        "city_projects_3",
        "allergic",
        "road_warning",
        "savedata_demo/prev_savedata_demo.ini",
        "savedata_demo/savedata_demo.ini",
        "save",
        "save_done",
        "save_exists",
        "save_test",
        "test",
        "starting to save game",
        "path_details_saved",
        "wrong save script called",
        "item_id_",
        "gb_item_id_",
        "skill_trees",
        "skill_tree_id_",
        "ic_legend_icons",
        "road_side_stops_",
        "road_side_stop_pos_",
        "road_start_rt_",
        "road_end_rt_",
        "endings_done",
        "ending_done_",
        "ending_hhs_",
        "ending_hh_",
        "ending_km_",
        "ending_memories_",
        "ending_memory_",
        "unlock_got_",
        "road_id",
        "savedata/settings.ini",
        "savedata_demo/settings.ini",
        "last_car_exists_",
        "last_car_upg_",
        "graveyard_6",
        "forest_grassy_race_crowd_6",
        "targeting",
        "super_market",
        "gasstation",
        "drug_dealer",
        "gas_store",
        "drug_alley",
        "part_store",
        "farmers_market",
        "shoplifting",
        "hh_forced_vegan",
        "Vegan mode!",
        "dairy",
        "dog_food",
        "removed one item from shop",
        "shopping",
        "front",
        "have_a_go",
        "apetite",
        "tired_eyes",
        "songwriter_setup",
        "songwriter_soothe",
        "fixer",
        "kid_game_1",
        "songwriter_use_skills",
        "found skill",
        "bar: ",
        ",skill_slot: ",
        "kid_game_2",
        "sport_brakes",
        "Improved Brakes",
        "discount",
        "(§skills_used)",
        "Cost:\n",
        "Cost:\nFree!",
        " uses",
        "basic_skill_text",
        "[Passive:] ",
        "bribe",
        "escape_plan",
        "cower",
        "safety_first",
        "exploit",
        "going_home",
        "sleeper_armor",
        "hiker_resource",
        "improvise",
        "power_chord",
        "team_refresh",
        "lose_status",
        "refreshing_thoughts",
        "sing_along",
        "hh_restore",
        "scavenge",
        "ambitious_plan",
        "smoke_break",
        "patience",
        "power_break",
        "convict_2",
        "armor_shatter",
        "snore",
        "dont_worry_2",
        "poison_heart",
        "on_the_edge",
        "big_gamble",
        "hunger_rage",
        "nice_wheels",
        "backrubber",
        "rowdy_bunch",
        "kid_game_3",
        "seat_comfy",
        "social_mastery",
        "kid_game_31",
        "Hitchhiker Skill uses +1",
        "joint",
        "banana",
        "bandage",
        "coupon",
        "skittles",
        "gum2",
        "NO ITEM FOUND FOR SCAVENGE, ADDED apple",
        "one_of_each",
        "sfx_skill_hanger",
        "sfx_skill_equip",
        "sfx_skill_remove",
        "sfx_skill_select",
        "NO SKILL TREE FOUND WITH NAME <",
        "-----> defaulted to BASIC",
        "manage",
        "resource",
        "end_turn",
        "extra_turn",
        "idiot_x",
        "Skill uses restored",
        "Skill uses +",
        "tent",
        "tent_rack",
        "Car broken",
        "Not enough durability",
        "cost_type",
        "cost_amount",
        "small_town_day",
        "small_town_night",
        "big_city_day",
        "big_city_night",
        "forest_day",
        "forest_night",
        "desert_day",
        "desert_night",
        "country_day",
        "country_night",
        "festival_pre",
        "color",
        "cosmetic",
        "road_trip",
        "running_on_fumes",
        "fuel_injection",
        "exhaust_manifold",
        "social_free",
        "shady_deals",
        "compressor_old",
        "servo",
        "car_savvy",
        "mechanic_engine",
        "junk_engine",
        "junk_interior",
        "scratches",
        "Energy: ",
        "Socialmod: ",
        "Money: ",
        "Energy Cost Mod.: ",
        "Durability: ",
        "Gas Cost Mod.: ",
        "zone",
        "Gas Drain.: ",
        "Durability Cost Mod.: ",
        "_-_-Player-_-_",
        "_-_-Car-_-_",
        "New trait!",
        "_prev_cds",
        "][/color]",
        "target_energy_desc_title",
        "target_gas_desc_title",
        "target_money_desc_title",
        "target_durability_desc_title",
        "target_none_desc_title",
        "target_all_desc_title",
        "target_energy_desc",
        "target_gas_desc",
        "target_money_desc",
        "target_durability_desc",
        "target_none_desc",
        "target_all_desc",
        "carburetor",
        "§tired_stacks",
        "§spender_stacks",
        "§saver_stacks",
        "§skills_used",
        "skill_info",
        "§amnt",
        "medium",
        "---no trait found",
        "scr_trait_list_update called. Shouldn't use this anymore",
        "LOST TRAIT",
        "you lost the ",
        " trait!",
        "moody",
        "duct_tape",
        "hh_hurricane_party_complete",
        "hh_hiker_mountain_top",
        "camp_fire",
        "auto_repair",
        "cure_negative_ailment_arrive",
        "thermos",
        "cold_coffee",
        "coffee_cafe_cold",
        "hh_punk_city",
        "hh_suit_party_cabin",
        "hh_convict_party_cabin",
        "hh_kid_party_cabin",
        "hh_songwriter_party_cabin",
        "hh_bride_party_cabin",
        "hh_punk_party_cabin",
        "hh_hiker_party_cabin",
        "hh_mechanic_party_cabin",
        "hh_stranger_party_cabin",
        "hh_girl_party_cabin",
        "hh_idiot_party_cabin",
        "hh_suit_inheritance",
        "hh_convict_inheritance",
        "hh_kid_inheritance",
        "hh_songwriter_inheritance",
        "hh_bride_inheritance",
        "hh_punk_inheritance",
        "hh_hiker_inheritance",
        "hh_mechanic_inheritance",
        "hh_sleeper_inheritance",
        "hh_stranger_inheritance",
        "hh_hippie_girl_inheritance",
        "hh_idiot_inheritance",
        "festival_6_tents",
        "road env changed: ",
        "heat",
        "Level up!",
        " has reached level ",
        "! Check out their new skills from the trunk menu!",
        "hh_hippie_girl_talk",
        "max_hippie_girl",
        "hh_kid_greeting_b",
        "hh_suit_begin_q2",
        "hh_mechanic_talk_race",
        "hh_hurricane_begin_q1",
        "hh_songwriter_talk",
        "max_songwriter",
        "hh_convict_talk",
        "hh_hiker_talk",
        "trigger hh level up",
        "finish_satisfied",
        "junk_dealer",
        "Junk Dealer",
        "demo_game_over_video_game_sell",
        "perfectionist",
        "student",
        "bookworm",
        "wanderlust",
        "carefree",
        "center_of_attention",
        "escape_from_event",
        "runaway",
        "cure_negative",
        "cure_positive",
        "seat_beads",
        "upgrade_dependant",
        "road_start_neg_status",
        "Team Work",
        "fast_repair",
        "fine_dining",
        "basic_mastery",
        "thrifty_mastery",
        "matches",
        "caffeine_pills",
        "turbo",
        "cold_coffee_cafe",
        "double_hot_cold",
        " [HOT]",
        " [COLD]",
        "crystal_boys02",
        "improved_brakes",
        "undershield",
        "junk_snow_plow",
        "junk_exhaustpipe",
        "skirts",
        "subwoofer",
        "sport_intake",
        "kofangare_1",
        "kofangare_2",
        "cheap_rack",
        "classic_rack",
        "good_rack",
        "mechanic_upgrades",
        "hh_mechanic_talk1",
        "inspired_worker",
        "suit_get_to_work",
        "Macro names should be strings.\n(Input to script was \"",
        "Script with asset index ",
        " doesn't exist\n ",
        "Invalid function provided\n(Input datatype was \"",
        "Warning! Macro name \"",
        "\" has already been defined as a colour",
        "\" has already been defined as an effect",
        "\" has already been defined as a typist event",
        "Warning! Overwriting event [",
        "] tied to <invalid script>",
        "] tied to \"",
        "Colour values should be 24-bit BGR values",
        "External sound alias \"",
        "Audio asset ",
        " could not be found",
        "scribble_font_add_all() has been fully deprecated - all standard fonts are automatically loaded on boot\nAdditionally, you can delete all .yy files from Included Files",
        "scribble_font_add_from_sprite() has been fully deprecated\nPlease use GM's native font_add_sprite_ext()\nSpace width can be customised with scribble_glyph_set() if required",
        "scribble_font_add_msdf() has been fully deprecated\nPlease tag MSDF sprites with \"scribble msdf\" and rename your source JSON files to match the sprite's name",
        "scribble_font_add() has been fully deprecated - all standard fonts are automatically loaded on boot\nAdditionally, you can delete all .yy files from Included Files",
        "u_vOutlineColor",
        "This function has been deprecated\nPlease use scribble_font_bake_outline_4dir() or scribble_font_bake_outline_8dir()",
        "Fonts should be specified using their name as a string.\n(Input was an invalid datatype)",
        "Source font and new font cannot share the same name",
        "Source font \"",
        "\" not found\n\"",
        "\" will not be available",
        "Source font cannot be an MSDF font",
        "No space left on ",
        " texture page\nPlease increase the size of the texture page",
        "u_vShadowDelta",
        "u_vShadowColor",
        "scribble_font_combine() has been removed. Please use the font collaging functions instead:\nscribble_super_create()\nscribble_super_copy_all()\netc.",
        "The default font should be defined using its name as a string.\n(Input was an invalid datatype)",
        "Setting default font to \"",
        "Character \"",
        "\" not found for font \"",
        "Space character not found for font \"",
        "__scribble_class_element",
        "body",
        "[/indent]",
        "quote",
        "header1",
        "header2",
        "header3",
        "[/font]",
        "[/scale]",
        "[scale,",
        "[/color]",
        "[d#",
        "[/i]",
        "[/b]",
        "[/bi]",
        "[i]",
        "[b]",
        "[bi]",
        "Warning! Found stacked indentation",
        "[indent]",
        "- [indent]",
        "] [indent]",
        "bold",
        "italic",
        "bold_italic",
        "region,",
        "link",
        "Input was not a struct (datatype=",
        "bullet_sprite",
        "Root struct name \"",
        "\" not permitted",
        "<bullet_sprite> sprite",
        " does not exist",
        "<bullet_sprite> sprite \"",
        "\" is not a sprite",
        "<bullet_sprite> is the wrong datatype. It must be a sprite index or the name of a sprite (datatype=",
        "Child struct <",
        "> must be a struct (datatype=",
        "font",
        "\"font\" property \"",
        "\" is not a font (style=\"",
        "Child struct property \"font\" must be the name of a font as a string (datatype=",
        ", style=\"",
        "Child struct property \"",
        "\" must be a number (datatype=",
        "Child struct property \"bold\" must be <true> or <false> (datatype=",
        "prefix",
        "suffix",
        "\" must be a string (datatype=",
        "Child struct property <",
        "> not permitted (style=",
        "Cannot determine if the source font is an MSDF font. Please add glyphs to it",
        "Cannot mix standard/sprite fonts with MSDF fonts (target is not an MSDF font)",
        "Cannot mix standard/sprite fonts with MSDF fonts (source is not an MSDF font)",
        "Source font's MSDF pxrange must be defined before copying glyphs",
        "MSDF font pxrange must match (target = ",
        " vs. source = ",
        "Warning! Glyph ",
        ") not found in source font",
        "scribble_typewriter_add_character_delay() has been moved to a typist method\nPlease use <typist>.character_delay_add() instead\nAdditioanlly, SCRIBBLE_ALLOW_GLYPH_DATA_GETTER must be set to <true> to use per-character delay",
        "scribble_typewriter_add_event() has been replaced by scribble_typists_add_event()",
        "Event names should be strings.\n(Input to script was \"",
        "Warning! Event name \"",
        "\" has already been defined as a macro",
        "scribble() should not be used to access/draw text elements\nPlease instead call the .draw() method on a text element e.g. scribble(\"text\").draw(x, y);",
        "transport_truck",
        "taxi",
        "oc",
        "big",
        "More than one instance of ",
        " has been created\nPlease ensure that ",
        " is never manually created",
        "Hey!",
        "Sorry I didn't have time to call before I left.",
        "How are the new meds?",
        "Do you remember me?",
        "My mom,",
        "I mean your daughter...",
        "...told me you have a really nice Road Book I could have.",
        "Off on my first road trip, you know! ",
        "Wish me luck! Bye!",
        "px",
        "py",
        "pz",
        "fog_col",
        "exit",
        "wc",
        "up",
        "accept",
        "sfx_footstep_carpet",
        "fade_out",
        "Headache",
        "Double damage taken during events",
        "Social",
        "Hitchhikers level faster.",
        "Drunk",
        "You are drunk! Driving not recommended ...hic! You have limited time during road events.",
        "Hungry",
        "Energy costs increased by 1",
        "Dirty",
        "You are dirty, hitchhikers gain less Exp",
        "Inspired",
        "The next energy cost is reduced to 0. (lose this when used)",
        "Satisfied",
        "Energy costs decreased by 1",
        "Starving",
        "Energy costs increased by 2",
        "Hot",
        "When you take damage during events, also take 1 gas damage. You're thirsty...",
        "In the Zone",
        "Gas drain decreased by 25%",
        "Speeded",
        "Energy costs decreased by 5! Lose energy after road event. Make this last!",
        "Withdrawal",
        "Energy costs increased by 3! Ouch!",
        "Tired",
        "Max energy reduced by §tired_stacks",
        "Cold",
        "When you take damage during events, also take 1 durability damage. Got something hot to drink?",
        "Spender",
        "Gain 1 energy after buying an item. (§spender_stacks left)",
        "Saver",
        "Lose 1 energy after buying an item. (§saver_stacks left)",
        "Happy",
        "Get an additional potential extra turn during Road Events",
        "Sad",
        "You can't take any extra turns during Road events",
        "High",
        "You are very high. Driving not recommended",
        "Stressed",
        "Next skill consumes an additional use",
        "Wasted",
        "You are veeeery drunk! Do not drive! ...hic! You have limited time during road events.",
        "Camping",
        "Resting will cost 0 durability and fully restore energy.",
        "banter.kdr",
        "//",
        "banter done: ",
        "name:",
        "req:",
        "text:",
        "text_hh:",
        "typing",
        "ahh.. This is nice!",
        "yes indeed!",
        "We need to stop soon though!",
        "next_line",
        "bgs.kdr",
        "default_bg",
        "bg_name:",
        "bg_layer:",
        "bg_short_lived:",
        "bg_animate:",
        "bg_biome:",
        "bg_env:",
        "bg_sprite_tag:",
        "bg_sprite:",
        "bg_sprite_coast_begin:",
        "bg_sprite_coast_end:",
        "bg_sprite_begin:",
        "bg_sprite_end:",
        "bg_iis:",
        "bg_height:",
        "bg_y:",
        "bg_tag:",
        "struct:",
        "struct_wind:",
        "struct_building:",
        "struct_number:",
        "struct_chance:",
        "struct_x_min:",
        "struct_x_max:",
        "struct_y_min:",
        "struct_y_max:",
        "struct_spawn_mode:",
        "parked_car",
        "country_mix",
        "desert_mix",
        "city_mix",
        "rural_wheat",
        "rural_raps",
        "apple_orchard_5",
        "apple_orchard_6",
        "apple_orchard_7",
        "rural_sunflower",
        "sunflower_3",
        "rural_lavender",
        "highgrass_7_clean",
        "birch_hill_5",
        "birch_hill_6",
        "birch_hill_7",
        "town_country_5",
        "town_country_6",
        "desert_beach_5",
        "forest_earthly_6",
        "yellowgrass_3",
        "forest_mossy",
        "forest_mossy_5",
        "forest_mossy_6",
        "forest_mossy_7",
        "forest_earth",
        "forest_earthly_5",
        "forest_earthly_7",
        "mountain_1_bottom",
        "mountain_2_bottom",
        "mountain_3",
        "mountain_4",
        "mountain_6",
        "mountain_7",
        "mountain_1_top",
        "mountain_2_top",
        "yellowgrass_5",
        "yellowgrass_6",
        "flatgrass_3",
        "lowgrass_clean_5",
        "lowgrass_clean_7",
        "festival_5",
        "festival_fg",
        "forest_grassy_6",
        "forest_grassy_race_7",
        "crow",
        "pigeon",
        "fly",
        "sfx_bird_dove_fly",
        "sfx_bird_crow_fly",
        "OK",
        "FAIL",
        "not_road",
        "jail_wait",
        "walking",
        "zoom",
        "result",
        "success",
        "fail",
        "[spr_gp_icon_face1,0]: Keep Driving.",
        "GAME OVER",
        "button",
        "sfx_mm_hover_over",
        "monday",
        "tuesday",
        "wednesday",
        "thursday",
        "friday",
        "saturday",
        "sunday",
        "monday_full",
        "tuesday_full",
        "wednesday_full",
        "thursday_full",
        "friday_full",
        "saturday_full",
        "sunday_full",
        "Noday",
        "-Do the dishes",
        "-Buy food",
        "-Andrew's party",
        "paper_tex",
        "tex_size",
        "uScale",
        "uYrot",
        "uFreq",
        "down",
        "day_view",
        "sfx_pen_tap_hard",
        "action",
        "right_down",
        "right_up",
        "[spr_gp_icon_face3,0]: Toggle Pins. [spr_gp_icon_face4,0]: Check on map.",
        "[spr_gp_icon_face1,0]: Expand Quest.",
        "o ",
        "     ",
        "Log",
        "240",
        "sfx_v_accel",
        "sfx_v_deaccel",
        "sfx_v_start",
        "sfx_v_stop",
        "truck",
        "sfx_t_accel",
        "sfx_t_deaccel",
        "sfx_t_start",
        "sfx_t_stop",
        "muscle",
        "sfx_m_accel",
        "sfx_m_deaccel",
        "sfx_m_start",
        "sfx_m_stop",
        "volvo240_upgrade",
        "pc_truck",
        "pc_truck_upgrade",
        "pc_muscle",
        "pc_muscle_upgrade",
        "Click on car to open CAR MENU",
        "Press Y to open CAR MENU",
        "clear_blur_masks",
        "road_mask",
        "blur_mask",
        "threat_arrow_a",
        "arrow",
        "intro",
        "message",
        "Click the car to open the [#E4ACF1]CAR MENU[/color]",
        "action_wait",
        "activate",
        "clear_messages",
        "show options",
        "From this menu you can open your trunk, check your journal and your map.",
        "More options will be added to your car menu as you play.",
        "end_wait",
        "wait",
        "casino_spins_title",
        "casino_spins_desc",
        "casino_cashout_title",
        "casino_cashout_desc",
        "casino_pay_title",
        "casino_pay_desc",
        "casino_lever_title",
        "casino_lever_desc",
        "cherry",
        "melon",
        "pineapple",
        "jackpot",
        "cash_out",
        "add_spin",
        "pay",
        "lever",
        "occupations.kdr",
        "occ_name:",
        "occ_title:",
        "occ_desc:",
        "occ_trait:",
        "occ_locked:",
        "starting_loadouts.kdr",
        "loadout_name:",
        "loadout_title:",
        "loadout_desc:",
        "loadout_items:",
        "loadout_start:",
        "Driver",
        "wait_for_save",
        "demo_text",
        "intro_text",
        "Start your Journey",
        "Pick your Portrait",
        "Portrait",
        "survey",
        "Fill the survey",
        "Background",
        "Choose your car",
        "Car",
        "summary",
        "Summary",
        "easy",
        "Good!",
        "Very good relationship with your parents.\nStarting Cash: 200",
        "Alright",
        "Alright relationship with your parents.\nStarting Cash: 100",
        "hard",
        "None",
        "No relationship with your parents.\nStarting Cash: 100",
        "AA_SS_PV_KD 559012",
        "2001",
        "Copyright YCJY Games AB, KDC",
        "1) What's your name?",
        "2) Relationship with your parents:",
        "Very Bad",
        "Very Good",
        "(A good relationship with your parents will help you in a pinch!)",
        "3) What's your occupation?",
        "veteran",
        "worker",
        "mourning",
        "veteran_start_trait",
        "4) What are you bringing with you?",
        "prison_stuff",
        "music_lover",
        "art_stuff",
        "camping_gear",
        "Sedan",
        "1981",
        "4 passenger seats, Average trunk, average engine",
        "Truck",
        "1988",
        "2 passenger seats, Big trunk, average engine",
        "Muscle",
        "1970",
        "3 passenger seats, Small trunk, good engine",
        "Keep previous upgrades",
        "1. Name: ",
        "2. Parent rel.: ",
        "3. Occupation:\n   ",
        "4. Packing:\n   ",
        "5. Car: ",
        "name",
        "relationship",
        "loadout",
        "cc",
        "RESTRICTED CAR",
        "Only the SEDAN car is available in the demo",
        "This car is not unlocked",
        "sfx_cc_cat_select",
        "lb",
        "rb",
        "difficulty",
        "only_A",
        "only_B",
        "sfx_scribble",
        "/5",
        "unemployed",
        "car_enthusiast",
        "intern",
        "Starting trait:",
        "Packing list:",
        "1x ",
        "DONE",
        "scroll",
        "[spr_credits_title,0]\r\n\r\nGame by [spr_credits_ycjy]\r\n\r\nArt by Josef Martinovsky\r\nProgramming by Christopher Andreasson\r\n\r\nSound design by Vile Hartman of Sonigon\r\n\r\n[spr_ui_menu_music_display_cd] Music by:\r\nWestkust\r\nMundane\r\nThe Honeydrips\r\nFucking Werewolf Asso\r\nCrystal Boys\r\nDorena\r\nAasma\r\nZimmer Grandioso\r\nJosef Martinovsky\r\nMy Darling YOU!\r\nMakthaverskan\r\nHoly Now\r\nEl Huervo\r\n\r\nMusic coordinator\r\nKarl Robb Kaardal\r\n\r\nFunded by\r\n\r\n[spr_titlescreen_kowloon_ca]\r\n\r\n&\r\n\r\n[spr_titlescreen_creativeeurope,1]\r\n\r\nQA by Olle Tibblin\r\n\r\nAdditional character animations by Dennis Wedin\r\n\r\nTesters:\r\nOlle Tibblin\r\nJP \"SpicySkink\" Nault\r\nRuby Van Wyck\r\nGabriel A\r\nDiqo Rizalvi Adnani\r\n\r\nCover art by Esteban Sanchez\r\n\r\nTools:\r\nGame made with\r\n[spr_titlescreen_game_maker_test]\r\nScribble by Juju Adams\r\n\r\nInput by Juju Adams, Alynne Keith, and friends\r\n\r\nPR:\r\n[spr_titlescreen_ff_test,0]\r\n\r\nStore Page Localization by \r\nWarlocs\r\n\r\nThanks to:\r\nDennis Wedin\r\nJonatan Söderström\r\nBenjamin Söderström\r\nNiklas Åkerblad\r\nFelix Grennard\r\nPontus Ullbors\r\nPatrik Sellin\r\nSanny Syberfeldt\r\nClaudia Sng Jia Xin\r\nAnlu Liu\r\nAlexis Garavaryan\r\nKris Wingfield-Bennett\r\nRussel Kay\r\n\r\nSpecial Thanks:\r\nFrida Ejvegård\r\nCarolina Martinsson\r\nMaja\r\n&\r\n[spr_credits_robb]\r\n\r\n",
        "fnt_introspection_text",
        "[fa_center][fa_top]",
        "Thanks for playing",
        "armor_desc_title",
        "armor_desc",
        "Cool display!",
        "00:00",
        "Holy Now",
        "Wake Up",
        "[spr_text_road]",
        "---",
        "[spr_text_weather]",
        "gp_title",
        "gp_event",
        "gp_normal",
        "bp_title",
        "bp_desc",
        "pixel_size",
        "glow_col",
        "c_dashboard_o",
        "c_dashboard_glow_o",
        "[spr_text_weather_rain]",
        "[spr_text_weather_heat]",
        "[spr_text_weather_fog]",
        "haveago_wait",
        "relax_wait",
        "rt",
        "rev_pedal_start",
        "lt",
        "selecting",
        "rev_pedal_stop",
        "tween_in",
        "fnt_dashboard_mid",
        "[fa_left][fa_top][spr_text_music_note]",
        "[spr_text_music_note]",
        "definitions.kdr",
        "dev_name:",
        "all_mask",
        "School lingers in your memory as a faded obstacle",
        "intro2",
        " you fumbled your way through.",
        "intro3",
        "With no real plans for the summer you decide to head over ",
        "to an old friend's house to play some video games.",
        "intro4",
        "You borrow your family car and head out for the weekend.",
        "intro5",
        "It's Thursday, the 3rd of May...",
        "intro6",
        "You have until the end of Sunday to get to your friend's house",
        "Don't forget to bring your favourite game",
        "step_start",
        "clear_arrows",
        "tween_in_message",
        "step_end",
        "step_wait",
        "spawn",
        "col",
        "line_a",
        "line_b",
        "[fa_left][fa_bottom]",
        " [c_white_text]",
        " [spr_gp_icon_face1_filled,0]",
        "car_menu_tutorial",
        "Destination",
        "choosing",
        "gas_test",
        "phone_test",
        "bar_test",
        "check_test",
        "go_to_sleep",
        "no_energy_dest",
        "work_station",
        "Work",
        "work_new",
        "dest_option_work_desc",
        "dest_option_work_title",
        "work_city",
        "work_forest",
        "work_desert",
        "Bar",
        "bar,!non_shop",
        "dest_option_bar_desc",
        "dest_option_bar_title",
        "Mechanic",
        "mechanic,wheels,spray,garage,!non_shop",
        "dest_option_garage_desc",
        "dest_option_garage_title",
        "mechanic_city",
        "mechanic_forest",
        "mechanic_forest_race",
        "mechanic_desert",
        "shop_grocery",
        "super_market,fruit,vegetable,!non_shop",
        "Grocery Store",
        "dest_option_shop_desc",
        "dest_option_shop_title",
        "shop_grocery_city",
        "shop_grocery_forest",
        "shop_grocery_desert",
        "shop_corner_store_city",
        "fruit_stand",
        "fruit,vegetable,!non_shop",
        "Fruit Stand",
        "honey_stand",
        "honey,!non_shop",
        "thrift,!non_shop",
        "Thrift Store",
        "awdawd",
        "dest_option_thrift_shop_desc",
        "dest_option_thrift_shop_title",
        "shop_thrift_desert",
        "Gas",
        "dest_option_gas_desc",
        "dest_option_gas_title",
        "Hostel",
        "dest_option_hostel_desc",
        "dest_option_hostel_title",
        "hotel",
        "hotel_forest",
        "hotel_desert",
        "desert_motel",
        "shop_fruit_stand",
        "shop_gas",
        "gas_station,!non_shop",
        "Gas Station Store",
        "mechanic,car_part_shop,!non_shop",
        "Mechanic Store",
        "dest_option_part_shop_desc",
        "dest_option_part_shop_title",
        "car_part_shop_forest",
        "car_part_shop_desert",
        "gas_town_country_side_stop",
        "gas_shop_town_country_side_stop",
        "gas_town_country",
        "gas_shop_town_country",
        "gas_city",
        "gas_shop_city",
        "gas_forest",
        "gas_desert",
        "gas_shop_desert",
        "Cafe",
        "cafe,!non_shop",
        "dest_option_cafe_desc",
        "dest_option_cafe_title",
        "explore_forest",
        "Forest Trail",
        "dest_option_explore_desc",
        "dest_option_explore_title",
        "Back Alleys",
        "shop_thrift_city",
        "Exit Sign",
        "mechanic,car_upgrade,!non_shop",
        "Junk Yard",
        "dest_option_junkyard_desc",
        "dest_option_junkyard_title",
        "Camp Fire",
        "dest_option_campsite_desc",
        "dest_option_campsite_title",
        "Camping Grounds",
        "ruins",
        "Ruins",
        "utility,!non_shop",
        "Casino",
        "dest_option_culture_desc",
        "dest_option_culture_title",
        "church",
        "Church",
        "church_forest",
        "Graveyard",
        "grave",
        "Light House",
        "friends_house",
        "Friend's Home",
        "Party Cabin",
        "Tourist Center",
        "Mountain Flag",
        "mountain_rock",
        "ROCK",
        "mountain_rock_stack_1",
        "mountain_rock_stack_2",
        "mountain_sign",
        "post",
        "race_give_pamphlet",
        "race_post_car",
        "race_potty",
        "race_ambulance",
        "race_commercial",
        "race_end_fence_a",
        "race_end_fence_b",
        "race_goal",
        "hospital_old",
        "festival_truck_early",
        "festival_fence_posters",
        "festival_fence_posters_2",
        "festival_white_tent",
        "festival_merch_tent",
        "festival_porta_potty",
        "festival_beer_tent",
        "festival_reading",
        "festival_guitar",
        "festival_couples_tent",
        "festival_tent_nothing_1",
        "festival_tent_nothing_2",
        "festival_ice_cream",
        "festival_semitruck_1",
        "festival_semitruck_2",
        "Sleep",
        "Shop",
        "Garage",
        "Cafe/Pub",
        "dest_option_cafe_bar_desc",
        "dest_option_cafe_bar_title",
        "misc",
        "dest_option_home_desc",
        "dest_option_home_title",
        "Goal",
        "culture",
        "Culture",
        "Car Shop",
        "Thrift",
        "Junkyard",
        "Campsite",
        "Hometown",
        "secondi",
        "rural_1",
        "rural_2",
        "city_small_1",
        "city_small_2",
        "city_small_4",
        "forest_1",
        "forest_2",
        "forest_3",
        "forest_4",
        "forest_5",
        "mountain_1",
        "mountain_2",
        "desert_1",
        "desert_2",
        "desert_3",
        "city_south",
        "friends_home",
        "Gas Station",
        "motel",
        "Roadside Motel",
        "fruit_market",
        "Fruit Market",
        "Roadside Garage",
        "gas_station_2",
        "Super Market",
        "bg_7_tc_building",
        "bg_7_city_building",
        "bg_7_desert_building",
        "city_small,city",
        "bg_7_tc_b_prop",
        "dialogue.kdr",
        "id:",
        "hey text yo",
        "fnt_dialogue",
        "item:letter_race",
        "race_enter_done",
        "q_demo_turn_in_greeting",
        "demo_ending",
        "rehab_ending",
        "Hello. Welcome to Keep Driving.",
        "Please enjoy!\n//Christopher & Josef",
        "\n\n\n\n\n\n-Press any key to continue-",
        "\n\n\n\n\n\n-Press any button to continue-",
        "pedals",
        "gearbox",
        "speed:",
        "Drove for ",
        "HEYA",
        "sfx_stamp_hover_on",
        "sfx_stamp_hover_off",
        "endings.kdr",
        "title:",
        "unlock:",
        "demo:",
        "music:",
        "You unlocked something",
        "Thanks for playing the Keep Driving Demo",
        "text_fade_in",
        "title_fade",
        "title_idle",
        "main_menu_fade",
        "demo_end_fade_in",
        "demo_end_wait",
        "https://store.steampowered.com/app/2756920/Keep_Driving/",
        "https://docs.google.com/forms/d/e/1FAIpQLSdzLF9k_BY-GHB5u-waI6l0UEEPylK6Teds3pqFqrVuIFfmXw/viewform",
        "events.kdr",
        "event_name:",
        "event_type:",
        "event_title:",
        "event_text:",
        "tags:",
        " tags",
        "option:",
        "option_type:",
        "(close_option)",
        "noption type: ",
        "option_req:",
        "option_cost:",
        "option_reward:",
        "option_win:",
        "option_lose:",
        "gas_testie",
        "skill_unlock",
        "pskill_unlock",
        "Event",
        "something happened",
        "no reward",
        "Details:",
        "not_enough",
        "no_stats",
        "no_money",
        "Requirements:",
        "Cost:",
        "Gas:",
        "exploration.kdr",
        "ep_type:",
        "ep_env:",
        "key_item:",
        "ep_reward_item:",
        "sprite:",
        "text_fail:",
        "text_success:",
        "solution:",
        "solution_text:",
        "solution_consume:",
        "dimensions",
        "You found an item. Return to starting position to claim it.",
        "You claimed the items you're carrying. Receive all claimed item when you exit exploration.",
        "sfx_exp_city_step",
        "sfx_exp_forest_step",
        "huh",
        "city_kid",
        "punk_club_done",
        "Out of Energy!",
        "You are too tired to keep exploring",
        "fly_in",
        "sfx_falcon_wing",
        "hh_suit_festival",
        "hh_convict_festival",
        "hh_kid_festival",
        "hh_songwriter_festival",
        "hh_bride_festival",
        "hh_punk_festival",
        "hh_hiker_festival",
        "hh_mechanic_festival",
        "hh_stranger_festival",
        "hh_girl_festival",
        "hh_idiot_festival",
        "1.2.0.0e",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789",
        "0123456789",
        "mirror_mask",
        "Welcome to the Garage!",
        "intro_clear",
        "You can install upgrades and customize your car here.",
        "It's also the place to repair your car.",
        "Press [spr_gp_icon_lb,0] and [spr_gp_icon_rb,0] to switch tabs.",
        "repair",
        "repair_small",
        "repair_full",
        "Repair car",
        "Do you want to repair part of your car for $",
        "Do you want to fully repaircar for $",
        "yes",
        "no",
        " $",
        "seat",
        "Do you want to purchase this upgrade for $",
        "seats_occupied",
        "Cost: ",
        "[Full Repair]",
        "[Budget Repair]",
        "-Replace oxygen sensors",
        "-Ignition Coils",
        "-Replace catalytic converter",
        "-Fix left phalange",
        "-Replace spark plugs",
        "-Patch tires",
        "-Fix manifold gaskets",
        "-Coolant system repairs",
        "-Ignition system fixes",
        "-Electrical system fixes",
        "-Mass air flow sensors",
        "-Shenanigans",
        "-Mechanic fun times",
        "-Loose fuel caps",
        "-General fix-up",
        "-Fuel mixture tuning",
        "-Tire kicking",
        "-Coffee break",
        "-Emission control",
        "-Rust removal",
        "-Clean EGR valve",
        "-Shaming customers",
        "-Tire depth control",
        "Choose type of service:",
        "Not available",
        "Car's already in good enough condition. Full repair only",
        "between",
        "garage_store",
        "writing",
        "Full Repair",
        "Fully repair car for ",
        " cash.",
        "full_repair",
        "Durability max",
        "No need for repairs!",
        "Budget Repair",
        "Repair ",
        " durability for ",
        "budget_repair",
        "dark",
        "garage_drag_tooltip",
        "upg",
        "garage_extra_space_fail_title",
        "garage_extra_space_fail",
        "[spr_gp_icon_face1,0]/[spr_gp_icon_face3,0]: Pick up.",
        "[spr_gp_icon_face1,0]/[spr_gp_icon_face3,0]: Install.",
        "[spr_gp_icon_face1,0]/[spr_gp_icon_face3,0]: Select.",
        "fuel_pump_title",
        "fuel_pump_desc",
        "fuel_pump_refill_desc",
        "fuel_accept_title",
        "fuel_accept_desc",
        "fuel_reset_title",
        "fuel_reset_desc",
        "fuel_refill_title",
        "fuel_refill_desc",
        "refill",
        "nay",
        "pump",
        "gas_payer",
        "gas_tank_empty",
        "gas_tank_low",
        "gas_tank_half",
        "gas_tank_big",
        "gas_pedal_mask",
        "gas_pedal_arrow",
        "gas_pedal_message_a",
        "You can escape from events by holding down the [#E4ACF1]GAS PEDAL[/color].",
        "You can escape from events by holding down [spr_gp_icon_rt,0].",
        "gas_pedal_message_b",
        "Before escaping, each [#46B283]THREAT[/color] will damage you.",
        "glovebox_mask",
        "glovebox_arrow",
        "glovebox_message",
        "This is your glovebox. You can place small items here.",
        "Some items can be [#E4ACF1]USED JUST LIKE SKILLS[/color] during road events!",
        "dpad_down",
        "dpad_up",
        "[spr_gp_icon_face1,0]: Use.",
        "dorena01",
        "nah",
        "threat_arrow_b",
        "You can click on the portraits of your passengers\nto see their skills.",
        "Press [spr_gp_icon_lb,0] and [spr_gp_icon_rb,0] to see your passengers' skills.",
        "tick",
        "female",
        "creepy",
        "sfx_volvo_door_open",
        "Pick a topic:",
        "n/a",
        "passive_skill_info",
        "hitchhikers.kdr",
        "steve",
        "Steve\nTest",
        "Mechanic that gives backrubs, whether you want them or not.",
        "hh_default_hitch",
        "impression_1",
        "impression_2",
        "impression_3",
        "hh_name:",
        "desc:",
        "sex:",
        "occupation:",
        "age:",
        "start_skill:",
        "sprite_portrait:",
        "sprite_rw_big:",
        "sprite_rw_small:",
        "sprite_menu_portrait:",
        "sprite_button:",
        "sleep_sprite_full:",
        "sleep_sprite_small:",
        "sprite_idle:",
        "sprite_hitch:",
        "sprite_car:",
        "sprite_kicked:",
        "perk_id:",
        "perk_name:",
        "perk_type:",
        "perk_dia:",
        "greeting_dia:",
        "hitch_dialogue:",
        "talk_dialogue:",
        "talk_dialogue_quest:",
        "impression:",
        "pick_up_quest:",
        "perk_end",
        "failed full sprite for hh: ",
        "failed small sprite for hh: ",
        "standby",
        "John Malkovich",
        "Information about this hitchhiker and the skill in particular.",
        "Hitchhiker",
        "Hold and drag to a seat in your inventory.",
        "perk name not found",
        "perk_desc_not_found",
        "perk",
        "Kick Hitchhiker",
        "Do you really want to kick ",
        "kick_hh",
        "punk: ",
        "convict: ",
        "seat_found: ",
        "seat_active: ",
        "adjacent_blocked: ",
        "item:songwriter_guitar",
        "No room!",
        "You will need and extra space for the hitchhiker's dog!",
        "II",
        "III",
        "Picking up Hitchhikers",
        "Open your trunk and drag the Hitchhiker's portrait to an empty seat.",
        "[PICK UP]",
        "[LEAVE]",
        "Trait: ",
        "Stop for Hitchhiker",
        "Keep Driving",
        "rehab_first",
        "dialogue_wait",
        "outro",
        "hostel_morning_title",
        "hostel_night_title",
        "hostel_general_desc",
        "addItem",
        "incRoadLevel",
        "setRoadLevel",
        "addAilment",
        "makeCoffeeCold",
        "addHH",
        "weatherSet",
        "addTrait",
        "createEnding",
        "addSkillTree",
        "addIS",
        "addQuest",
        " [spr_gp_icon_face1,0] GP_CONTROLS HERE [spr_gp_icon_face3,0] [spr_gp_icon_face2,0]",
        "[spr_gp_icon_rt,0]: Switch",
        "[spr_gp_icon_lt,0]: Switch",
        "KeepDrivingSCreenshot",
        "initialised",
        "stats ready",
        "ACH_EXTRA_ALLMUSIC",
        "legend",
        "event_type",
        "pad_index",
        "gamepad discovered",
        "Gamepad connected: ",
        "Gamepad disconnected: ",
        "DZ_mode: ",
        "mx: ",
        "\nmy: ",
        "> ",
        "The summer sprawls out before you as you're about to go on your first big road trip alone.",
        "It's the early 2000s, you've recently got your license.",
        "You're young, take it easy, you have time...",
        "The summer stretches out before your memory, as you try to relive your big trip.",
        "It was the early 2000s, right?",
        "You had your license for a while but hadn't decided on a car yet.",
        "You're young, for what it's worth, you have time...",
        "You knew the ropes, you'd done this before - at least once before.",
        "Yet, the butterflies in your stomach still fluttered...",
        "...as the nurse arranged a convoy of red pills on the road map.",
        "You're young, you mutter, you have time...",
        "The memory invites you out again.",
        "It feels like nothing has changed.",
        "You're still looking for more.",
        "You were young, this life was yours, you had time...",
        "tween_in_text",
        "text_linger",
        "introspections.kdr",
        "weight:",
        "choice:",
        "reward:",
        "resolution:",
        "Introspection",
        "This is an introspection event. Make a good choice!",
        "a) Listen to your inner voice",
        "b) Try to ignore everything",
        "Things turned out great!",
        "introspection_close_text",
        "introspection_close_text_gp",
        "introspection_clouds",
        "alpha_tex",
        "invert",
        "max_alpha",
        "pixelWH",
        "fade_out_text",
        "resolution",
        "fade_in_resolution",
        "use",
        "rotate",
        "Rotate",
        "discard",
        "Discard",
        "Install",
        "pixelW",
        "pixelH",
        "Visit a garage to install car-upgrades",
        "garage_view_tooltip",
        "hh_inv_drag_desc",
        "move",
        "Move",
        "Read",
        "Refill",
        "Play",
        "alpha_max",
        "roof_box",
        "gum",
        "chocolate",
        "Abandon hithchiker?",
        "leave_hh",
        "Don't throw this letter!",
        "upgrade_anywhere",
        "car_jack",
        "gas_refillable",
        "quest_give",
        "baguette",
        "baguette_half",
        "watermelon",
        "watermelon_half",
        "Don't Read and Drive",
        "Can't read books while driving",
        "Got it",
        "Already got this music",
        "amp",
        "pedal_board",
        "Discard ",
        "Do you really want to discard ",
        "discard_item",
        "inventory_seat_hover",
        "inventory_seat_hover_desc",
        "inventory_seat_hover_desc_gp",
        "inventory_seat_hover_lowered",
        "inventory_seat_hover_desc_lowered",
        "inventory_seat_hover_desc_lowered_gp",
        "demo_game_over_video_game",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face3,0]: Pick up.",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face3,0]: Pick up. [spr_gp_icon_face4,0]: Sell.",
        "[spr_gp_icon_face1,0]: Buy.",
        "[spr_gp_icon_face1,0]: Move to trunk.",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face3,0]: Pick up. [spr_gp_icon_face4,0]: Move to trunk.",
        "[spr_gp_icon_face1,0]: Open Hitchhiker Menu",
        "[spr_gp_icon_face3,0]: Lower Seat.",
        "[spr_gp_icon_face3,0]: Raise Seat.",
        "[spr_gp_icon_face1,0]: Check Hitchhiker. [spr_gp_icon_face3,0]: Move",
        "[spr_gp_icon_face1,0]/[spr_gp_icon_face3,0]: Drop. [spr_gp_icon_face2,0]: Back.",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face2,0]: Back.",
        "[spr_gp_icon_face1,0]/[spr_gp_icon_face3,0]: Drop. [spr_gp_icon_rb,0]: Rotate.",
        "mode: ",
        "Click and drag items from your home into your trunk",
        "Use [spr_gp_icon_ls,0] or [spr_gp_icon_dpad,0] to select an item.",
        "You can also shift-click items to move them instantly",
        "Press [spr_gp_icon_face1,0] to move selected item to your trunk",
        "Press [spr_gp_icon_lt,0] or [spr_gp_icon_rt,0] to switch window.",
        "items.kdr",
        "added item: ",
        "item_type:",
        "cons_stat:",
        "cons_amount:",
        "cons_cure:",
        "cons_buff:",
        "pattern:",
        "§st",
        "§cure",
        "price:",
        "max_shop_amount:",
        "min_shop_amount:",
        "charges:",
        "w:",
        "h:",
        "sound:",
        "bonus_req:",
        "bonus_type:",
        "bonus_stat:",
        "bonus_amount:",
        "bonus_cure:",
        "bonus_buff:",
        "bonus_text:",
        "§bst",
        "§bamnt",
        "music_group:",
        "\n[#7DB29B]-Spend some time reading. When the book is finished you might feel something-[/color]",
        "Right-click an item in your trunk to use it.",
        "Select an item with [spr_gp_icon_ls,0] or [spr_gp_icon_dpad,0] and press [spr_gp_icon_face1,0] to use it.",
        "whole_journal",
        "This is your Journal",
        "These are your [#E4ACF1]EQUIPPED SKILLS[/color]",
        "loadout_mask",
        "This is your [#E4ACF1]SKILL LOADOUT[/color]",
        "dragging",
        "You can drag [#E4ACF1]SKILLS[/color] from your [#E4ACF1]LOADOUT[/color] up to your skill bar",
        "You can move [#E4ACF1]SKILLS[/color] from your [#E4ACF1]LOADOUT[/color] up to your skill bar",
        "Likewise, you can drag [#E4ACF1]SKILLS[/color] down to your [#E4ACF1]LOADOUT[/color] to unequip them.",
        "Pick up an unlocked or equipped skill by pressing [spr_gp_icon_face3,0].",
        "lock_mask",
        "Unlock new [#E4ACF1]SKILLS[/color] by clicking and holding on them.",
        "Unlock new [#E4ACF1]SKILLS[/color] by selecting them and holding down [spr_gp_icon_face1,0].",
        "You can right-click [#E4ACF1]SKILLS[/color] to see more info about them.",
        "You can press [spr_gp_icon_face4,0] to see more info about each skill.",
        "You'll need skill points to unlock skills.",
        "Gain skill points by completing roads.",
        "Here you can check your TRAITS.",
        "TRAITS are passive skills that you will gain during your journey.",
        "You can't change skills while on the road",
        "time",
        "distort_tex",
        "ol_col",
        "[Skills]",
        "[Traits]",
        "[<]",
        "[>]",
        "Traits",
        "locked_skill_hover",
        "owned_skill_hover",
        "unavailable_skill_hover",
        "locked_skill_hover_gp",
        "owned_skill_hover_gp",
        "unavailable_skill_hover_gp",
        "in_book",
        "sfx_journal_tab",
        "journal_learn_skill_title",
        "journal_not_enough_skill_points",
        "[spr_gp_icon_face3,0]: Pick up. [spr_gp_icon_face4,0]: Skill Info.",
        "[spr_gp_icon_face1,0]/[spr_gp_icon_face3,0]: Equip. [spr_gp_icon_face4,0]: Unequip.",
        "[spr_gp_icon_face4,0]: Skill Info.",
        "[spr_gp_icon_face1,0]: Select Tab.",
        "[spr_gp_icon_face1,0]: Hold to unlock. [spr_gp_icon_face4,0]: Skill Info.",
        "[spr_gp_icon_ls,0]/[spr_gp_icon_rs,0]: Scroll.",
        "equip",
        "Parts:",
        "Plenty",
        "Average",
        "Sparse",
        "Salvage",
        "junkyard_car",
        "junkyard_rust",
        "cartoon_mechanic",
        "Success!\nCollect salvaged items by closing this menu",
        "Failure!",
        "Can't carry any more parts",
        "Not enough energy",
        "[spr_gp_icon_ls,0]: Move. [spr_gp_icon_face1,0]: Inspect.",
        "[spr_gp_icon_face1,0]: Salvage. [spr_gp_icon_face2,0]: Back.",
        "[spr_gp_icon_face1,0]: Salvage.",
        "time_2",
        "real_time",
        "unfold_1",
        "fold_2",
        "Leave now",
        "Do you want to leave immediately?",
        "leave_now",
        "nature",
        "remembering nature",
        "start_dests",
        "remembering home",
        "mountain_path",
        "remembering mountain path",
        "main_paths",
        "remembering main_paths",
        "new_roads1",
        "remembering roads",
        "random_dests",
        "remembering destinations",
        "remembering special places",
        "new_roads2",
        "remembering more roads",
        "finalize",
        "finalizing",
        "generating random_dests: ",
        "done generating random dests",
        "mountain_gradient",
        "offset",
        "lake_tex",
        "mountain_col",
        "forest_col",
        "desert_col",
        "dot_tex",
        "city_col",
        "water_col",
        "water_ol_col",
        "water_il_col",
        "No road selected",
        "ETA: ",
        "-ROAD TYPES-",
        "Country",
        "Motorway",
        "Rough",
        "City",
        "road_type_desc_country",
        "road_type_desc_motorway",
        "road_type_desc_rough",
        "road_type_desc_city",
        "-LEGEND-",
        "Destination:\nnot selected",
        "not selected",
        "Destination:\n",
        "Exit",
        "Test Quest",
        "Center Map",
        "Center map around your current location",
        "Calendar",
        "Open calendar",
        "map_eye_icon_title",
        "map_eye_icon_text",
        "right_left",
        "right_right",
        "Festival starts on June 28th",
        "[[ ",
        " ]",
        "[spr_gp_icon_ls,0]: Move cursor. [spr_gp_icon_rs,0]: Move view. [spr_gp_icon_lb,0]/[spr_gp_icon_rb,0]: Legend.",
        "[spr_gp_icon_face1,0]: Select destination.",
        "[spr_gp_icon_face1,0]: Toggle icon. [spr_gp_icon_face2,0]/[spr_gp_icon_lb,0]/[spr_gp_icon_rb,0]: Exit legend.",
        "memories.kdr",
        "memory_name:",
        "memory_text:",
        "menus.kdr",
        "ignore_def:",
        "You've unlocked a new car: Truck",
        "You've unlocked a new car: Muscle",
        "anomalies",
        "Unlocked anomalies!",
        "Unlocked new starting loadout (Camping gear)!",
        "Unlocked new start trait: Veteran!",
        "Unlocked all endings!",
        "Unlocked a new starting loadout! (Shady things)",
        "Unlocked new starting trait: Rehabilitated",
        "vistas",
        "Introspective vistas will now appear in the world",
        "Unlocked new starting trait: Racer",
        "More advanced events will appear earlier now.",
        "Unlocked new start trait: Worker!",
        "Unlocked a new starting loadout! (Festival Kit)",
        "Unlocked a new starting loadout! (Art Supplies)",
        "Unlocked new start trait: Downer!",
        "Unlocked new start trait: Daydreamer!",
        " added to music library.",
        "id",
        "status",
        "read string from buffer ",
        "Use the [#E4ACF1]LEFT[/color] or [#E4ACF1]RIGHT[/color] arrow keys or the [#E4ACF1]'A'[/color] and [#E4ACF1]'D'[/color] keys\n to move the car around",
        "arrow keys",
        "You can also hold [#E4ACF1]RIGHT MOUSE BUTTON[/color] to drag your car around",
        "---- - ----",
        "music.kdr",
        "artist:",
        "track:",
        "start:",
        "streamer_ban:",
        "zimmer01",
        "zimmer02",
        "zimmer03",
        "zimmer04",
        "zimmer05",
        "zimmer06",
        "mundane01",
        "mundane04",
        "mundane05",
        "makthaverskan01",
        "makthaverskan02",
        "makthaverskan03",
        "makthaverskan04",
        "makthaverskan05",
        "makthaverskan06",
        "honeydrips_1",
        "honeydrips01",
        "honeydrips_2",
        "honeydrips04",
        "honeydrips_3",
        "honeydrips05",
        "honeydrips_bright",
        "honeydrips02",
        "honeydrips03",
        "holy_now_1",
        "holy_now_d_1",
        "holy_now_2",
        "holy_now_d_2",
        "holy_now_3",
        "holy_now_d_3",
        "aasma",
        "aasma_0",
        "werewolf01",
        "werewolf02",
        "werewolf03",
        "fwa_single_1",
        "werewolf_single_1",
        "fwa_single_2",
        "werewolf_single_2",
        "fwa_single_3",
        "werewolf_single_3",
        "fwa_single_4",
        "werewolf_single_4",
        "dorena",
        "kid_feral",
        "kid_feral01",
        "sw_01",
        "sw_02",
        "sw_03",
        "mdy_04",
        "mdy_m_02",
        "mdy_m_03",
        "mdy_m_05",
        "mdy_02",
        "mdy_m_04",
        "mdy_05",
        "mdy_01",
        "my_darling_you",
        "mdy_m_01",
        "mdy_03",
        "holy_now_wake_up",
        "holynow1",
        "mundane_single_1",
        "mundane02",
        "mundane_single_2",
        "mundane03",
        "el_huervo_five",
        "el_huervo_recluse",
        "MAKE YOUR PLAYLIST",
        "Tracks added: ",
        "mm_edit_mode_title",
        "mm_edit_mode",
        "mm_cd_title",
        "mm_cd",
        "tween_to_cd",
        "cd_tween_out",
        "tween_to_player",
        "[spr_gp_icon_face1,0]: Select.",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face4,0]: Done. [spr_gp_icon_face3,0]: Shuffle. [spr_gp_icon_rs,0]: Scroll.",
        " / ",
        "loading...",
        "NEW   MUSIC   UNLOCKED!   ",
        "ZIMMER GRANDIOSO",
        "Famous Chinese Short Stories",
        "Dog in the Sun",
        "Cowboy Pills",
        "Ive Been Wasting All My Good Years",
        "Hometowns",
        "You've got some skill points!",
        "Don't forget to open your journal to learn new skills.",
        "You can access your journal from your CAR MENU",
        "Oh, and if you're out of skill uses, you should probably rest.",
        "SETTINGS",
        "OPTIONS",
        "resume",
        "RESUME",
        "EXIT TO MENU",
        "desktop",
        "EXIT TO DESKTOP",
        "CLOSE",
        "CREDITS",
        "reset_tutorials",
        "RESET TUTORIALS",
        "AUDIO",
        "MASTER",
        "SOUND",
        "video",
        "VIDEO",
        "STREAMER MODE",
        "ON",
        "OFF",
        "FULL SCREEN",
        "BORDERLESS",
        "CAMERA FILTER",
        "keys",
        "KEY BINDINGS",
        "controller",
        "CONTROLLER:",
        "KEYBOARD+MOUSE",
        "GAMEPAD",
        "language",
        "LANGUAGE",
        "english",
        "ENGLISH",
        "more",
        "MORE COMING",
        "Activating streamer mode removes a bunch of REALLY good music from the game.",
        "intensity",
        "base_intensity",
        "intensity_line",
        "Reset Tutorials",
        "Reset tutorials? You'll have to start a new game for this to take effect",
        "Passive effect!",
        "This shows up and tells you that the effect has activated!",
        "intro_done",
        "suit_male",
        "suit_female",
        "trash_posh",
        "backpack_teen",
        "old_lady",
        "old_man",
        "runner",
        "cool_guy",
        "jacket_dude",
        "jacket_girl",
        "soccer_mom",
        "baggy_man",
        "bag_girl",
        "hiphop_dude",
        "twin",
        "sales_man",
        "freezing_girl",
        "freezing_man",
        "blonde_guy",
        "Owen",
        "blonde_guy_1",
        "blonde_guy_ignore",
        "blonde_guy_thank_1",
        "doom_diver",
        "Crazy Person",
        "doom_diver_1",
        "Camera Girl",
        "gave_zimmer_cd",
        "Journal Girl",
        "item:festival_ticket",
        "journal_girl_1",
        "forced_city",
        "festival_ticket_vendor_greeting",
        "festival_ticket_vendor_done",
        "dennis_forest",
        "Dennis",
        "dennis_greeting",
        "dennis_done",
        "dennis_city",
        "Friend",
        "demo_journal_girl_greeting",
        "demo_journal_girl_done",
        "demo_hobo",
        "Hobo",
        "demo_pillow_man_greeting",
        "demo_pillow_man_done",
        "sign_guy_sock",
        "Sign Guy",
        "sign_guy",
        "upgrade_merchant",
        "Scrap Merchant",
        "car_upgrade",
        "street_peddler_greeting",
        "hobo_1",
        "Homeless man",
        "tag:hobo_greeting",
        "hobo_ignore_1",
        "hobo_thank_1",
        "hobo_done_1",
        "Old Lady",
        "city, city_small",
        "tag:old_lady",
        "tag:dennis",
        "business_man_1",
        "Mr. Jonson",
        "business_man_1_greeting",
        "business_man_1_reject",
        "money:3",
        "dirty:1",
        "lumberjack_1",
        "Lumberjack",
        "lumberjack_1_greeting",
        "lumberjack_1_thanks",
        "lumberjack_1_done",
        "drug_dealer_1",
        "Shady Guy",
        "drug_dealer,grafitti",
        "drug_dealer_1_greeting",
        "drug_dealer_1_reject",
        "Quest Man",
        "quest_turn_in_greeting",
        "quest_turn_in_reject",
        "quest_turn_in_done",
        "rehab_man",
        "Rehab Employee",
        "Puke_guy",
        "party_puke_guy",
        "hot_tub",
        "party_hot_tub",
        "Race Man",
        "race_enter_fail",
        "ending_man",
        "Ending Man",
        "Grandma",
        "grandma_done",
        "Dr Williams",
        "rehab_start",
        "Junkie",
        "rehab_junkie",
        "rehab_junkie_start",
        "old_friends",
        "Old Friends",
        "tag:old_friends",
        "perform",
        "generous",
        "hobo_thanks",
        "hobo_poor",
        "hobo_rejected",
        "police_ending",
        "intro_linger",
        "mugshot_show",
        "mugshot",
        "mugshot_linger",
        "mugshot_done",
        "warning!",
        "prompty prompty promptely prompt!",
        "[Close]",
        "Yes",
        "No",
        "[Yes]",
        "[No]",
        "quest_board_random",
        "TITLE",
        "IL FORASTERA",
        "location",
        "south ",
        "\n\nTime:\n  ",
        "\nRewards:\n",
        "[spr_gp_icon_face1,0]: Read. [spr_gp_icon_dpad,0]/[spr_gp_icon_ls,0]: Select note.",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face4,0]: Map.",
        "fnt_work_desc",
        "Quest complete!",
        "choose a new skill:",
        "quests.kdr",
        "Guy",
        "quest_complete_general",
        "quest_name:",
        "quest_title:",
        "quest_desc:",
        "quest_pc_desc:",
        "¤",
        "quest_type:",
        "quest_ending:",
        "quest_sprite:",
        "quest_pc_sprite:",
        "quest_start_month:",
        "quest_start_day:",
        "quest_end_month:",
        "quest_end_day:",
        "quest_days:",
        "quest_auto_complete:",
        "quest_skip_turn_in:",
        "custom_person:",
        "custom_person_name:",
        "custom_person_sprite:",
        "custom_person_sprite_done:",
        "custom_person_interact_x:",
        "dialogue_turn_in_greeting:",
        "dialogue_turn_in_reject:",
        "dialogue_turn_in_done:",
        "dialogue_turn_in_complete:",
        "obj:",
        "default_quest_objective",
        "nondescript",
        "QUEST GENERATED DEST",
        "obj_type:",
        "obj_item:",
        "obj_item_tag:",
        "obj_upgrade:",
        "obj_dest:",
        "obj_new_dest_x:",
        "obj_new_dest_y:",
        "obj_new_dest_name:",
        "obj_new_dest_id:",
        "obj_title:",
        "obj_inc_goal:",
        "obj_desc:",
        "quest_",
        "-clear this thing",
        "sfx_scribble_line",
        "IL YIOIYOIO",
        "Click and hold to open envelope",
        "Hold A to open envelope",
        "#fdfddc",
        "#abb8a2",
        "#f7dd6e",
        "[fa_left][fa_top][",
        "c_grey",
        "NEW JOURNEY",
        "rally_saab",
        "rally_240",
        "rally_corolla",
        "race_car",
        "GO!",
        "race_slow_start",
        "race_catching_up",
        "race_getting_ahead",
        "race_final_stretch",
        "race_road_people",
        "flash",
        "windy",
        "sky_change",
        "drip_drop",
        "You received:",
        "-click to close-",
        "The Road",
        "-Traits-",
        "tween",
        "pos",
        "prev_surf",
        "noise_tex",
        "darkness_col",
        "glitter_col",
        "light_col",
        "dark_light_col",
        "fox_tex",
        "thunder",
        "lut_tex",
        "lut_strength",
        "lut_tex_env",
        "lut_strength_env",
        "lut_tex_env_prev",
        "lut_strength_env_prev",
        "light_tex",
        "bg_tex",
        "shadow_tex",
        "shadow_x",
        "shadow_alpha",
        "intensity_tex",
        "intensity_time",
        "light_extra_contrast",
        "invert_alpha_mask",
        "pos2",
        "wave_pos",
        "rain1",
        "rain2",
        "rainwave1",
        "rainwave2",
        "night_tex",
        "full_force",
        "wind",
        "wind_strength",
        "wind_x",
        "uv_sides",
        "extra_z",
        "water_shift_RGB",
        "distort_strength",
        "pattern_size",
        "col_mix",
        "brt_sat_con",
        "blend_mode",
        "show_result",
        "stat_energy_title",
        "stat_energy_desc",
        "stat_money_title",
        "stat_money_desc",
        "stat_gas_title",
        "stat_gas_desc",
        "stat_durability_title",
        "stat_durability_desc",
        "mouse_car",
        "center_car",
        "car_menu",
        "dpad_left",
        "dpad_right",
        "car_menu_journal_option",
        "car_menu_journal_desc",
        "car_menu_calendar_option",
        "car_menu_calendar_desc",
        "car_menu_sleep_option",
        "car_menu_sleep_desc",
        "car_menu_sleep_desc_tent",
        "car_menu_sleep_desc_tent_rack",
        "car_menu_sleep_desc_camping",
        "Trunk",
        "Open trunk",
        "Music",
        "Open music menu",
        "Map",
        "Open map",
        "car_menu_tow_option",
        "car_menu_tow_desc",
        "car_menu_phone_option",
        "car_menu_phone_desc",
        "car_menu_phone_desc_warning",
        "car_menu_walk_option",
        "car_menu_walk_desc",
        "car_menu_black_ou_keep_driving_title",
        "car_menu_black_ou_keep_driving_desc",
        "car_menu_black_ou_keep_driving_dest_title",
        "car_menu_black_ou_keep_driving_dest_desc",
        "sfx_scraping_metal",
        "mountain_5",
        "industry_3_short_lived",
        "speed_sign",
        "warning_sign",
        "destination reached",
        "drive_mode",
        "look",
        "leaving",
        "Keep driving towards next ",
        "side_stop_slow_down",
        "stopping",
        "car_left",
        "car_right",
        "option name",
        "talk",
        "leave_dest_map_title",
        "leave_dest_map_desc",
        "leave_open_map",
        "sleeping",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_ls,0]: Radial selection. [spr_gp_icon_dpad_left_and_right,0]: Normal selection.",
        "road_env: ",
        "max_banters: ",
        "dest_pos: ",
        "dest_id: ",
        "road_part_speed: ",
        "rpm: ",
        "jr_wave_pos: ",
        "birch_hill_7_sl",
        "yellowgrass_6_sl",
        "birch_hill_6_sl",
        "lowgrass_6_sl",
        "forest_house_6_sl",
        "travel",
        "event_cards.kdr",
        "noname",
        "desc ",
        "effect:",
        "type:",
        "stat:",
        "ailment:",
        "status:",
        "amount:",
        "reqs:",
        "rarity:",
        "level:",
        "WHOA WHOA WHOA",
        "WHAT IS GOING ONNNNN!?",
        "input_wait",
        "effect",
        "rough_road_basic_stat",
        "country_ailment",
        "player_effects",
        "animal_instincts",
        "follow_the_law",
        "idiot_sort",
        "foggy",
        "drunk_driving",
        "motorway_bomb",
        "hh_sleep",
        "add_threat",
        "ailment:inspired",
        "energy_1",
        "energy:1",
        "item_tent",
        "item:tent",
        "money:20",
        "item_duct_tape",
        "item:duct_tape",
        "energy_2",
        "energy:2",
        "Other",
        "eg1",
        "EGEGEG",
        "enemies.kdr",
        "clear_item:",
        "types:",
        "stop:",
        "sprite_type:",
        " id:",
        "open_wait",
        "This is a Road Event",
        "threat_mask",
        "threat_a",
        "These symbols, that represents the road event, are called [#46B283]THREAT[/color]",
        "threat_b",
        "Each [#46B283]THREAT[/color] corresponds to one of your resources:",
        "threat_mask_energy",
        "threat_c",
        "[spr_threat_warning_energy_status,0,0] [#60BA49]Energy[/color]",
        "threat_mask_money",
        "threat_money",
        "[spr_threat_warning_money_status,0,0] [#FFBD00]Cash[/color]",
        "threat_mask_durability",
        "threat_durability",
        "[spr_threat_warning_car_status,0,0] [#00AEF0]Durability[/color]",
        "threat_mask_gas",
        "threat_energy",
        "and [spr_threat_warning_gas_status,0,0] [#FF9557]Gas[/color]",
        "skills_mask",
        "skills_arrow_a",
        "skills_arrow_b",
        "skills_a",
        "These are your [#E4ACF1]SKILLS[/color]",
        "skills_b",
        "you need to use skills in order to remove the [#46B283]THREAT[/color]",
        "skills_c",
        "during the player-phase you can use [#46B283]ONE[/color] skill.",
        "skill_uses",
        "skill_uses_arrow_a",
        "skill_uses_arrow_b",
        "skills_uses_a",
        "The dots [spr_skill_dot_example] shows how many USES a skill has",
        "skills_uses_b",
        "When you're out of uses, the skill can't be used until you rest.",
        "skill_bottoms",
        "skill_bottom_arrow_a",
        "skill_bottom_arrow_b",
        "skills_bottom_a",
        "The bottom icons shows what [#46B283]TYPE OF THREAT[/color] the skill can remove",
        "skills_bottom_b",
        "white STAR-icons ([spr_threat_solution_icons_small_all,0,0]) can remove [#46B283]THREAT[/color] of ANY type",
        "skills_bottom_c",
        "X-icons ([spr_threat_solution_icons_small_space,0,0]) remove no [#46B283]THREAT[/color]",
        "relax_mask",
        "relax_arrow",
        "relax_target_mask",
        "relax_target_arrow_a",
        "relax_target_arrow_b",
        "relax_a",
        "Use the skill [#E4ACF1]'RELAX'[/color] and align it with the [#46B283]THREAT[/color] on the bottom to remove it.",
        "relax_b",
        "Click and drag the skill to the threat icons in the bottom display.",
        "Select the skill with [spr_gp_icon_face1,0]. Use [spr_gp_icon_dpad,0] or [spr_gp_icon_ls,0] to change target.",
        "relax_done_wait",
        "relax_done_activate",
        "extra_turn_mask",
        "perfect_message",
        "PERFECT!",
        "When EACH of the skill icons remove [#46B283]THREAT[/color] you get a [#4abbb5]PERFECT[/color] hit.",
        "When you get a [#4abbb5]PERFECT[/color] hit, you get an [#E4ACF1]EXTRA TURN[/color]\nThis means you can use ANOTHER skill this turn!",
        "skill_costs",
        "skill_cost_arrow_a",
        "skill_cost_arrow_b",
        "costs_message_a",
        "Some skills have costs. It is shown here.",
        "costs_message_b",
        "This skill costs [#60BA49]1 Energy[/color] to use",
        "have_a_go_mask",
        "have_a_go_arrow",
        "have_a_go_message",
        "Go ahead and use the [#E4ACF1]'Have a Go'[/color] skill to remove another [#46B283]THREAT[/color]",
        "GREAT!",
        "Even though you got another [#4abbb5]PERFECT HIT[/color], your turn will end.",
        "You may only get [#E4ACF1]ONE[/color] extra turn each player phase.",
        "turn_end_a",
        "On the ROAD PHASE, the [#46B283]THREAT[/color] with a [spr_threat_status_attack_example][#EE783C]WARNING[/color] icon over them will ATTACK you",
        "turn_end_b",
        "Each threat deals damage to its corresponding resource.",
        "turn_end_c",
        "There are different kinds of [#EE783C]THREAT WARNINGS[/color].",
        "turn_end_d",
        "You can hover over them to see what they do, or check a full list by pressing this button.",
        "You can press [spr_gp_icon_rs,0] to see a full list of [#EE783C]THREAT WARNINGS[/color].",
        "attack_wait",
        "attack_done_activate",
        "After the ROAD PHASE, something will happen, and new [#EE783C]THREAT WARNING[/color] will be displayed.",
        "You defeat the road event when ALL [#46B283]THREAT[/color] is removed.",
        "attack",
        "P E R F E C T !",
        "id not found",
        "event_start_wait",
        "[ROAD EVENT]",
        "E  x  t  r  a    T  u  r  n  !",
        "PLAYER PHASE",
        "EXTRA TURN",
        "HAPPY TURN",
        "ROAD PHASE",
        "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789 ",
        "right_stick_press",
        "execute_wait_start",
        "execute_wait",
        "execute_wait_end",
        "police_pull_over_walk",
        "window_cleaner_wait",
        "select_attackers_animation",
        "threat_status_tween_out",
        "attack_card",
        "time_out",
        "resourceful",
        "make_clone",
        "make_random",
        "harmonica",
        "precision",
        "step_on_it",
        "idiotic_1",
        "spend_to_gain",
        "eco_driving",
        "bride_happy",
        "road_trip_2",
        "smoke_sleep",
        "idol_power",
        "lottery_winner",
        "hiking_mastery",
        "re_targeting_title",
        "re_targeting",
        "Threat status",
        "(ERROR)Describes the status of the threat",
        "threat_attacking_title",
        "threat_attacking",
        "threat_shield_title",
        "threat_shield",
        "threat_bomb_title",
        "threat_bomb",
        "threat_crit_title",
        "threat_crit",
        "threat_debuff_title",
        "threat_debuff",
        "threat_clone_title",
        "threat_clone",
        "threat_random_title",
        "threat_random",
        "Threat",
        "threat_desc",
        "combo",
        "no road",
        "nowhere",
        "ROAD NAME: ",
        "Gas drain:",
        "Road types:",
        "ENV:",
        "[fnt_debug]",
        "tween_in_line",
        "intro_a",
        "Road Summary",
        "dmg_stats",
        "road_summary_graph_text",
        "events_cleared",
        "Events cleared:",
        "Road exp:",
        "hh_exp",
        "intro_wait",
        "tween_out_line",
        "exp_count",
        "FRONT SEAT BONUS!",
        "SOCIAL BONUS!",
        "DIRTY PENALTY!",
        "saved data status ",
        " error ",
        "loading",
        "shop_buy_title",
        "shop_buy_desc",
        "SHOPLIFTING!",
        "hh_barter",
        "journal_learn_skill_text",
        "§skill",
        "threat",
        "threat_desc_title",
        "armor",
        "exhausted",
        "exhausted_desc_title",
        "exhausted_desc",
        "test_skill",
        "Test Skill",
        "energy:1,gas:1",
        "test skill",
        "skills.kdr",
        "EXE",
        "swift:",
        "pierce:",
        "cost_string:",
        "threat:",
        "target:",
        "target_extra:",
        "resource:",
        "condition:",
        "discount:",
        "uses:",
        "SWIFT: ",
        "§target",
        "passive_skills.kdr",
        "tween_in_bg",
        "You got",
        "Skill point",
        "Click to open journal",
        "Press A to open journal",
        "bottom_text_tween",
        "New Skill Tree!",
        "available for all future playthroughs",
        "skill_trees.kdr",
        "letter:",
        "icon:",
        "icon_big:",
        "mastery_trait:",
        "skill:",
        "no skill type defined for skill in skill tree named <",
        "----> defaulted to 0",
        "god_hand",
        "blur_surf",
        "sfx_re_select_hh",
        "sfx_re_hover_hh",
        "energy_full",
        "energy_half",
        "drunk_or_high",
        "food_item",
        "asleep",
        "wheel_equipped",
        "gourmet_mastery",
        "sfx_re_card_select",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_face4,0]: Skill info. [spr_gp_icon_dpad_down,0]: Glovebox. [spr_gp_icon_lt,0]: Skip turn.",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_dpad_up,0]: Skills. [spr_gp_icon_lt,0]: Skip turn.",
        "[spr_gp_icon_face1,0]: Confirm target. [spr_gp_icon_face2,0]: Cancel.",
        "New skill gained!",
        "[close]",
        "bg_cloud_small",
        "bg_cloud_small_night",
        "lightning",
        "Exit social menu",
        "Do you really wanna kick out ",
        " from your car?",
        "kick",
        "ambience",
        "pc",
        "slow",
        "Come with me",
        "CEO",
        "Fire We Light",
        "The Honeydrips",
        "fast",
        "ambience.kdr",
        "inside:",
        "asset:",
        "presents",
        "supported by",
        "die",
        "JAN",
        "FEB",
        "MAR",
        "APR",
        "MAY",
        "JUN",
        "JUL",
        "AUG",
        "SEP",
        "OCT",
        "NOV",
        "DEC",
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December",
        "Energy",
        "Money",
        "Durability",
        "Name",
        "roof",
        "interior",
        "idol",
        "sw",
        "Stats",
        "Skills",
        "Journal",
        "pass_time",
        "Level: ",
        "left_mask",
        "You have unlocked a [#E4ACF1]SWIFT[/color] skill.",
        "When you use a [#E4ACF1]SWIFT[/color] skill, you automatically gain an extra turn.",
        "Just as when you get a [#4abbb5]PERFECT HIT[/color].",
        "ATTACK",
        "Deals 1 damage on road phase.",
        "DEBUFF",
        "Gives a random negative status on road phase.",
        "DANGER",
        "Deals 2 damage on road phase.",
        "SHIELD",
        "Threat is protected from one hit. Deals 1 damage.",
        "NOTE",
        "When this is destroyed, also destroy adjacent threat.",
        "CLONE",
        "Spawns another threat of same type on road phase.",
        "CHANGE",
        "Transforms into a new threat. Deals 1 damage.",
        "THREAT WARNINGS",
        "lightning_fade",
        "sfx_thunder",
        "bg_fade_in",
        "bg_fade_out",
        "sleeper_less_energy",
        " [Camping]",
        "rain_lover",
        "sleeping_bag",
        "comfortable",
        "Comfortable!",
        "You got a skill point!",
        "bartender_work",
        "Drunk!",
        "Pay was cut in half, since you were drunk while working!",
        "High!",
        "Pay was cut in half, since you were high while working!",
        "toilet_cleaner",
        "janitor_work",
        "camping_work",
        "manual_labor",
        "farm_work",
        "book_ac",
        "book_bible",
        "book_horror",
        "book_mich",
        "book_mura",
        "book_peng",
        "book_phil",
        "book_poem",
        "book_road",
        "book_scifi",
        "book_slaughter",
        "book_surreal",
        "book_thirdp",
        "book_walden",
        "text_fade_out",
        "vignette",
        "press_start",
        "PRESS ANY KEY",
        "WISHLIST ON STEAM",
        "NEW GAME",
        "Start a new run and overwrite existing run?",
        "CONTINUE",
        "EXIT",
        "STAND UP",
        "original",
        "New game",
        "HELP",
        "This is an important description",
        "top left",
        "top right",
        "hooray bonus!",
        "XXX",
        "linger_down",
        "[#f7dd6e][spr_debug_small_kd_dollar]",
        "_short",
        "linger_up",
        "top_close_button_title",
        "top_close_button_desc",
        "TRUNK",
        "UPGRADES",
        "EXTRA",
        "JOURNAL",
        "SKILLS",
        "TRAITS",
        "TASKS",
        "map_preview",
        "MAP",
        "SHOP",
        "GARAGE",
        "REPAIR",
        "CUSTOMIZE",
        "WORK",
        "HITCHER",
        "FUEL",
        "REST",
        "BOARD",
        "EXPLORE",
        "HOME",
        "CASINO",
        "SALVAGE",
        "t01_car",
        "boring_mini_car",
        "bug",
        "bug_car",
        "bus",
        "bus_car",
        "golf_cab",
        "golf_cab_car",
        "hatchback_golf_car",
        "malibu",
        "malibu_car",
        "minivan_car",
        "transporter_car",
        "workvan_car",
        "semitruck_lorry_n",
        "semitruck_lorry_f",
        "semitruck_car",
        "saab_car",
        "stationwagon_car",
        "taxi_car",
        "transam",
        "transam_car",
        "truck_b2000",
        "truck_b2000_car",
        "truck_ford",
        "truck_ford_car",
        "truck_small_car",
        "volvo_245",
        "volvo245_car",
        "btruck",
        "btruck_car",
        "boring2door",
        "boring2door_car",
        "boring4door",
        "boring4door_car",
        "New Trait!",
        "show_unlock",
        "tween_in_name",
        "sfx_trait_letter",
        "tween_in_desc",
        "traits.kdr",
        "devname:",
        "px_w",
        "px_h",
        "uvs",
        "Player Phase",
        "temp",
        "Do this and that",
        "upgrades.kdr",
        "§stat",
        "§amount",
        "§road",
        "car:",
        "tier:",
        "pos:",
        "Engine",
        "Roof",
        "Interior",
        "Utility Front",
        "Utility Back",
        "Wheels",
        "Lucky Charm",
        "Spray",
        "Cosmetic",
        "slot:",
        "upg_price:",
        "upg_lock:",
        "item_tags:",
        "car_upgrade,",
        "item_sprite:",
        "car_sprite:",
        "car_sprite0:",
        "car_sprite1:",
        "car_sprite2:",
        "[#7DB29B]-CAR UPGRADE: ",
        "-[/color]\n",
        ",non_shop",
        "dirt",
        "dust",
        "rust",
        "night falls",
        "rain perc set to 0 because its EARLY",
        "big_turn_left",
        "s_turn",
        "ws_blend_col_r",
        "ws_blend_col_g",
        "ws_blend_col_b",
        "ws_water_col_r",
        "ws_water_col_g",
        "ws_water_col_b",
        "ws_col_mix_0",
        "ws_col_mix_1",
        "ws_brightness",
        "ws_saturation",
        "ws_contrast",
        "ws_strength_x",
        "ws_strength_y",
        "ws_pattern_w",
        "ws_pattern_h",
        "walk_away",
        "wipe",
        "work.kdr",
        "cost:",
        "time:",
        "pay:",
        "normal_req:",
        "job title",
        "this is a default job",
        "work_none",
        "work_title",
        "work_pay",
        "work_cost",
        "work_inspired",
        "Confirm",
        "Do you accept this work?",
        "[Y]",
        "[N]",
        "workaholic",
        "No energy",
        "Not enough energy!",
        "[spr_gp_icon_face1,0]: Select. [spr_gp_icon_rs,0]: Scroll.",
        "Destroyed work UI",
        "texel",
        "high_intensity",
        "heat_intensity",
        "blur_amount",
        "darken",
        "highlight_tex",
        "blur_tex",
        "pure_noise_tex",
        "noise_pos1",
        "noise_pos2",
        "streamer_lut_tex",
        "clean",
        "K-Chrome",
        "J-1",
        "polaroid px-680",
        "fuji fp-100",
        "fuji fp+",
        "fuji fp100+ adjusted",
        "uDims",
        "FPS: ",
        "FPS_real: ",
        "LUT: ",
        "LUT_strength: ",
        "vsync: ",
        "KeepDriving",
        "Default",
        "@@SleepMargin",
        "10",
        "@@DrawColour",
        "4294967295",
        "@@VersionMajor",
        "@@VersionMinor",
        "@@VersionBuild",
        "@@VersionRevision",
        "0.1.0",
        "Steamworks_x64.dll",
        "steam_init",
        "steam_user_owns_dlc",
        "steam_user_installed_dlc",
        "steam_current_game_language",
        "steam_available_languages",
        "steam_activate_overlay",
        "steam_get_persona_name",
        "steam_is_overlay_enabled",
        "steam_is_overlay_activated",
        "steam_activate_overlay_browser",
        "steam_activate_overlay_user",
        "steam_activate_overlay_store",
        "steam_get_user_persona_name",
        "steam_is_cloud_enabled_for_app",
        "steam_is_cloud_enabled_for_account",
        "steam_file_persisted",
        "steam_get_quota_total",
        "steam_get_quota_free",
        "steam_file_write",
        "steam_file_write_file",
        "steam_file_read",
        "steam_file_delete",
        "steam_file_exists",
        "steam_file_size",
        "steam_file_share",
        "steam_is_screenshot_requested",
        "steam_send_screenshot",
        "steam_ugc_download",
        "steam_ugc_create_item",
        "steam_ugc_start_item_update",
        "steam_ugc_submit_item_update",
        "steam_ugc_set_item_title",
        "steam_ugc_set_item_description",
        "steam_ugc_set_item_visibility",
        "steam_ugc_set_item_tags",
        "steam_ugc_set_item_content",
        "steam_ugc_set_item_preview",
        "steam_ugc_get_item_update_progress",
        "steam_ugc_subscribe_item",
        "steam_ugc_unsubscribe_item",
        "steam_ugc_num_subscribed_items",
        "steam_ugc_get_subscribed_items",
        "steam_ugc_get_item_install_info",
        "steam_ugc_get_item_update_info",
        "steam_ugc_request_item_details",
        "steam_ugc_delete_item",
        "steam_ugc_create_query_user",
        "steam_ugc_create_query_user_ex",
        "steam_ugc_create_query_all",
        "steam_ugc_create_query_all_ex",
        "steam_ugc_query_set_cloud_filename_filter",
        "steam_ugc_query_set_match_any_tag",
        "steam_ugc_query_set_search_text",
        "steam_ugc_query_set_ranked_by_trend_days",
        "steam_ugc_query_add_required_tag",
        "steam_ugc_query_add_excluded_tag",
        "steam_ugc_query_set_return_long_description",
        "steam_ugc_query_set_return_total_only",
        "steam_ugc_query_set_allow_cached_response",
        "steam_ugc_send_query",
        "steam_is_user_logged_on",
        "steam_get_user_steam_id",
        "steam_get_user_account_id",
        "steam_get_app_id",
        "steam_create_leaderboard",
        "steam_upload_score",
        "steam_upload_score_ext",
        "steam_upload_score_buffer",
        "steam_upload_score_buffer_ext",
        "steam_download_scores",
        "steam_download_scores_around_user",
        "steam_download_friends_scores",
        "steam_set_achievement",
        "steam_get_achievement",
        "steam_clear_achievement",
        "steam_set_stat_int",
        "steam_set_stat_float",
        "steam_set_stat_avg_rate",
        "steam_get_stat_int",
        "steam_get_stat_float",
        "steam_get_stat_avg_rate",
        "steam_reset_all_stats",
        "steam_reset_all_stats_achievements",
        "steam_stats_ready",
        "steam_update",
        "steam_initialised",
        "steam_shutdown",
        "steam_is_subscribed",
        "steam_set_warning_message_hook",
        "steam_lobby_send_chat_message",
        "steam_lobby_send_chat_message_buffer",
        "steam_lobby_get_chat_message_text",
        "steam_lobby_get_chat_message_size",
        "steam_lobby_get_chat_message_data",
        "steam_lobby_get_lobby_id",
        "steam_lobby_leave",
        "steam_lobby_is_owner",
        "steam_lobby_get_owner_id",
        "steam_lobby_set_owner_id",
        "steam_lobby_set_joinable",
        "steam_lobby_get_member_count",
        "steam_lobby_get_member_id",
        "steam_lobby_activate_invite_overlay",
        "steam_lobby_list_request",
        "steam_lobby_list_add_string_filter",
        "steam_lobby_list_add_numerical_filter",
        "steam_lobby_list_add_near_filter",
        "steam_lobby_list_add_distance_filter",
        "steam_lobby_list_get_count",
        "steam_lobby_list_get_data",
        "steam_lobby_list_get_lobby_id",
        "steam_lobby_list_get_lobby_owner_id",
        "steam_lobby_list_get_lobby_member_count",
        "steam_lobby_list_get_lobby_member_id",
        "steam_lobby_list_join",
        "steam_lobby_join_id",
        "steam_lobby_create",
        "steam_lobby_set_data",
        "steam_lobby_get_data",
        "steam_lobby_set_type",
        "steam_lobby_list_is_loading",
        "steam_net_set_auto_accept_p2p_sessions",
        "steam_net_accept_p2p_session",
        "steam_net_close_p2p_session",
        "steam_net_packet_set_type",
        "steam_net_packet_send",
        "steam_net_packet_receive",
        "steam_net_packet_get_size",
        "steam_net_packet_get_data",
        "steam_net_packet_get_sender_id",
        "steam_user_set_played_with",
        "steam_get_friends_game_info",
        "steam_get_user_persona_name_sync",
        "steam_set_rich_presence",
        "steam_clear_rich_presence",
        "steam_get_user_avatar",
        "steam_image_get_size",
        "steam_image_get_rgba",
        "steam_image_get_bgra",
        "steam_set_overlay_notification_position",
        "steam_set_overlay_notification_inset",
        "steam_get_app_ownership_ticket_data",
        "steam_user_request_encrypted_app_ticket",
        "steam_inventory_result_get_status",
        "steam_inventory_result_get_unix_timestamp",
        "steam_inventory_result_get_item_property",
        "steam_inventory_result_get_items",
        "steam_inventory_result_destroy",
        "steam_inventory_trigger_item_drop",
        "steam_inventory_add_promo_item",
        "steam_inventory_add_promo_items",
        "steam_inventory_consume_item",
        "steam_inventory_exchange_items",
        "steam_inventory_generate_items",
        "steam_inventory_get_all_items",
        "steam_inventory_start_purchase",
        "steam_inventory_request_eligible_promo_item_defs",
        "steam_inventory_get_items_by_id",
        "steam_inventory_start_update_properties",
        "steam_inventory_set_property_bool",
        "steam_inventory_set_property_float",
        "steam_inventory_set_property_int",
        "steam_inventory_set_property_string",
        "steam_inventory_remove_property",
        "steam_inventory_submit_update_properties",
        "steam_inventory_load_item_definitions",
        "steam_inventory_get_item_price",
        "steam_inventory_get_items_with_prices",
        "steam_inventory_request_prices",
        "steam_inventory_transfer_item_quantity",
        "steam_input_init",
        "steam_input_shutdown",
        "steam_input_set_input_action_manifest_file_path",
        "steam_input_run_frame",
        "steam_input_wait_for_data",
        "steam_input_new_data_available",
        "steam_input_get_connected_controllers",
        "steam_input_enable_device_callbacks",
        "steam_input_enable_action_event_callbacks",
        "steam_input_get_action_set_handle",
        "steam_input_activate_action_set",
        "steam_input_get_current_action_set",
        "steam_input_activate_action_set_layer",
        "steam_input_deactivate_action_set_layer",
        "steam_input_deactivate_all_action_set_layers",
        "steam_input_get_active_action_set_layers",
        "steam_input_get_digital_action_handle",
        "steam_input_get_digital_action_data",
        "steam_input_get_digital_action_origins",
        "steam_input_get_string_for_digital_action_name",
        "steam_input_get_analog_action_handle",
        "steam_input_get_analog_action_data",
        "steam_input_get_analog_action_origins",
        "steam_input_get_glyph_png_for_action_origin",
        "steam_input_get_glyph_svg_for_action_origin",
        "steam_input_get_glyph_for_action_origin_legacy",
        "steam_input_get_string_for_action_origin",
        "steam_input_get_string_for_analog_action_name",
        "steam_input_stop_analog_action_momentum",
        "steam_input_get_motion_data",
        "steam_input_trigger_vibration",
        "steam_input_trigger_vibration_extended",
        "steam_input_trigger_simple_haptic_event",
        "steam_input_set_led_color",
        "steam_input_trigger_haptic_pulse_legacy",
        "steam_input_trigger_repeated_haptic_pulse_legacy",
        "steam_input_show_binding_panel",
        "steam_input_get_input_type_for_handle",
        "steam_input_get_controller_for_gamepad_index",
        "steam_input_get_gamepad_index_for_controller",
        "steam_input_get_string_for_xbox_origin",
        "steam_input_get_glyph_for_xbox_origin",
        "steam_input_get_action_origin_from_xbox_origin",
        "steam_input_translate_action_origin",
        "steam_input_get_device_binding_revision",
        "steam_input_get_remote_play_session_id",
        "steam_input_get_session_input_configuration_settings",
        "steam_input_set_dualsense_trigger_effect",
        "steam_show_floating_gamepad_text_input",
        "steam_show_gamepad_text_input",
        "steam_get_entered_gamepad_text_input",
        "steam_utils_enable_callbacks",
        "steam_utils_is_steam_running_on_steam_deck",
        "steam_dismiss_floating_gamepad_text_input",
        "steam_request_global_stats",
        "steam_request_global_achievement_percentages",
        "steam_get_global_stat",
        "steam_get_global_stat_history",
        "steam_get_achievement_achieved_percent",
        "steam_get_next_most_achieved_achievement_info",
        "steam_get_most_achieved_achievement_info",
        "steam_user_get_auth_session_ticket",
        "steam_user_cancel_auth_ticket",
        "steam_get_local_file_change_count",
        "steam_get_local_file_change",
        "steam_utils_is_steam_in_big_picture_mode",
        "steam_utils_set_game_launcher_mode",
        "sdkPath",
        "RDpcREVWXFNURUFNXHN0ZWFtd29ya3Nfc2RrXzE1NVxzZGs=",
        "appID",
        "0",
        "debug",
        "QXV0bw==",
        "logLevel",
        "MQ==",
        "sdkVersion",
        "MS41NQ==",
        "sdkHashWin",
        "MURCM0ZENDE0MDM5RDNFNTgxNUE1NzIxOTI1REQyRTBBM0E5RjI1NDk2MDNDNkNBQjdDNDlCODQ5NjZBMUFGMw==",
        "sdkHashMac",
        "ODhEQzc5NDAzRjY4RTgxQjY2NzRDOTI3RUQzNjJFRjNDRjY5MDQ2RjU4N0VEMDA5RkRDNkFEODVEODVFOTdGMg==",
        "sdkHashLinux",
        "QzBDQzNEMjgwMkU1RjI0NjNCRkEwMDQ2QzQxRDJGNjVBNjMzNUJBQUVFRkJCQTZDN0RCRDU2ODFENUNBN0M0Ng==",
        "versionStable",
        "MjAyMy4xLjAuMA==",
        "versionBeta",
        "MjAyMy4xMDAuMC4w",
        "versionDev",
        "OS45LjEuMjkz",
        "versionLTS",
        "MjAyMi4wLjEuMjQ=",
        "A_44_16_SFX_Building_Enter_Supermarket_01",
        "A_44_16_SFX_Building_Enter_Supermarket_01.wav",
        "A_44_16_SFX_NPC_Car_Average_Car_Toyota_Loop_01",
        "A_44_16_SFX_NPC_Car_Average_Car_Toyota_Loop_01.wav",
        "A_48_16_SFX_Building_Enter_Supermarket_01",
        "A_48_16_SFX_Building_Enter_Supermarket_01.wav",
        "A_48_16_SFX_NPC_Car_Average_Car_Toyota_Loop_01",
        "A_48_16_SFX_NPC_Car_Average_Car_Toyota_Loop_01.wav",
        "kd_end_woosh",
        "kd_end_woosh.wav",
        "music__5___Arkenbuzzsaw_2024_09_13",
        "music__5___Arkenbuzzsaw_2024_09_13.wav",
        "music_01_famous_chinese_short_stories",
        "music_01_famous_chinese_short_stories.wav",
        "music_01_Mundane___Riff_Raff_Main_Master__2496__240315",
        "music_01_Mundane___Riff_Raff_Main_Master__2496__240315.wav",
        "music_02_dog_in_the_sun",
        "music_02_dog_in_the_sun.wav",
        "music_02_Mundane___Fast_but_Lazy_Main_Master__2496__240315",
        "music_02_Mundane___Fast_but_Lazy_Main_Master__2496__240315.wav",
        "music_03_Aasma_Going_Nowhere",
        "music_03_Aasma_Going_Nowhere.wav",
        "music_03_cowboy_pills",
        "music_03_cowboy_pills.wav",
        "music_03_Mundane___Never_Change_Main_Master__2496__240315",
        "music_03_Mundane___Never_Change_Main_Master__2496__240315.wav",
        "music_04_i_ve_been_wasting_all_my_good_years_away",
        "music_04_i_ve_been_wasting_all_my_good_years_away.wav",
        "music_04_Mundane___New_Friends_Main_Master__2496__240315",
        "music_04_Mundane___New_Friends_Main_Master__2496__240315.wav",
        "music_05_hometowns",
        "music_05_hometowns.wav",
        "music_05_Mundane___Summer_Day_Main_Master__2496__240315",
        "music_05_Mundane___Summer_Day_Main_Master__2496__240315.wav",
        "music_06_let_me_down",
        "music_06_let_me_down.wav",
        "music_Crystal_Boys___Let_it_slip___01_Nightlife",
        "music_Crystal_Boys___Let_it_slip___01_Nightlife.wav",
        "music_Crystal_Boys___Let_it_slip___02_Gold",
        "music_Crystal_Boys___Let_it_slip___02_Gold.wav",
        "music_Crystal_Boys___Let_it_slip___03_Tigers",
        "music_Crystal_Boys___Let_it_slip___03_Tigers.wav",
        "music_Crystal_Boys___Let_it_slip___04_Break_Away",
        "music_Crystal_Boys___Let_it_slip___04_Break_Away.wav",
        "music_Crystal_Boys___Let_it_slip___05_Heat_Waves",
        "music_Crystal_Boys___Let_it_slip___05_Heat_Waves.wav",
        "music_Crystal_Boys___Let_it_slip___06_Color_of_Snow",
        "music_Crystal_Boys___Let_it_slip___06_Color_of_Snow.wav",
        "music_Crystal_Boys___Let_it_slip___07_Lost_Times",
        "music_Crystal_Boys___Let_it_slip___07_Lost_Times.wav",
        "music_Crystal_Boys___Let_it_slip___08_End_and_Begin",
        "music_Crystal_Boys___Let_it_slip___08_End_and_Begin.wav",
        "music_Crystal_Boys___Let_it_slip___09_Endless_Ocean",
        "music_Crystal_Boys___Let_it_slip___09_Endless_Ocean.wav",
        "music_Crystal_Boys___Let_it_slip___10_Close_Your_Eyes",
        "music_Crystal_Boys___Let_it_slip___10_Close_Your_Eyes.wav",
        "music_Dorena_Dandelion",
        "music_Dorena_Dandelion.wav",
        "music_El_Huervo___FIVE",
        "music_El_Huervo___FIVE.wav",
        "music_El_Huervo___Recluse",
        "music_El_Huervo___Recluse.wav",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___01_EVA_SPENCE",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___01_EVA_SPENCE.wav",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___02_HELEN_TIGER",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___02_HELEN_TIGER.wav",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___03_YASUKO_ONUKI",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___03_YASUKO_ONUKI.wav",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___04_JEMINA_PEARL",
        "music_FUCKING_WEREWOLF_ASSO___S_T_7_INCH___04_JEMINA_PEARL.wav",
        "music_FWA_03_A3_THE_TITO_BELTR_N_MASSACRE",
        "music_FWA_03_A3_THE_TITO_BELTR_N_MASSACRE.wav",
        "music_FWA_09_B4_BOY_MAKES_WOLF",
        "music_FWA_09_B4_BOY_MAKES_WOLF.wav",
        "music_FWA_10_B5_YOUR_EX_DOESN_T_MARK_TREASURES",
        "music_FWA_10_B5_YOUR_EX_DOESN_T_MARK_TREASURES.wav",
        "music_Holy_Now___Dream_of_Me___01_Ballad",
        "music_Holy_Now___Dream_of_Me___01_Ballad.wav",
        "music_Holy_Now___Dream_of_Me___02_Places",
        "music_Holy_Now___Dream_of_Me___02_Places.wav",
        "music_Holy_Now___Dream_of_Me___04_Dream_of_Me",
        "music_Holy_Now___Dream_of_Me___04_Dream_of_Me.wav",
        "music_makthaverskan___Ill___02_Leda",
        "music_makthaverskan___Ill___02_Leda.wav",
        "music_makthaverskan___Ill___04_Witness",
        "music_makthaverskan___Ill___04_Witness.wav",
        "music_makthaverskan___Makthaverskan_II___01_Antabus",
        "music_makthaverskan___Makthaverskan_II___01_Antabus.wav",
        "music_makthaverskan___Makthaverskan_II___02_Asleep",
        "music_makthaverskan___Makthaverskan_II___02_Asleep.wav",
        "music_makthaverskan___Makthaverskan_II___05_Outshine",
        "music_makthaverskan___Makthaverskan_II___05_Outshine.wav",
        "music_makthaverskan___Makthaverskan_II___08_Distance",
        "music_makthaverskan___Makthaverskan_II___08_Distance.wav",
        "music_mdy_1_Midsummer_Party",
        "music_mdy_1_Midsummer_Party.wav",
        "music_mdy_2_It_s_Not_Nice_To_Be_Alone_In_The_Fall",
        "music_mdy_2_It_s_Not_Nice_To_Be_Alone_In_The_Fall.wav",
        "music_mdy_3_This_Weather_Pisses_Me_Off",
        "music_mdy_3_This_Weather_Pisses_Me_Off.wav",
        "music_mdy_4_Hungry___Alone",
        "music_mdy_4_Hungry___Alone.wav",
        "music_mdy_5_LAST4EVER",
        "music_mdy_5_LAST4EVER.wav",
        "music_mdy_m_1_We_Break_Up_On_Friday",
        "music_mdy_m_1_We_Break_Up_On_Friday.wav",
        "music_mdy_m_2_Please_Don_t_Talk_To_Me_I_Fall_In_Love_So_Easily",
        "music_mdy_m_2_Please_Don_t_Talk_To_Me_I_Fall_In_Love_So_Easily.wav",
        "music_mdy_m_3_Everything__Allright__",
        "music_mdy_m_3_Everything__Allright__.wav",
        "music_mdy_m_4_Cigarettes___Peoplesbeer",
        "music_mdy_m_4_Cigarettes___Peoplesbeer.wav",
        "music_mdy_m_5_Friday",
        "music_mdy_m_5_Friday.wav",
        "music_sw_01___how_many_nights",
        "music_sw_01___how_many_nights.wav",
        "music_sw_02___lord",
        "music_sw_02___lord.wav",
        "music_sw_03___you_won_you_won_you_won_you_won",
        "music_sw_03___you_won_you_won_you_won_you_won.wav",
        "music_The_Honeydrips___In_the_city___06_Fatima_Says",
        "music_The_Honeydrips___In_the_city___06_Fatima_Says.wav",
        "music_The_Honeydrips___In_the_city___07_Bright",
        "music_The_Honeydrips___In_the_city___07_Bright.wav",
        "music_The_Honeydrips___In_the_city___08_Fire_We_Light",
        "music_The_Honeydrips___In_the_city___08_Fire_We_Light.wav",
        "music_The_Honeydrips___In_the_city___09_In_The_City",
        "music_The_Honeydrips___In_the_city___09_In_The_City.wav",
        "music_The_Honeydrips___In_the_city___12_There_Comes_a_Time",
        "music_The_Honeydrips___In_the_city___12_There_Comes_a_Time.mp3",
        "music_Wake_Up___Holy_Now",
        "music_Wake_Up___Holy_Now.wav",
        "music_WESTKUST___LAST_FOREVER___01_Swirl",
        "music_WESTKUST___LAST_FOREVER___01_Swirl.wav",
        "music_WESTKUST___LAST_FOREVER___02_Dishwasher",
        "music_WESTKUST___LAST_FOREVER___02_Dishwasher.wav",
        "music_WESTKUST___LAST_FOREVER___03_Drown",
        "music_WESTKUST___LAST_FOREVER___03_Drown.wav",
        "music_WESTKUST___LAST_FOREVER___04_0700",
        "music_WESTKUST___LAST_FOREVER___04_0700.wav",
        "music_WESTKUST___LAST_FOREVER___05_Weekends",
        "music_WESTKUST___LAST_FOREVER___05_Weekends.wav",
        "music_WESTKUST___LAST_FOREVER___06_Easy",
        "music_WESTKUST___LAST_FOREVER___06_Easy.wav",
        "music_WESTKUST___LAST_FOREVER___07_Jonna",
        "music_WESTKUST___LAST_FOREVER___07_Jonna.wav",
        "music_WESTKUST___LAST_FOREVER___08_Summer_3D",
        "music_WESTKUST___LAST_FOREVER___08_Summer_3D.wav",
        "music_WESTKUST___LAST_FOREVER___09_Another_day",
        "music_WESTKUST___LAST_FOREVER___09_Another_day.wav",
        "SFX_amb_forest",
        "SFX_amb_forest.wav",
        "SFX_amb_rain",
        "SFX_amb_rain.wav",
        "SFX_Ambience_Explore_City_01",
        "SFX_Ambience_Explore_City_01.wav",
        "SFX_Ambience_Explore_Woods_01",
        "SFX_Ambience_Explore_Woods_01.wav",
        "SFX_Ambience_Indoor_Caf__Loop_01",
        "SFX_Ambience_Indoor_Caf__Loop_01.wav",
        "SFX_Ambience_Indoor_Casino_Loop_01",
        "SFX_Ambience_Indoor_Casino_Loop_01.wav",
        "SFX_Ambience_Indoor_Drug_Alley_Loop_01",
        "SFX_Ambience_Indoor_Drug_Alley_Loop_01.wav",
        "SFX_Ambience_Indoor_Employment_Office_Loop_01",
        "SFX_Ambience_Indoor_Employment_Office_Loop_01.wav",
        "SFX_Ambience_Indoor_Farmers_Market_Loop_01",
        "SFX_Ambience_Indoor_Farmers_Market_Loop_01.wav",
        "SFX_Ambience_Indoor_Garage_Loop_01",
        "SFX_Ambience_Indoor_Garage_Loop_01.wav",
        "SFX_Ambience_Indoor_Gas_Pump_Loop_01",
        "SFX_Ambience_Indoor_Gas_Pump_Loop_01.wav",
        "SFX_Ambience_Indoor_Home_Loop_01",
        "SFX_Ambience_Indoor_Home_Loop_01.wav",
        "SFX_Ambience_Indoor_Hotel_Loop_01",
        "SFX_Ambience_Indoor_Hotel_Loop_01.wav",
        "SFX_Ambience_Indoor_Junkyard_Loop",
        "SFX_Ambience_Indoor_Junkyard_Loop.wav",
        "SFX_Ambience_Indoor_Mechanic_Parts_store_Loop_01",
        "SFX_Ambience_Indoor_Mechanic_Parts_store_Loop_01.wav",
        "SFX_Ambience_Indoor_Pub_Loop_01",
        "SFX_Ambience_Indoor_Pub_Loop_01.wav",
        "SFX_Ambience_Indoor_Seven_11_Gas_Station_Loop_01",
        "SFX_Ambience_Indoor_Seven_11_Gas_Station_Loop_01.wav",
        "SFX_Ambience_Indoor_Supermarket_Loop_01",
        "SFX_Ambience_Indoor_Supermarket_Loop_01.wav",
        "SFX_Ambience_Indoor_Thrift_Store_Loop_01",
        "SFX_Ambience_Indoor_Thrift_Store_Loop_01.wav",
        "SFX_Ambience_Outside_Big_City_Day_Loop_01",
        "SFX_Ambience_Outside_Big_City_Day_Loop_01.wav",
        "SFX_Ambience_Outside_Big_City_Night_Loop_01",
        "SFX_Ambience_Outside_Big_City_Night_Loop_01.wav",
        "SFX_Ambience_Outside_Country_Day_Loop_01",
        "SFX_Ambience_Outside_Country_Day_Loop_01.wav",
        "SFX_Ambience_Outside_Country_Night_Loop_01",
        "SFX_Ambience_Outside_Country_Night_Loop_01.wav",
        "SFX_Ambience_Outside_Desert_Day_Loop_01",
        "SFX_Ambience_Outside_Desert_Day_Loop_01.wav",
        "SFX_Ambience_Outside_Desert_Night_Loop_01",
        "SFX_Ambience_Outside_Desert_Night_Loop_01.wav",
        "SFX_Ambience_Outside_Forest_Day_Loop_01",
        "SFX_Ambience_Outside_Forest_Day_Loop_01.wav",
        "SFX_Ambience_Outside_Forest_Night_Loop_01",
        "SFX_Ambience_Outside_Forest_Night_Loop_01.wav",
        "SFX_Ambience_Outside_People_Less_01",
        "SFX_Ambience_Outside_People_Less_01.wav",
        "SFX_Ambience_Outside_People_More_01",
        "SFX_Ambience_Outside_People_More_01.wav",
        "SFX_Ambience_Outside_Roadnoise_Loop_01",
        "SFX_Ambience_Outside_Roadnoise_Loop_01.wav",
        "SFX_Ambience_Outside_Small_Town_Day_Loop_01",
        "SFX_Ambience_Outside_Small_Town_Day_Loop_01.wav",
        "SFX_Ambience_Outside_Small_Town_Night_Loop_01",
        "SFX_Ambience_Outside_Small_Town_Night_Loop_01.wav",
        "SFX_Ambience_World_Campfire_Loop_01",
        "SFX_Ambience_World_Campfire_Loop_01.wav",
        "SFX_Ambience_World_Camping_Site_Loop",
        "SFX_Ambience_World_Camping_Site_Loop.wav",
        "SFX_Ambience_World_Casino_Loop_01",
        "SFX_Ambience_World_Casino_Loop_01.wav",
        "SFX_Ambience_World_Graveyard_Loop_01",
        "SFX_Ambience_World_Graveyard_Loop_01.wav",
        "SFX_Ambience_World_Punk_Club_Loop_01",
        "SFX_Ambience_World_Punk_Club_Loop_01.wav",
        "SFX_Apartment_Room_Tone_Sound_FX",
        "SFX_Apartment_Room_Tone_Sound_FX.mp3",
        "SFX_broken_glass_sound_max_2587",
        "SFX_broken_glass_sound_max_2587.wav",
        "SFX_Building_Enter_Drug_Alley_01",
        "SFX_Building_Enter_Drug_Alley_01.wav",
        "SFX_Building_Enter_Hotel_01",
        "SFX_Building_Enter_Hotel_01.wav",
        "SFX_Building_Enter_Mechanic_Parts_Store_01",
        "SFX_Building_Enter_Mechanic_Parts_Store_01.wav",
        "SFX_Building_Enter_Pub_01",
        "SFX_Building_Enter_Pub_01.wav",
        "SFX_Building_Enter_Supermarket_01",
        "SFX_Building_Enter_Supermarket_01.wav",
        "sfx_door_knock_temp",
        "sfx_door_knock_temp.wav",
        "SFX_empty",
        "SFX_empty.mp3",
        "SFX_Ending_Festival_Ambience_Post_Ending_Loop_01",
        "SFX_Ending_Festival_Ambience_Post_Ending_Loop_01.wav",
        "SFX_Ending_Festival_Ambience_Pre_Ending_Loop_01",
        "SFX_Ending_Festival_Ambience_Pre_Ending_Loop_01.wav",
        "SFX_Ending_Festival_Ending_Trigger_01",
        "SFX_Ending_Festival_Ending_Trigger_01.wav",
        "SFX_Ending_Folk_Race_Ambience_Loop_01",
        "SFX_Ending_Folk_Race_Ambience_Loop_01.wav",
        "SFX_Ending_Folk_Race_Announcer_Yelps_01",
        "SFX_Ending_Folk_Race_Announcer_Yelps_01.wav",
        "SFX_Ending_Folk_Race_Announcer_Yelps_02",
        "SFX_Ending_Folk_Race_Announcer_Yelps_02.wav",
        "SFX_Ending_Folk_Race_Announcer_Yelps_03",
        "SFX_Ending_Folk_Race_Announcer_Yelps_03.wav",
        "SFX_Ending_Folk_Race_Announcer_Yelps_04",
        "SFX_Ending_Folk_Race_Announcer_Yelps_04.wav",
        "SFX_Ending_Folk_Race_Announcer_Yelps_05",
        "SFX_Ending_Folk_Race_Announcer_Yelps_05.wav",
        "SFX_Ending_Folk_Race_Car_Loop_01",
        "SFX_Ending_Folk_Race_Car_Loop_01.wav",
        "SFX_Ending_Folk_Race_Countdown_Ending_01",
        "SFX_Ending_Folk_Race_Countdown_Ending_01.wav",
        "SFX_Ending_Folk_Race_Countdown_Start_01",
        "SFX_Ending_Folk_Race_Countdown_Start_01.wav",
        "SFX_Ending_Mountain_Ambience_Loop_01",
        "SFX_Ending_Mountain_Ambience_Loop_01.wav",
        "SFX_Ending_Mountain_Ending_Bells_01",
        "SFX_Ending_Mountain_Ending_Bells_01.wav",
        "SFX_Ending_Mountain_Ending_Loop_01",
        "SFX_Ending_Mountain_Ending_Loop_01.wav",
        "SFX_Ending_Party_Hot_Tub_Loop_01",
        "SFX_Ending_Party_Hot_Tub_Loop_01.wav",
        "SFX_Ending_Party_House_Loop_01",
        "SFX_Ending_Party_House_Loop_01.wav",
        "SFX_Ending_Prison_Picture_Frame_Appear_01",
        "SFX_Ending_Prison_Picture_Frame_Appear_01.wav",
        "SFX_Ending_Prison_Picture_Photo_Taken_01",
        "SFX_Ending_Prison_Picture_Photo_Taken_01.wav",
        "SFX_Ending_Work_Sequence_01",
        "SFX_Ending_Work_Sequence_01.wav",
        "SFX_Event_A_Card_Select_01",
        "SFX_Event_A_Card_Select_01.wav",
        "SFX_Event_A_Card_Select_02",
        "SFX_Event_A_Card_Select_02.wav",
        "SFX_Event_A_Card_Select_03",
        "SFX_Event_A_Card_Select_03.wav",
        "SFX_Event_A_Event_End_01",
        "SFX_Event_A_Event_End_01.wav",
        "SFX_Event_A_Event_Start_Screen_Raise_01",
        "SFX_Event_A_Event_Start_Screen_Raise_01.wav",
        "SFX_Event_A_Event_Start_Screen_Static_01",
        "SFX_Event_A_Event_Start_Screen_Static_01.wav",
        "SFX_Event_A_Event_Start_Text_Scroll_01",
        "SFX_Event_A_Event_Start_Text_Scroll_01.wav",
        "SFX_Event_A_Hit_Coin_01",
        "SFX_Event_A_Hit_Coin_01.wav",
        "SFX_Event_A_Hit_Coin_02",
        "SFX_Event_A_Hit_Coin_02.wav",
        "SFX_Event_A_Hit_Coin_03",
        "SFX_Event_A_Hit_Coin_03.wav",
        "SFX_Event_A_Hit_Durability_01",
        "SFX_Event_A_Hit_Durability_01.wav",
        "SFX_Event_A_Hit_Durability_02",
        "SFX_Event_A_Hit_Durability_02.wav",
        "SFX_Event_A_Hit_Durability_03",
        "SFX_Event_A_Hit_Durability_03.wav",
        "SFX_Event_A_Hit_Energy_01",
        "SFX_Event_A_Hit_Energy_01.wav",
        "SFX_Event_A_Hit_Energy_02",
        "SFX_Event_A_Hit_Energy_02.wav",
        "SFX_Event_A_Hit_Energy_03",
        "SFX_Event_A_Hit_Energy_03.wav",
        "SFX_Event_A_Hit_Gas_01",
        "SFX_Event_A_Hit_Gas_01.wav",
        "SFX_Event_A_Hit_Gas_02",
        "SFX_Event_A_Hit_Gas_02.wav",
        "SFX_Event_A_Hit_Gas_03",
        "SFX_Event_A_Hit_Gas_03.wav",
        "SFX_Event_A_Mirror_Hover_Over_01",
        "SFX_Event_A_Mirror_Hover_Over_01.wav",
        "SFX_Event_A_Mirror_Hover_Over_02",
        "SFX_Event_A_Mirror_Hover_Over_02.wav",
        "SFX_Event_A_Mirror_Hover_Over_03",
        "SFX_Event_A_Mirror_Hover_Over_03.wav",
        "SFX_Event_A_Mirror_Select_Character_01",
        "SFX_Event_A_Mirror_Select_Character_01.wav",
        "SFX_Event_A_Mirror_Select_Character_02",
        "SFX_Event_A_Mirror_Select_Character_02.wav",
        "SFX_Event_A_Mirror_Select_Character_03",
        "SFX_Event_A_Mirror_Select_Character_03.wav",
        "SFX_Event_A_Shield_Disappear_01",
        "SFX_Event_A_Shield_Disappear_01.wav",
        "SFX_Event_A_Threat_Appear_Triangle_Window_Appear_01",
        "SFX_Event_A_Threat_Appear_Triangle_Window_Appear_01.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_01",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_01.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_02",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_02.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_03",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_03.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_04",
        "SFX_Event_A_Threat_Disappear_Analog_Miss_04.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_01",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_01.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_02",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_02.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_03",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_03.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_04",
        "SFX_Event_A_Threat_Disappear_Analog_Perfect_04.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_01",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_01.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_02",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_02.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_03",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_03.wav",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_04",
        "SFX_Event_A_Threat_Disappear_Analog_Regular_04.wav",
        "SFX_Event_A_Threat_Musical_Disappear_01",
        "SFX_Event_A_Threat_Musical_Disappear_01.wav",
        "SFX_Event_A_Threat_Musical_Line_Up_01",
        "SFX_Event_A_Threat_Musical_Line_Up_01.wav",
        "SFX_Event_A_Warning_Appear_Triangle_Light_Up_01",
        "SFX_Event_A_Warning_Appear_Triangle_Light_Up_01.wav",
        "SFX_Event_A_Warning_Appear_Triangle_Light_Up_02",
        "SFX_Event_A_Warning_Appear_Triangle_Light_Up_02.wav",
        "SFX_Event_A_Warning_Appear_Triangle_Light_Up_03",
        "SFX_Event_A_Warning_Appear_Triangle_Light_Up_03.wav",
        "SFX_Event_A_Warning_Attack_01",
        "SFX_Event_A_Warning_Attack_01.wav",
        "SFX_Event_A_Warning_Attack_02",
        "SFX_Event_A_Warning_Attack_02.wav",
        "SFX_Event_A_Warning_Attack_03",
        "SFX_Event_A_Warning_Attack_03.wav",
        "SFX_Event_Abandoned_Hut_Door_Opening_01",
        "SFX_Event_Abandoned_Hut_Door_Opening_01.wav",
        "SFX_Event_Abandoned_Hut_Loop_01",
        "SFX_Event_Abandoned_Hut_Loop_01.wav",
        "SFX_Event_Ambulance_Driving_By_Loop_01",
        "SFX_Event_Ambulance_Driving_By_Loop_01.wav",
        "SFX_Event_Ambulance_Driving_By_Pass_01",
        "SFX_Event_Ambulance_Driving_By_Pass_01.wav",
        "SFX_Event_Argument_With_Hitchhickers_Loop_01",
        "SFX_Event_Argument_With_Hitchhickers_Loop_01.wav",
        "SFX_Event_Bee_In_Car_Bee_Loop_01",
        "SFX_Event_Bee_In_Car_Bee_Loop_01.wav",
        "SFX_Event_Biker_Gang_Loop_01",
        "SFX_Event_Biker_Gang_Loop_01.wav",
        "SFX_Event_Birds_In_The_Road_Clear_01",
        "SFX_Event_Birds_In_The_Road_Clear_01.wav",
        "SFX_Event_Birds_In_The_Road_Loop_01",
        "SFX_Event_Birds_In_The_Road_Loop_01.wav",
        "SFX_Event_Car_Crash_Loop_01",
        "SFX_Event_Car_Crash_Loop_01.wav",
        "SFX_Event_Cow_Clear_01",
        "SFX_Event_Cow_Clear_01.wav",
        "SFX_Event_Cow_Loop_01",
        "SFX_Event_Cow_Loop_01.wav",
        "SFX_Event_Cyclist_Loop_01",
        "SFX_Event_Cyclist_Loop_01.wav",
        "SFX_Event_Deer_Appear_01",
        "SFX_Event_Deer_Appear_01.wav",
        "SFX_Event_Deer_Disappear_01",
        "SFX_Event_Deer_Disappear_01.wav",
        "SFX_Event_Dumpster_Diving_Open_01",
        "SFX_Event_Dumpster_Diving_Open_01.wav",
        "SFX_Event_Fallen_Tree_Loop_01",
        "SFX_Event_Fallen_Tree_Loop_01.wav",
        "SFX_Event_Find_An_Item_Cardboard_Box_01",
        "SFX_Event_Find_An_Item_Cardboard_Box_01.wav",
        "SFX_Event_Find_An_Item_Suitcase_01",
        "SFX_Event_Find_An_Item_Suitcase_01.wav",
        "SFX_Event_Homeless_Window_Cleaner_Loop_01",
        "SFX_Event_Homeless_Window_Cleaner_Loop_01.wav",
        "SFX_Event_Homeless_Window_Cleaner_Start_01",
        "SFX_Event_Homeless_Window_Cleaner_Start_01.wav",
        "SFX_Event_Insect_Swarm_Loop_01",
        "SFX_Event_Insect_Swarm_Loop_01.wav",
        "SFX_Event_Kids_Playing_Loop_01",
        "SFX_Event_Kids_Playing_Loop_01.wav",
        "SFX_Event_Leg_Cramp_Enter_01",
        "SFX_Event_Leg_Cramp_Enter_01.wav",
        "SFX_Event_Majestic_Falcon_Enter_01",
        "SFX_Event_Majestic_Falcon_Enter_01.wav",
        "SFX_Event_Majestic_Falcon_Exit_01",
        "SFX_Event_Majestic_Falcon_Exit_01.wav",
        "SFX_Event_Majestic_Falcon_Wing_Flap_01",
        "SFX_Event_Majestic_Falcon_Wing_Flap_01.wav",
        "SFX_Event_Majestic_Falcon_Wing_Flap_02",
        "SFX_Event_Majestic_Falcon_Wing_Flap_02.wav",
        "SFX_Event_Majestic_Falcon_Wing_Flap_03",
        "SFX_Event_Majestic_Falcon_Wing_Flap_03.wav",
        "SFX_Event_Majestic_Falcon_Wing_Flap_04",
        "SFX_Event_Majestic_Falcon_Wing_Flap_04.wav",
        "SFX_Event_Pot_Holes_Loop_01",
        "SFX_Event_Pot_Holes_Loop_01.wav",
        "SFX_Event_Pulled_Over_By_Cop_Loop_01",
        "SFX_Event_Pulled_Over_By_Cop_Loop_01.wav",
        "SFX_Event_Pulled_Over_By_Cop_Start_01",
        "SFX_Event_Pulled_Over_By_Cop_Start_01.wav",
        "SFX_Event_Road_Construction_Loop_01",
        "SFX_Event_Road_Construction_Loop_01.wav",
        "SFX_Event_Road_Kill_Loop_01",
        "SFX_Event_Road_Kill_Loop_01.wav",
        "SFX_Event_Sheep_Clear_01",
        "SFX_Event_Sheep_Clear_01.wav",
        "SFX_Event_Sheep_Loop_01",
        "SFX_Event_Sheep_Loop_01.wav",
        "SFX_Event_Skating_Kids_Kickflip_01",
        "SFX_Event_Skating_Kids_Kickflip_01.wav",
        "SFX_Event_Skating_Kids_Loop_01",
        "SFX_Event_Skating_Kids_Loop_01.wav",
        "SFX_Event_Someone_Playing_Chicken_Loop_01",
        "SFX_Event_Someone_Playing_Chicken_Loop_01.wav",
        "SFX_Event_Sunlight_In_Eyes_Loop_01",
        "SFX_Event_Sunlight_In_Eyes_Loop_01.wav",
        "SFX_Event_Tailgating_Truck_Beep_Loop_01",
        "SFX_Event_Tailgating_Truck_Beep_Loop_01.wav",
        "SFX_Event_Traffic_Jam_Loop_01",
        "SFX_Event_Traffic_Jam_Loop_01.wav",
        "SFX_Event_Vague_Lanes_Loop_01",
        "SFX_Event_Vague_Lanes_Loop_01.wav",
        "SFX_Event_Water_Puddle_Loop_01",
        "SFX_Event_Water_Puddle_Loop_01.wav",
        "SFX_Event_Weird_Sound_In_Car_Loop_01",
        "SFX_Event_Weird_Sound_In_Car_Loop_01.wav",
        "SFX_Explore_Screen_Claim_Inventory_01",
        "SFX_Explore_Screen_Claim_Inventory_01.wav",
        "SFX_Explore_Screen_Inventory_Pickup_01",
        "SFX_Explore_Screen_Inventory_Pickup_01.wav",
        "SFX_Explore_Screen_Progress_Fail_01",
        "SFX_Explore_Screen_Progress_Fail_01.wav",
        "SFX_Explore_Screen_Progress_Success_01",
        "SFX_Explore_Screen_Progress_Success_01.wav",
        "SFX_Explore_Screen_Step_Asphalt_01",
        "SFX_Explore_Screen_Step_Asphalt_01.wav",
        "SFX_Explore_Screen_Step_Asphalt_02",
        "SFX_Explore_Screen_Step_Asphalt_02.wav",
        "SFX_Explore_Screen_Step_Asphalt_03",
        "SFX_Explore_Screen_Step_Asphalt_03.wav",
        "SFX_Explore_Screen_Step_Asphalt_04",
        "SFX_Explore_Screen_Step_Asphalt_04.wav",
        "SFX_Explore_Screen_Step_Asphalt_05",
        "SFX_Explore_Screen_Step_Asphalt_05.wav",
        "SFX_Explore_Screen_Step_Grass_01",
        "SFX_Explore_Screen_Step_Grass_01.wav",
        "SFX_Explore_Screen_Step_Grass_02",
        "SFX_Explore_Screen_Step_Grass_02.wav",
        "SFX_Explore_Screen_Step_Grass_03",
        "SFX_Explore_Screen_Step_Grass_03.wav",
        "SFX_Explore_Screen_Step_Grass_04",
        "SFX_Explore_Screen_Step_Grass_04.wav",
        "SFX_Explore_Screen_Step_Grass_05",
        "SFX_Explore_Screen_Step_Grass_05.wav",
        "SFX_Gas_Pump_Dunk_Refill_Empty_Click",
        "SFX_Gas_Pump_Dunk_Refill_Empty_Click.wav",
        "SFX_Gas_Pump_Dunk_Refill_Full_Click",
        "SFX_Gas_Pump_Dunk_Refill_Full_Click.wav",
        "SFX_Gas_Pump_End_01",
        "SFX_Gas_Pump_End_01.wav",
        "SFX_Gas_Pump_Loop_01",
        "SFX_Gas_Pump_Loop_01.wav",
        "SFX_Gas_Pump_Pay_01",
        "SFX_Gas_Pump_Pay_01.wav",
        "SFX_Gas_Pump_Reset_01",
        "SFX_Gas_Pump_Reset_01.wav",
        "SFX_Gas_Pump_Start_01",
        "SFX_Gas_Pump_Start_01.wav",
        "SFX_General_Pen_Circle_01",
        "SFX_General_Pen_Circle_01.wav",
        "SFX_General_Pen_Circle_02",
        "SFX_General_Pen_Circle_02.wav",
        "SFX_General_Pen_Circle_03",
        "SFX_General_Pen_Circle_03.wav",
        "SFX_General_Pen_Circle_04",
        "SFX_General_Pen_Circle_04.wav",
        "SFX_General_Pen_Scribble_Line_01",
        "SFX_General_Pen_Scribble_Line_01.wav",
        "SFX_General_Pen_Scribble_Line_02",
        "SFX_General_Pen_Scribble_Line_02.wav",
        "SFX_General_Pen_Scribble_Line_03",
        "SFX_General_Pen_Scribble_Line_03.wav",
        "SFX_General_Pen_Scribble_Line_04",
        "SFX_General_Pen_Scribble_Line_04.wav",
        "SFX_General_Pen_Scribble_Short_01",
        "SFX_General_Pen_Scribble_Short_01.wav",
        "SFX_General_Pen_Scribble_Short_02",
        "SFX_General_Pen_Scribble_Short_02.wav",
        "SFX_General_Pen_Scribble_Short_03",
        "SFX_General_Pen_Scribble_Short_03.wav",
        "SFX_General_Pen_Scribble_Short_04",
        "SFX_General_Pen_Scribble_Short_04.wav",
        "SFX_General_Pen_Scribble_Short_05",
        "SFX_General_Pen_Scribble_Short_05.wav",
        "SFX_General_Pen_Scribble_Short_06",
        "SFX_General_Pen_Scribble_Short_06.wav",
        "SFX_General_Pen_Tap_Paper_Hard_01",
        "SFX_General_Pen_Tap_Paper_Hard_01.wav",
        "SFX_General_Pen_Tap_Paper_Hard_02",
        "SFX_General_Pen_Tap_Paper_Hard_02.wav",
        "SFX_General_Pen_Tap_Paper_Hard_03",
        "SFX_General_Pen_Tap_Paper_Hard_03.wav",
        "SFX_General_Pen_Tap_Paper_Hard_04",
        "SFX_General_Pen_Tap_Paper_Hard_04.wav",
        "SFX_Menu_Calendar_Close_01",
        "SFX_Menu_Calendar_Close_01.wav",
        "SFX_Menu_Calendar_Open_01",
        "SFX_Menu_Calendar_Open_01.wav",
        "SFX_Menu_Calendar_Pin_Add_01",
        "SFX_Menu_Calendar_Pin_Add_01.wav",
        "SFX_Menu_Calendar_Pin_Remove_01",
        "SFX_Menu_Calendar_Pin_Remove_01.wav",
        "SFX_Menu_Car_Seats_Down_01",
        "SFX_Menu_Car_Seats_Down_01.wav",
        "SFX_Menu_Car_Seats_Down_02",
        "SFX_Menu_Car_Seats_Down_02.wav",
        "SFX_Menu_Car_Seats_Down_03",
        "SFX_Menu_Car_Seats_Down_03.wav",
        "SFX_Menu_Car_Seats_Up_01",
        "SFX_Menu_Car_Seats_Up_01.wav",
        "SFX_Menu_Car_Seats_Up_02",
        "SFX_Menu_Car_Seats_Up_02.wav",
        "SFX_Menu_Car_Seats_Up_03",
        "SFX_Menu_Car_Seats_Up_03.wav",
        "SFX_Menu_Casino_Button_Add_Spin_01",
        "SFX_Menu_Casino_Button_Add_Spin_01.wav",
        "SFX_Menu_Casino_Button_Cash_Coin_Out_Loop_01",
        "SFX_Menu_Casino_Button_Cash_Coin_Out_Loop_01.wav",
        "SFX_Menu_Casino_Button_Generic_01",
        "SFX_Menu_Casino_Button_Generic_01.wav",
        "SFX_Menu_Casino_Button_Money_In_01",
        "SFX_Menu_Casino_Button_Money_In_01.wav",
        "SFX_Menu_Casino_Button_Money_In_02",
        "SFX_Menu_Casino_Button_Money_In_02.wav",
        "SFX_Menu_Casino_Button_Money_In_03",
        "SFX_Menu_Casino_Button_Money_In_03.wav",
        "SFX_Menu_Casino_Spin_Pull_Lever_01",
        "SFX_Menu_Casino_Spin_Pull_Lever_01.wav",
        "SFX_Menu_Casino_Spin_Single_Speed_Stop_01",
        "SFX_Menu_Casino_Spin_Single_Speed_Stop_01.wav",
        "SFX_Menu_Casino_Spin_Single_Speed_Stop_02",
        "SFX_Menu_Casino_Spin_Single_Speed_Stop_02.wav",
        "SFX_Menu_Casino_Spin_Single_Speed_Stop_03",
        "SFX_Menu_Casino_Spin_Single_Speed_Stop_03.wav",
        "SFX_Menu_Casino_SpinLoop_Speed_Fast_01",
        "SFX_Menu_Casino_SpinLoop_Speed_Fast_01.wav",
        "SFX_Menu_Casino_SpinLoop_Speed_Medium_01",
        "SFX_Menu_Casino_SpinLoop_Speed_Medium_01.wav",
        "SFX_Menu_Casino_SpinLoop_Speed_Slow_01",
        "SFX_Menu_Casino_SpinLoop_Speed_Slow_01.wav",
        "SFX_Menu_Casino_Win_Jackpot_01",
        "SFX_Menu_Casino_Win_Jackpot_01.wav",
        "SFX_Menu_CD_Player_Eject_In_01",
        "SFX_Menu_CD_Player_Eject_In_01.wav",
        "SFX_Menu_CD_Player_Eject_Out_01",
        "SFX_Menu_CD_Player_Eject_Out_01.wav",
        "SFX_Menu_CD_Player_Next_01",
        "SFX_Menu_CD_Player_Next_01.wav",
        "SFX_Menu_CD_Player_Pause_01",
        "SFX_Menu_CD_Player_Pause_01.wav",
        "SFX_Menu_CD_Player_Play_01",
        "SFX_Menu_CD_Player_Play_01.wav",
        "SFX_Menu_CD_Player_Playlist_Grab_01",
        "SFX_Menu_CD_Player_Playlist_Grab_01.wav",
        "SFX_Menu_CD_Player_Playlist_Hover_Over_01",
        "SFX_Menu_CD_Player_Playlist_Hover_Over_01.wav",
        "SFX_Menu_CD_Player_Playlist_Release_01",
        "SFX_Menu_CD_Player_Playlist_Release_01.wav",
        "SFX_Menu_CD_Player_Stop_01",
        "SFX_Menu_CD_Player_Stop_01.wav",
        "SFX_Menu_Click_01",
        "SFX_Menu_Click_01.wav",
        "SFX_Menu_Computer_Click_01",
        "SFX_Menu_Computer_Click_01.wav",
        "SFX_Menu_Computer_Close_01",
        "SFX_Menu_Computer_Close_01.wav",
        "SFX_Menu_Computer_Error_01",
        "SFX_Menu_Computer_Error_01.wav",
        "SFX_Menu_Computer_Open_01",
        "SFX_Menu_Computer_Open_01.wav",
        "SFX_Menu_Computer_Start_01",
        "SFX_Menu_Computer_Start_01.wav",
        "SFX_Menu_Consume_Cigg_01",
        "SFX_Menu_Consume_Cigg_01.wav",
        "SFX_Menu_Consume_Drink_01",
        "SFX_Menu_Consume_Drink_01.wav",
        "SFX_Menu_Consume_Eat_01",
        "SFX_Menu_Consume_Eat_01.wav",
        "SFX_Menu_Consume_Item_Gas_Can_Use_01",
        "SFX_Menu_Consume_Item_Gas_Can_Use_01.wav",
        "SFX_Menu_Consume_Item_Toolbox_Use_01",
        "SFX_Menu_Consume_Item_Toolbox_Use_01.wav",
        "SFX_Menu_Consume_Pill_01",
        "SFX_Menu_Consume_Pill_01.wav",
        "SFX_Menu_Consume_Snort_01",
        "SFX_Menu_Consume_Snort_01.wav",
        "SFX_Menu_Hitchhiker_Pick_Up_01",
        "SFX_Menu_Hitchhiker_Pick_Up_01.wav",
        "SFX_Menu_Instrument_Guitar_Amp_01",
        "SFX_Menu_Instrument_Guitar_Amp_01.wav",
        "SFX_Menu_Instrument_Guitar_Amp_Pedalboard_01",
        "SFX_Menu_Instrument_Guitar_Amp_Pedalboard_01.wav",
        "SFX_Menu_Instrument_Guitar_Only_01",
        "SFX_Menu_Instrument_Guitar_Only_01.wav",
        "SFX_Menu_Instrument_Harmonica_01",
        "SFX_Menu_Instrument_Harmonica_01.wav",
        "SFX_Menu_Instrument_Melodica_01",
        "SFX_Menu_Instrument_Melodica_01.wav",
        "SFX_Menu_Instrument_Tambourine_01",
        "SFX_Menu_Instrument_Tambourine_01.wav",
        "SFX_Menu_Instrument_Trumpet_01",
        "SFX_Menu_Instrument_Trumpet_01.wav",
        "SFX_Menu_Inventory_Pick_Down_01",
        "SFX_Menu_Inventory_Pick_Down_01.wav",
        "SFX_Menu_Inventory_Pick_Down_02",
        "SFX_Menu_Inventory_Pick_Down_02.wav",
        "SFX_Menu_Inventory_Pick_Down_03",
        "SFX_Menu_Inventory_Pick_Down_03.wav",
        "SFX_Menu_Inventory_Pick_Down_04",
        "SFX_Menu_Inventory_Pick_Down_04.wav",
        "SFX_Menu_Inventory_Pick_Down_05",
        "SFX_Menu_Inventory_Pick_Down_05.wav",
        "SFX_Menu_Inventory_Pick_Up_01",
        "SFX_Menu_Inventory_Pick_Up_01.wav",
        "SFX_Menu_Inventory_Pick_Up_02",
        "SFX_Menu_Inventory_Pick_Up_02.wav",
        "SFX_Menu_Inventory_Pick_Up_03",
        "SFX_Menu_Inventory_Pick_Up_03.wav",
        "SFX_Menu_Inventory_Pick_Up_04",
        "SFX_Menu_Inventory_Pick_Up_04.wav",
        "SFX_Menu_Inventory_Pick_Up_05",
        "SFX_Menu_Inventory_Pick_Up_05.wav",
        "SFX_Menu_Journal_Close_01",
        "SFX_Menu_Journal_Close_01.wav",
        "SFX_Menu_Journal_Open_01",
        "SFX_Menu_Journal_Open_01.wav",
        "SFX_Menu_Journal_Skills_Click_01",
        "SFX_Menu_Journal_Skills_Click_01.wav",
        "SFX_Menu_Journal_Switch_Tab_01",
        "SFX_Menu_Journal_Switch_Tab_01.wav",
        "SFX_Menu_Journal_Switch_Tab_02",
        "SFX_Menu_Journal_Switch_Tab_02.wav",
        "SFX_Menu_Journal_Switch_Tab_03",
        "SFX_Menu_Journal_Switch_Tab_03.wav",
        "SFX_Menu_Journal_Switch_Tab_04",
        "SFX_Menu_Journal_Switch_Tab_04.wav",
        "SFX_Menu_Journal_Traits_Click_01",
        "SFX_Menu_Journal_Traits_Click_01.wav",
        "SFX_Menu_Letter_Appear_01",
        "SFX_Menu_Letter_Appear_01.wav",
        "SFX_Menu_Letter_Rip_Finish_01",
        "SFX_Menu_Letter_Rip_Finish_01.wav",
        "SFX_Menu_Letter_Rip_Finish_Magic_01",
        "SFX_Menu_Letter_Rip_Finish_Magic_01.wav",
        "SFX_Menu_Letter_Rip_Loop_01",
        "SFX_Menu_Letter_Rip_Loop_01.wav",
        "SFX_Menu_Map_Close_01",
        "SFX_Menu_Map_Close_01.wav",
        "SFX_Menu_Map_Open_01",
        "SFX_Menu_Map_Open_01.wav",
        "SFX_Menu_Pub_Accept_Quest_01",
        "SFX_Menu_Pub_Accept_Quest_01.wav",
        "SFX_Menu_Pub_Paper_Open_01",
        "SFX_Menu_Pub_Paper_Open_01.wav",
        "SFX_Menu_Skill_Equip_01",
        "SFX_Menu_Skill_Equip_01.wav",
        "SFX_Menu_Skill_Equip_02",
        "SFX_Menu_Skill_Equip_02.wav",
        "SFX_Menu_Skill_Equip_03",
        "SFX_Menu_Skill_Equip_03.wav",
        "SFX_Menu_Skill_Equip_04",
        "SFX_Menu_Skill_Equip_04.wav",
        "SFX_Menu_Skill_Equip_05",
        "SFX_Menu_Skill_Equip_05.wav",
        "SFX_Menu_Skill_Hanger_01",
        "SFX_Menu_Skill_Hanger_01.wav",
        "SFX_Menu_Skill_Hanger_02",
        "SFX_Menu_Skill_Hanger_02.wav",
        "SFX_Menu_Skill_Hanger_03",
        "SFX_Menu_Skill_Hanger_03.wav",
        "SFX_Menu_Skill_Hanger_04",
        "SFX_Menu_Skill_Hanger_04.wav",
        "SFX_Menu_Skill_Hanger_05",
        "SFX_Menu_Skill_Hanger_05.wav",
        "SFX_Menu_Skill_Remove_01",
        "SFX_Menu_Skill_Remove_01.wav",
        "SFX_Menu_Skill_Remove_02",
        "SFX_Menu_Skill_Remove_02.wav",
        "SFX_Menu_Skill_Remove_03",
        "SFX_Menu_Skill_Remove_03.wav",
        "SFX_Menu_Skill_Remove_04",
        "SFX_Menu_Skill_Remove_04.wav",
        "SFX_Menu_Skill_Remove_05",
        "SFX_Menu_Skill_Remove_05.wav",
        "SFX_Menu_Skill_Select_01",
        "SFX_Menu_Skill_Select_01.wav",
        "SFX_Menu_Skill_Select_02",
        "SFX_Menu_Skill_Select_02.wav",
        "SFX_Menu_Skill_Select_03",
        "SFX_Menu_Skill_Select_03.wav",
        "SFX_Menu_Skill_Select_04",
        "SFX_Menu_Skill_Select_04.wav",
        "SFX_Menu_Skill_Select_05",
        "SFX_Menu_Skill_Select_05.wav",
        "SFX_Menu_Skill_Unlock_Buildup_01",
        "SFX_Menu_Skill_Unlock_Buildup_01.wav",
        "SFX_Menu_Skill_Unlock_Failed_01",
        "SFX_Menu_Skill_Unlock_Failed_01.wav",
        "SFX_Menu_Skill_Unlock_Finish_01",
        "SFX_Menu_Skill_Unlock_Finish_01.wav",
        "SFX_Menu_Speech_Start_01",
        "SFX_Menu_Speech_Start_01.wav",
        "SFX_Misc_Bird_Fly_Away_Crow_01",
        "SFX_Misc_Bird_Fly_Away_Crow_01.wav",
        "SFX_Misc_Bird_Fly_Away_Crow_02",
        "SFX_Misc_Bird_Fly_Away_Crow_02.wav",
        "SFX_Misc_Bird_Fly_Away_Crow_03",
        "SFX_Misc_Bird_Fly_Away_Crow_03.wav",
        "SFX_Misc_Bird_Fly_Away_Crow_04",
        "SFX_Misc_Bird_Fly_Away_Crow_04.wav",
        "SFX_Misc_Bird_Fly_Away_Crow_05",
        "SFX_Misc_Bird_Fly_Away_Crow_05.wav",
        "SFX_Misc_Bird_Fly_Away_Dove_01",
        "SFX_Misc_Bird_Fly_Away_Dove_01.wav",
        "SFX_Misc_Bird_Fly_Away_Dove_02",
        "SFX_Misc_Bird_Fly_Away_Dove_02.wav",
        "SFX_Misc_Bird_Fly_Away_Dove_03",
        "SFX_Misc_Bird_Fly_Away_Dove_03.wav",
        "SFX_Misc_Bird_Fly_Away_Dove_04",
        "SFX_Misc_Bird_Fly_Away_Dove_04.wav",
        "SFX_Misc_Bird_Fly_Away_Dove_05",
        "SFX_Misc_Bird_Fly_Away_Dove_05.wav",
        "SFX_Misc_Calling_Parents_Fail_01",
        "SFX_Misc_Calling_Parents_Fail_01.wav",
        "SFX_Misc_Calling_Parents_Success_01",
        "SFX_Misc_Calling_Parents_Success_01.wav",
        "SFX_Misc_CD_Unlock_New_Music_01",
        "SFX_Misc_CD_Unlock_New_Music_01.wav",
        "SFX_Misc_Day_Shift_Beep_01",
        "SFX_Misc_Day_Shift_Beep_01.wav",
        "SFX_Misc_Day_Shift_Day_01",
        "SFX_Misc_Day_Shift_Day_01.wav",
        "SFX_Misc_Day_Shift_Night_01",
        "SFX_Misc_Day_Shift_Night_01.wav",
        "SFX_Misc_Get_Gas_01",
        "SFX_Misc_Get_Gas_01.wav",
        "SFX_Misc_Introspection_01",
        "SFX_Misc_Introspection_01.wav",
        "SFX_Misc_Introspection_Click_01",
        "SFX_Misc_Introspection_Click_01.wav",
        "SFX_Misc_Introspection_Fade_Out_01",
        "SFX_Misc_Introspection_Fade_Out_01.wav",
        "SFX_Misc_Tow_Truck_01",
        "SFX_Misc_Tow_Truck_01.wav",
        "SFX_NPC_Car_A_Passing_Big_01",
        "SFX_NPC_Car_A_Passing_Big_01.wav",
        "SFX_NPC_Car_A_Passing_Medium_01",
        "SFX_NPC_Car_A_Passing_Medium_01.wav",
        "SFX_NPC_Car_A_Passing_Motorcycle_01",
        "SFX_NPC_Car_A_Passing_Motorcycle_01.wav",
        "SFX_NPC_Car_A_Passing_Small_01",
        "SFX_NPC_Car_A_Passing_Small_01.wav",
        "SFX_NPC_Car_Average_Car_Toyota_Loop_01",
        "SFX_NPC_Car_Average_Car_Toyota_Loop_01.wav",
        "SFX_NPC_Car_Big_Truck_Bus_Loop_01",
        "SFX_NPC_Car_Big_Truck_Bus_Loop_01.wav",
        "SFX_NPC_Car_Freight_Truck_Loop_01",
        "SFX_NPC_Car_Freight_Truck_Loop_01.wav",
        "SFX_NPC_Car_Motorcycle_Loop_01",
        "SFX_NPC_Car_Motorcycle_Loop_01.wav",
        "SFX_NPC_Car_Muscle_Car_Loop_01",
        "SFX_NPC_Car_Muscle_Car_Loop_01.wav",
        "SFX_NPC_Car_Pickup_Truck_Loop_01",
        "SFX_NPC_Car_Pickup_Truck_Loop_01.wav",
        "SFX_NPC_Car_Shitty_Car_Loop_01",
        "SFX_NPC_Car_Shitty_Car_Loop_01.wav",
        "SFX_NPC_Car_Siren_Police_01",
        "SFX_NPC_Car_Siren_Police_01.wav",
        "SFX_NPC_Car_Small_Car_Loop_01",
        "SFX_NPC_Car_Small_Car_Loop_01.wav",
        "SFX_NPC_Car_Sports_Car_Loop_01",
        "SFX_NPC_Car_Sports_Car_Loop_01.wav",
        "SFX_NPC_Car_Tractor_Loop_01",
        "SFX_NPC_Car_Tractor_Loop_01.wav",
        "SFX_Payment_Complete_Generic_01",
        "SFX_Payment_Complete_Generic_01.wav",
        "SFX_Payment_Complete_Register_01",
        "SFX_Payment_Complete_Register_01.wav",
        "SFX_Payment_Error_01",
        "SFX_Payment_Error_01.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_01",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_01.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_02",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_02.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_03",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_03.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_04",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_04.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_05",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Down_05.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_01",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_01.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_02",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_02.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_03",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_03.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_04",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_04.wav",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_05",
        "SFX_Player_Car_Muscle_Engine_Accelerate_Up_05.wav",
        "SFX_Player_Car_Muscle_Engine_Driving_Loop_01",
        "SFX_Player_Car_Muscle_Engine_Driving_Loop_01.wav",
        "SFX_Player_Car_Muscle_Engine_Idle_Loop_01",
        "SFX_Player_Car_Muscle_Engine_Idle_Loop_01.wav",
        "SFX_Player_Car_Muscle_Engine_Rev_Loop_01",
        "SFX_Player_Car_Muscle_Engine_Rev_Loop_01.wav",
        "SFX_Player_Car_Muscle_Engine_Start_01",
        "SFX_Player_Car_Muscle_Engine_Start_01.wav",
        "SFX_Player_Car_Muscle_Engine_Start_02",
        "SFX_Player_Car_Muscle_Engine_Start_02.wav",
        "SFX_Player_Car_Muscle_Engine_Stop_01",
        "SFX_Player_Car_Muscle_Engine_Stop_01.wav",
        "SFX_Player_Car_Muscle_Engine_Stop_02",
        "SFX_Player_Car_Muscle_Engine_Stop_02.wav",
        "SFX_Player_Car_Muscle_Honk_01",
        "SFX_Player_Car_Muscle_Honk_01.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_01",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_01.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_02",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_02.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_03",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_03.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_04",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_04.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_05",
        "SFX_Player_Car_Truck_Engine_Accelerate_Down_05.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_01",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_01.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_02",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_02.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_03",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_03.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_04",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_04.wav",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_05",
        "SFX_Player_Car_Truck_Engine_Accelerate_Up_05.wav",
        "SFX_Player_Car_Truck_Engine_Driving_Loop_01",
        "SFX_Player_Car_Truck_Engine_Driving_Loop_01.wav",
        "SFX_Player_Car_Truck_Engine_Idle_Loop_01",
        "SFX_Player_Car_Truck_Engine_Idle_Loop_01.wav",
        "SFX_Player_Car_Truck_Engine_Rev_Loop_01",
        "SFX_Player_Car_Truck_Engine_Rev_Loop_01.wav",
        "SFX_Player_Car_Truck_Engine_Start_01",
        "SFX_Player_Car_Truck_Engine_Start_01.wav",
        "SFX_Player_Car_Truck_Engine_Start_02",
        "SFX_Player_Car_Truck_Engine_Start_02.wav",
        "SFX_Player_Car_Truck_Engine_Stop_01",
        "SFX_Player_Car_Truck_Engine_Stop_01.wav",
        "SFX_Player_Car_Truck_Engine_Stop_02",
        "SFX_Player_Car_Truck_Engine_Stop_02.wav",
        "SFX_Player_Car_Truck_Honk_01",
        "SFX_Player_Car_Truck_Honk_01.wav",
        "SFX_Player_Car_Volvo_Door_Close_01",
        "SFX_Player_Car_Volvo_Door_Close_01.wav",
        "SFX_Player_Car_Volvo_Door_Close_02",
        "SFX_Player_Car_Volvo_Door_Close_02.wav",
        "SFX_Player_Car_Volvo_Door_Close_03",
        "SFX_Player_Car_Volvo_Door_Close_03.wav",
        "SFX_Player_Car_Volvo_Door_Open_01",
        "SFX_Player_Car_Volvo_Door_Open_01.wav",
        "SFX_Player_Car_Volvo_Door_Open_02",
        "SFX_Player_Car_Volvo_Door_Open_02.wav",
        "SFX_Player_Car_Volvo_Door_Open_03",
        "SFX_Player_Car_Volvo_Door_Open_03.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_01",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_01.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_02",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_02.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_03",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_03.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_04",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_04.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_05",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Down_05.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_01",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_01.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_02",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_02.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_03",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_03.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_04",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_04.wav",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_05",
        "SFX_Player_Car_Volvo_Engine_Accelerate_Up_05.wav",
        "SFX_Player_Car_Volvo_Engine_Broken_01",
        "SFX_Player_Car_Volvo_Engine_Broken_01.wav",
        "SFX_Player_Car_Volvo_Engine_Driving_Loop_01",
        "SFX_Player_Car_Volvo_Engine_Driving_Loop_01.wav",
        "SFX_Player_Car_Volvo_Engine_Idle_Loop_01",
        "SFX_Player_Car_Volvo_Engine_Idle_Loop_01.wav",
        "SFX_Player_Car_Volvo_Engine_Overheat_01",
        "SFX_Player_Car_Volvo_Engine_Overheat_01.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Loop_01",
        "SFX_Player_Car_Volvo_Engine_Rev_Loop_01.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Start_01",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Start_01.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Start_02",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Start_02.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Start_03",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Start_03.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Stop_01",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Stop_01.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Stop_02",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Stop_02.wav",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Stop_03",
        "SFX_Player_Car_Volvo_Engine_Rev_Pedal_Stop_03.wav",
        "SFX_Player_Car_Volvo_Engine_Stall_01",
        "SFX_Player_Car_Volvo_Engine_Stall_01.wav",
        "SFX_Player_Car_Volvo_Engine_Start_01",
        "SFX_Player_Car_Volvo_Engine_Start_01.wav",
        "SFX_Player_Car_Volvo_Engine_Start_02",
        "SFX_Player_Car_Volvo_Engine_Start_02.wav",
        "SFX_Player_Car_Volvo_Engine_Stop_01",
        "SFX_Player_Car_Volvo_Engine_Stop_01.wav",
        "SFX_Player_Car_Volvo_Engine_Stop_02",
        "SFX_Player_Car_Volvo_Engine_Stop_02.wav",
        "SFX_Player_Car_Volvo_Glove_Box_Close_01",
        "SFX_Player_Car_Volvo_Glove_Box_Close_01.wav",
        "SFX_Player_Car_Volvo_Glove_Box_Open_01",
        "SFX_Player_Car_Volvo_Glove_Box_Open_01.wav",
        "SFX_Player_Car_Volvo_Honk_01",
        "SFX_Player_Car_Volvo_Honk_01.wav",
        "SFX_Player_Car_Volvo_Hood_Open_01",
        "SFX_Player_Car_Volvo_Hood_Open_01.wav",
        "SFX_Player_Car_Volvo_Sleep_Back_Seat_01",
        "SFX_Player_Car_Volvo_Sleep_Back_Seat_01.wav",
        "SFX_Player_Car_Volvo_Sleep_Tent_01",
        "SFX_Player_Car_Volvo_Sleep_Tent_01.wav",
        "SFX_Player_Car_Volvo_Sleep_Tent_Rack_01",
        "SFX_Player_Car_Volvo_Sleep_Tent_Rack_01.wav",
        "SFX_Player_Car_Volvo_Trunk_Close_01",
        "SFX_Player_Car_Volvo_Trunk_Close_01.wav",
        "SFX_Player_Car_Volvo_Trunk_Open_01",
        "SFX_Player_Car_Volvo_Trunk_Open_01.wav",
        "SFX_Prompt_Appear",
        "SFX_Prompt_Appear.wav",
        "SFX_scratching_metal_3_188120",
        "SFX_scratching_metal_3_188120.mp3",
        "SFX_scratching_metal_5_188122",
        "SFX_scratching_metal_5_188122.mp3",
        "SFX_scratching_metal_6_188123",
        "SFX_scratching_metal_6_188123.mp3",
        "SFX_temp_cd",
        "SFX_temp_cd.wav",
        "SFX_Tire_Conditions_Black_Ice_Loop_01",
        "SFX_Tire_Conditions_Black_Ice_Loop_01.wav",
        "SFX_Tire_Conditions_Dirt_Road_Loop_01",
        "SFX_Tire_Conditions_Dirt_Road_Loop_01.wav",
        "SFX_Tire_Conditions_Flat_Tire_Loop_01",
        "SFX_Tire_Conditions_Flat_Tire_Loop_01.wav",
        "SFX_Tire_Conditions_Highway_Loop_01",
        "SFX_Tire_Conditions_Highway_Loop_01.wav",
        "SFX_Tire_Conditions_Muddy_Road_Loop_01",
        "SFX_Tire_Conditions_Muddy_Road_Loop_01.wav",
        "SFX_Tire_Conditions_Normal_Road_Loop_01",
        "SFX_Tire_Conditions_Normal_Road_Loop_01.wav",
        "SFX_Tire_Conditions_Rough_Terrain_Loop_01",
        "SFX_Tire_Conditions_Rough_Terrain_Loop_01.wav",
        "SFX_Tire_Conditions_Slow_Driving_Area_Loop_01",
        "SFX_Tire_Conditions_Slow_Driving_Area_Loop_01.wav",
        "SFX_Tire_Conditions_Snow_Loop_01",
        "SFX_Tire_Conditions_Snow_Loop_01.wav",
        "SFX_UI_Blackout_Keep_Driving_Menu_Click_Fail_01",
        "SFX_UI_Blackout_Keep_Driving_Menu_Click_Fail_01.wav",
        "SFX_UI_Blackout_Keep_Driving_Menu_Click_Success_01",
        "SFX_UI_Blackout_Keep_Driving_Menu_Click_Success_01.wav",
        "SFX_UI_Blackout_Keep_Driving_Menu_Go_Down_01",
        "SFX_UI_Blackout_Keep_Driving_Menu_Go_Down_01.wav",
        "SFX_UI_Character_Creator_Car_Select_Car_Swapped_01",
        "SFX_UI_Character_Creator_Car_Select_Car_Swapped_01.wav",
        "SFX_UI_Character_Creator_Car_Select_Car_Swapped_02",
        "SFX_UI_Character_Creator_Car_Select_Car_Swapped_02.wav",
        "SFX_UI_Character_Creator_Car_Select_Car_Swapped_03",
        "SFX_UI_Character_Creator_Car_Select_Car_Swapped_03.wav",
        "SFX_UI_Character_Creator_Car_Select_Card_01",
        "SFX_UI_Character_Creator_Car_Select_Card_01.wav",
        "SFX_UI_Character_Creator_Car_Select_Card_02",
        "SFX_UI_Character_Creator_Car_Select_Card_02.wav",
        "SFX_UI_Character_Creator_Car_Select_Card_03",
        "SFX_UI_Character_Creator_Car_Select_Card_03.wav",
        "SFX_UI_Character_Creator_Category_Select_01",
        "SFX_UI_Character_Creator_Category_Select_01.wav",
        "SFX_UI_Character_Creator_Category_Select_02",
        "SFX_UI_Character_Creator_Category_Select_02.wav",
        "SFX_UI_Character_Creator_Category_Select_03",
        "SFX_UI_Character_Creator_Category_Select_03.wav",
        "SFX_UI_Character_Creator_Done_01",
        "SFX_UI_Character_Creator_Done_01.wav",
        "SFX_UI_Character_Creator_Menu_Appear_01",
        "SFX_UI_Character_Creator_Menu_Appear_01.wav",
        "SFX_UI_Character_Creator_Sky_Loop_01",
        "SFX_UI_Character_Creator_Sky_Loop_01.wav",
        "SFX_UI_Hover_Over_Main_Menu_01",
        "SFX_UI_Hover_Over_Main_Menu_01.wav",
        "SFX_UI_Hover_Over_Main_Menu_02",
        "SFX_UI_Hover_Over_Main_Menu_02.wav",
        "SFX_UI_Hover_Over_Main_Menu_03",
        "SFX_UI_Hover_Over_Main_Menu_03.wav",
        "SFX_UI_Hover_Over_Main_Menu_04",
        "SFX_UI_Hover_Over_Main_Menu_04.wav",
        "SFX_UI_Hover_Over_Main_Menu_05",
        "SFX_UI_Hover_Over_Main_Menu_05.wav",
        "SFX_UI_Menu_Car_Appear_01",
        "SFX_UI_Menu_Car_Appear_01.wav",
        "SFX_UI_Menu_Car_Disappear_01",
        "SFX_UI_Menu_Car_Disappear_01.wav",
        "SFX_UI_Menu_Car_Select_01",
        "SFX_UI_Menu_Car_Select_01.wav",
        "SFX_UI_Menu_Car_Select_02",
        "SFX_UI_Menu_Car_Select_02.wav",
        "SFX_UI_Menu_Car_Select_03",
        "SFX_UI_Menu_Car_Select_03.wav",
        "SFX_UI_Menu_Car_Select_04",
        "SFX_UI_Menu_Car_Select_04.wav",
        "SFX_UI_Menu_Car_Select_05",
        "SFX_UI_Menu_Car_Select_05.wav",
        "SFX_UI_Skill_Point_Gain_01",
        "SFX_UI_Skill_Point_Gain_01.wav",
        "SFX_UI_Start_Menu_Ambience_Loop_01",
        "SFX_UI_Start_Menu_Ambience_Loop_01.wav",
        "SFX_UI_Start_Menu_Book_Close_01",
        "SFX_UI_Start_Menu_Book_Close_01.wav",
        "SFX_UI_Start_Menu_Book_Lift_01",
        "SFX_UI_Start_Menu_Book_Lift_01.wav",
        "SFX_UI_Start_Menu_Book_Open_01",
        "SFX_UI_Start_Menu_Book_Open_01.wav",
        "SFX_UI_Start_Menu_Book_Zoom_out_01",
        "SFX_UI_Start_Menu_Book_Zoom_out_01.wav",
        "SFX_UI_Start_Menu_Door_Knock_01",
        "SFX_UI_Start_Menu_Door_Knock_01.wav",
        "SFX_UI_Start_Menu_Door_Open_01",
        "SFX_UI_Start_Menu_Door_Open_01.wav",
        "SFX_UI_Start_Menu_Footstep_Carpet_01",
        "SFX_UI_Start_Menu_Footstep_Carpet_01.wav",
        "SFX_UI_Start_Menu_Footstep_Carpet_02",
        "SFX_UI_Start_Menu_Footstep_Carpet_02.wav",
        "SFX_UI_Start_Menu_Footstep_Carpet_03",
        "SFX_UI_Start_Menu_Footstep_Carpet_03.wav",
        "SFX_UI_Start_Menu_Footstep_Carpet_04",
        "SFX_UI_Start_Menu_Footstep_Carpet_04.wav",
        "SFX_UI_Start_Menu_Footstep_Carpet_05",
        "SFX_UI_Start_Menu_Footstep_Carpet_05.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_01",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_01.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_02",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_02.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_03",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_03.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_04",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_04.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_05",
        "SFX_UI_Start_Menu_Photo_Hover_Over_Off_05.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_01",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_01.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_02",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_02.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_03",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_03.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_04",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_04.wav",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_05",
        "SFX_UI_Start_Menu_Photo_Hover_Over_On_05.wav",
        "SFX_UI_Start_Menu_Settings_Close_01",
        "SFX_UI_Start_Menu_Settings_Close_01.wav",
        "SFX_UI_Start_Menu_Settings_Open_01",
        "SFX_UI_Start_Menu_Settings_Open_01.wav",
        "SFX_UI_Start_Menu_Settings_Tab_Switch_01",
        "SFX_UI_Start_Menu_Settings_Tab_Switch_01.wav",
        "SFX_UI_Start_Menu_Volume_Master_Click_01",
        "SFX_UI_Start_Menu_Volume_Master_Click_01.wav",
        "SFX_UI_Start_Menu_Volume_Music_Click_01",
        "SFX_UI_Start_Menu_Volume_Music_Click_01.wav",
        "SFX_UI_Start_Menu_Volume_SFX_Click_01",
        "SFX_UI_Start_Menu_Volume_SFX_Click_01.wav",
        "SFX_UI_Status_Gain_Disappear_01",
        "SFX_UI_Status_Gain_Disappear_01.wav",
        "SFX_UI_Status_Gain_Negative_01",
        "SFX_UI_Status_Gain_Negative_01.wav",
        "SFX_UI_Status_Gain_Positive_01",
        "SFX_UI_Status_Gain_Positive_01.wav",
        "SFX_UI_Trait_Gained_Enter_01",
        "SFX_UI_Trait_Gained_Enter_01.wav",
        "SFX_UI_Trait_Gained_Exit_01",
        "SFX_UI_Trait_Gained_Exit_01.wav",
        "SFX_UI_Trait_Letter_Typed_01",
        "SFX_UI_Trait_Letter_Typed_01.wav",
        "SFX_UI_Trait_Letter_Typed_02",
        "SFX_UI_Trait_Letter_Typed_02.wav",
        "SFX_UI_Trait_Letter_Typed_03",
        "SFX_UI_Trait_Letter_Typed_03.wav",
        "SFX_UI_Trait_Letter_Typed_04",
        "SFX_UI_Trait_Letter_Typed_04.wav",
        "SFX_UI_Trait_Letter_Typed_05",
        "SFX_UI_Trait_Letter_Typed_05.wav",
        "SFX_UI_Trait_Letter_Typed_06",
        "SFX_UI_Trait_Letter_Typed_06.wav",
        "SFX_UI_Trait_Letter_Typed_07",
        "SFX_UI_Trait_Letter_Typed_07.wav",
        "SFX_UI_Trait_Letter_Typed_08",
        "SFX_UI_Trait_Letter_Typed_08.wav",
        "SFX_UI_XP_Gain_Level_Up_01",
        "SFX_UI_XP_Gain_Level_Up_01.wav",
        "SFX_UI_XP_Gain_Progress_01",
        "SFX_UI_XP_Gain_Progress_01.wav",
        "SFX_Upgrade_Cosmetic_Decal_01",
        "SFX_Upgrade_Cosmetic_Decal_01.wav",
        "SFX_Upgrade_Engine_Install_01",
        "SFX_Upgrade_Engine_Install_01.wav",
        "SFX_Upgrade_Install_Part_01",
        "SFX_Upgrade_Install_Part_01.wav",
        "SFX_Upgrade_Intro_Sound_Sequence_01",
        "SFX_Upgrade_Intro_Sound_Sequence_01.wav",
        "SFX_Upgrade_Repair_Car_01",
        "SFX_Upgrade_Repair_Car_01.wav",
        "SFX_Upgrade_Spray_Paint_01",
        "SFX_Upgrade_Spray_Paint_01.wav",
        "SFX_Upgrade_Utility_Install_01",
        "SFX_Upgrade_Utility_Install_01.wav",
        "SFX_Upgrade_Wheel_Install_01",
        "SFX_Upgrade_Wheel_Install_01.wav",
        "SFX_Weather_Heat_Enter_01",
        "SFX_Weather_Heat_Enter_01.wav",
        "SFX_Weather_Rain_Heavy_Loop_01",
        "SFX_Weather_Rain_Heavy_Loop_01.wav",
        "SFX_Weather_Rain_Loop_01",
        "SFX_Weather_Rain_Loop_01.wav",
        "SFX_Weather_Thunder_Clap_Distant_01",
        "SFX_Weather_Thunder_Clap_Distant_01.wav",
        "SFX_Weather_Thunder_Clap_Distant_02",
        "SFX_Weather_Thunder_Clap_Distant_02.wav",
        "SFX_Weather_Thunder_Clap_Distant_03",
        "SFX_Weather_Thunder_Clap_Distant_03.wav",
        "SFX_Weather_Thunder_Clap_Distant_04",
        "SFX_Weather_Thunder_Clap_Distant_04.wav",
        "SFX_Weather_Thunder_Clap_Distant_05",
        "SFX_Weather_Thunder_Clap_Distant_05.wav",
        "audiogroup_default",
        "ag_player_car",
        "ag_ambience",
        "ag_music",
        "ag_temp",
        "beer1_can",
        "beer3_can",
        "beer4_can",
        "item_thermos",
        "mockup_promt",
        "scribble_fallback_bulletpoint",
        "sp_intro_bush",
        "spr_1_mountain_haze_RAIN",
        "spr_1_mountain_haze_v2",
        "spr_16_square_centered",
        "spr_2_mountain_haze_RAIN",
        "spr_32_square_centered",
        "spr_32_square_top_left",
        "spr_6_bg_dl_tree_test_shadow",
        "spr_6_destination_road_junkyard_chunk",
        "spr_7_bg_destination_desert_casino_light",
        "spr_7_bg_destination_desert_casino",
        "spr_7_bg_dl_tree_test_shadow",
        "spr_7_bg_graveyard_gate",
        "spr_7_bg_graveyard_graves_1",
        "spr_7_bg_graveyard_graves_2",
        "spr_7_destination_road_junkyard_loop",
        "spr_7_dl_road_destinations_desert_pavement_end",
        "spr_7_dl_road_destinations_desert_pavement_loop1",
        "spr_7_dl_road_destinations_desert_pavement_loop2",
        "spr_7_dl_road_destinations_desert_pavement_loop3",
        "spr_7_dl_road_destinations_desert_pavement_start",
        "spr_7_dl_road_rails_countryRail_2",
        "spr_7_dl_road_rails_countryRail_3",
        "spr_7_dl_road_rails_countryRail",
        "spr_7_dl_road_rails_desertfence_2",
        "spr_7_dl_road_rails_desertfence_begin",
        "spr_7_dl_road_rails_desertfence_end",
        "spr_7_dl_road_rails_desertfence",
        "spr_7_dl_road_rails_forestfence_end",
        "spr_7_dl_road_rails_forestfence_start",
        "spr_7_dl_road_rails_forestfence",
        "spr_7_dl_road_rails_guardrail_b_tall",
        "spr_7_dl_road_rails_guardrail_b",
        "spr_7_dl_road_rails_guardrail_tall",
        "spr_7_dl_road_rails_guardrail",
        "spr_7_dl_road_rails_guardwall_b",
        "spr_7_dl_road_rails_guardwall",
        "spr_7_dl_road_sideroad_dirt_end",
        "spr_7_dl_road_sideroad_dirt_loop1",
        "spr_7_dl_road_sideroad_dirt_loop2",
        "spr_7_dl_road_sideroad_dirt_loop3",
        "spr_7_dl_road_sideroad_dirt_start",
        "spr_8_square_centered",
        "spr_achi_temp",
        "spr_ailment_camping",
        "spr_ailment_cold",
        "spr_ailment_dirty_small",
        "spr_ailment_dirty",
        "spr_ailment_dirty3400",
        "spr_ailment_frame_timer",
        "spr_ailment_happy",
        "spr_ailment_headache_small",
        "spr_ailment_headache",
        "spr_ailment_high",
        "spr_ailment_hungry_small",
        "spr_ailment_hungry",
        "spr_ailment_inspired",
        "spr_ailment_intoxicated",
        "spr_ailment_low",
        "spr_ailment_sad",
        "spr_ailment_satisfied_small",
        "spr_ailment_satisfied",
        "spr_ailment_saver",
        "spr_ailment_scared",
        "spr_ailment_social",
        "spr_ailment_speeded",
        "spr_ailment_spender",
        "spr_ailment_starving_small",
        "spr_ailment_starving",
        "spr_ailment_tired",
        "spr_ailment_warm",
        "spr_ailment_wasted",
        "spr_ailment_zone",
        "spr_ambulance_bg",
        "spr_ambulance_body",
        "spr_ambulance_driver",
        "spr_ambulance_screen_siren",
        "spr_ambulance_wheel",
        "spr_ambulance_window",
        "spr_animal_butterfly_1",
        "spr_animal_butterfly_2",
        "spr_animal_cat_scared",
        "spr_animal_cat_sit",
        "spr_animal_cat_walk",
        "spr_animal_flies_1",
        "spr_animal_flies_2",
        "spr_animal_squirrel",
        "spr_apple_tree_0",
        "spr_apple_tree_1",
        "spr_apple_tree_2",
        "spr_apple_tree_3",
        "spr_apple_tree_4",
        "spr_b_5_houses_country_1a",
        "spr_b_5_houses_country_1b",
        "spr_b_5_houses_country_2",
        "spr_b_5_houses_country_3a",
        "spr_b_5_houses_country_3b",
        "spr_b_5_houses_country_3c",
        "spr_b_5_houses_country_3d",
        "spr_b_5_houses_country_4a",
        "spr_b_5_houses_country_4b",
        "spr_b_5_houses_country_4c",
        "spr_b_5_houses_country_5a",
        "spr_b_5_houses_country_5b",
        "spr_b_5_houses_country_6a",
        "spr_b_5_houses_country_7a",
        "spr_b_5_houses_country_7b",
        "spr_b_5_houses_country_8a",
        "spr_b_5_houses_country_8b",
        "spr_b_5_houses_country_8c",
        "spr_b_5_houses_country_9a",
        "spr_b_5_houses_country_9b",
        "spr_b_5_houses_country_9c",
        "spr_b_5_houses_country_9d",
        "spr_b_5_houses_country_9e",
        "spr_b_5_houses_desert_1a",
        "spr_b_5_houses_desert_1b",
        "spr_b_5_houses_desert_2a",
        "spr_b_5_houses_desert_2b",
        "spr_b_5_houses_desert_3a",
        "spr_b_5_houses_desert_3b",
        "spr_b_5_houses_forest_1a",
        "spr_b_5_houses_forest_1b",
        "spr_b_5_houses_forest_2a",
        "spr_b_5_houses_forest_2b",
        "spr_b_5_houses_forest_3a",
        "spr_b_5_houses_forest_3b",
        "spr_b_5_houses_forest_5a",
        "spr_b_5_houses_forest_5b",
        "spr_b_5_houses_forest_6a",
        "spr_b_5_houses_forest_6b",
        "spr_b_6_house_middleclass_1_a",
        "spr_b_6_house_middleclass_1_b",
        "spr_b_6_house_middleclass_1_c",
        "spr_b_6_house_middleclass_1_d",
        "spr_b_6_house_middleclass_1_e",
        "spr_b_6_house_middleclass_2_a",
        "spr_b_6_house_middleclass_2_b",
        "spr_b_6_house_middleclass_2_c",
        "spr_b_6_house_middleclass_3_a",
        "spr_b_6_house_middleclass_3_b",
        "spr_b_6_house_middleclass_4a",
        "spr_b_6_house_middleclass_5a",
        "spr_b_6_house_middleclass_5b",
        "spr_b_6_house_middleclass_6a",
        "spr_b_6_house_middleclass_6b",
        "spr_b_6_house_middleclass_6c",
        "spr_b_6_house_middleclass_7a",
        "spr_b_6_house_middleclass_7b",
        "spr_b_6_house_middleclass_7c",
        "spr_b_6_house_middleclass_7d",
        "spr_b_6_house_middleclass_8",
        "spr_b_6_house_middleclass_9a",
        "spr_b_6_houses_desert_1a",
        "spr_b_6_houses_desert_1b",
        "spr_b_6_houses_desert_2a",
        "spr_b_6_houses_desert_3a",
        "spr_b_6_houses_desert_3b",
        "spr_b_6_houses_desert_3c",
        "spr_b_6_houses_desert_4",
        "spr_b_6_houses_forest_1a",
        "spr_b_6_houses_forest_1b",
        "spr_b_6_houses_forest_2a",
        "spr_b_6_houses_forest_2b",
        "spr_b_6_houses_forest_3a",
        "spr_b_6_houses_forest_3b",
        "spr_b_6_houses_forest_4a",
        "spr_b_6_houses_forest_4b",
        "spr_b_6_houses_forest_5",
        "spr_b_6_houses_forest_6a",
        "spr_b_6_houses_forest_6b",
        "spr_b_7_house_intro_tree",
        "spr_b_7_house_intro",
        "spr_bar_town_country_1",
        "spr_bar_town_country_light",
        "spr_beer_glass_spilled",
        "spr_beer_glass",
        "spr_bg_0_sky_cloud_1a",
        "spr_bg_0_sky_cloud_1b",
        "spr_bg_0_sky_cloud_1c",
        "spr_bg_0_sky_cloud_1d",
        "spr_bg_0_sky_cloud_2a",
        "spr_bg_0_sky_cloud_2b",
        "spr_bg_0_sky_cloud_2c",
        "spr_bg_0_sky_cloud_2d",
        "spr_bg_0_sky_cloud_2e",
        "spr_bg_0_sky_cloud_2f",
        "spr_bg_0_sky_cloud_2g",
        "spr_bg_0_sky_cloud_3",
        "spr_bg_0_sky_cloud_3end",
        "spr_bg_0_sky_cloud_3start",
        "spr_bg_0_sky_cloud_end_1a",
        "spr_bg_0_sky_cloud_end_1b",
        "spr_bg_0_sky_cloud_end_2a",
        "spr_bg_0_sky_cloud_end_2b",
        "spr_bg_0_sky_cloud_night_1a",
        "spr_bg_0_sky_cloud_night_1b",
        "spr_bg_0_sky_cloud_night_1c",
        "spr_bg_0_sky_cloud_night_2e",
        "spr_bg_0_sky_cloud_night_2f",
        "spr_bg_0_sky_cloud_night_2g",
        "spr_bg_0_sky_cloud_start_1a",
        "spr_bg_0_sky_cloud_start_1b",
        "spr_bg_0_sky_cloud_start_2a",
        "spr_bg_0_sky_cloud_start_2b",
        "spr_bg_0_sky_night_1",
        "spr_bg_0_sky_overcast_1a",
        "spr_bg_0_sky_overcast_1b",
        "spr_bg_0_sky_sunset_2",
        "spr_bg_1_general_mist_haze",
        "spr_bg_1_mountain_flat_desert_begin",
        "spr_bg_1_mountain_flat_desert_end",
        "spr_bg_1_mountain_flat_desert_loop_1",
        "spr_bg_1_mountain_flat_woods_begin",
        "spr_bg_1_mountain_flat_woods_end",
        "spr_bg_1_mountain_flat_woods_loop_1",
        "spr_bg_1_mountain_low_snowy_end",
        "spr_bg_1_mountain_low_snowy_loop_1",
        "spr_bg_1_mountain_low_snowy_start",
        "spr_bg_1_mountain_snowy_end",
        "spr_bg_1_mountain_snowy_loop_1",
        "spr_bg_1_mountain_snowy_loop_2",
        "spr_bg_1_mountain_snowy_start",
        "spr_bg_1_ship_test_1",
        "spr_bg_1_ship_test_2",
        "spr_bg_1_water",
        "spr_bg_2_desert_1a",
        "spr_bg_2_desert_1b",
        "spr_bg_2_desert_1c",
        "spr_bg_2_desert_begin",
        "spr_bg_2_desert_end",
        "spr_bg_2_distant_hill_begin",
        "spr_bg_2_distant_hill_end",
        "spr_bg_2_general_mist_haze",
        "spr_bg_2_green_flat_1a",
        "spr_bg_2_green_flat_1a3943",
        "spr_bg_2_green_flat_1b",
        "spr_bg_2_green_flat_1b3944",
        "spr_bg_2_green_flat_1c",
        "spr_bg_2_green_flat_1c3935",
        "spr_bg_2_green_flat_2a",
        "spr_bg_2_green_flat_2a3936",
        "spr_bg_2_green_flat_2b",
        "spr_bg_2_green_flat_2b3937",
        "spr_bg_2_green_flat_3a",
        "spr_bg_2_green_flat_3a3938",
        "spr_bg_2_green_flat_3b",
        "spr_bg_2_green_flat_3b3939",
        "spr_bg_2_green_flat_end",
        "spr_bg_2_green_flat_shore_begin",
        "spr_bg_2_green_flat_shore_end",
        "spr_bg_2_green_flat_shore",
        "spr_bg_2_green_flat_start",
        "spr_bg_2_greenhills_1a",
        "spr_bg_2_greenhills_1a3949",
        "spr_bg_2_greenhills_1b",
        "spr_bg_2_greenhills_1b3945",
        "spr_bg_2_greenhills_1c",
        "spr_bg_2_greenhills_1c3946",
        "spr_bg_2_greenhills_1end",
        "spr_bg_2_greenhills_1start",
        "spr_bg_2_mountain_low_snowy_end",
        "spr_bg_2_mountain_low_snowy_loop1",
        "spr_bg_2_mountain_low_snowy_start",
        "spr_bg_2_mountain_snowy_end",
        "spr_bg_2_mountain_snowy_loop_1",
        "spr_bg_2_mountain_snowy_loop_2",
        "spr_bg_2_mountain_snowy_start",
        "spr_bg_2_pine_flat_1a",
        "spr_bg_2_pine_flat_1b",
        "spr_bg_2_pine_hills_1a",
        "spr_bg_2_pine_hills_1b",
        "spr_bg_2_pine_hills_1c",
        "spr_bg_2_pine_hills_begin",
        "spr_bg_2_pine_hills_end",
        "spr_bg_2_snow_hills_1a",
        "spr_bg_2_snow_hills_1b",
        "spr_bg_2_snow_hills_1c",
        "spr_bg_2_snow_hills_begin",
        "spr_bg_2_snow_hills_end",
        "spr_bg_2_urban_city_1a",
        "spr_bg_2_urban_hill_1a",
        "spr_bg_2_urban_hill_1b",
        "spr_bg_2_urban_hill_begin",
        "spr_bg_2_urban_hill_end",
        "spr_bg_2_water",
        "spr_bg_2_yellow_flat_1a",
        "spr_bg_2_yellow_flat_begin",
        "spr_bg_2_yellow_flat_end",
        "spr_bg_3_city_big_center_1",
        "spr_bg_3_city_big_center_2",
        "spr_bg_3_city_big_haze_country_fromtopleft_halfscreen",
        "spr_bg_3_city_big_haze_desert_fromtopleft_halfscreen",
        "spr_bg_3_city_big_projects_1",
        "spr_bg_3_city_big_projects_2",
        "spr_bg_3_city_big_projects_begin",
        "spr_bg_3_city_big_projects_end",
        "spr_bg_3_city_big_suburbs_1",
        "spr_bg_3_city_big_suburbs_2",
        "spr_bg_3_city_big_suburbs_begin",
        "spr_bg_3_city_big_suburbs_end",
        "spr_bg_3_city_small_center_1a",
        "spr_bg_3_city_small_center_1b",
        "spr_bg_3_city_small_center_1c",
        "spr_bg_3_city_small_center_begin",
        "spr_bg_3_city_small_center_end",
        "spr_bg_3_coast_grassy_end",
        "spr_bg_3_coast_grassy_start",
        "spr_bg_3_coast_industry_1",
        "spr_bg_3_coast_industry_begin",
        "spr_bg_3_coast_industry_end",
        "spr_bg_3_coast_rural_end",
        "spr_bg_3_coast_rural_start",
        "spr_bg_3_coast_town_begin",
        "spr_bg_3_coast_town_end",
        "spr_bg_3_festival_background",
        "spr_bg_3_flat_desert_1a",
        "spr_bg_3_flat_desert_1b",
        "spr_bg_3_flat_desert_1c",
        "spr_bg_3_flat_desert_1d",
        "spr_bg_3_flat_desert_1e",
        "spr_bg_3_flat_desert_begin",
        "spr_bg_3_flat_desert_end",
        "spr_bg_3_flat_grass_green_1_begin",
        "spr_bg_3_flat_grass_green_1_end",
        "spr_bg_3_flat_grass_green_1a",
        "spr_bg_3_flat_grass_green_1b",
        "spr_bg_3_flat_grass_green_1c",
        "spr_bg_3_flat_grass_green_1d",
        "spr_bg_3_flat_grass_green_1e",
        "spr_bg_3_flat_grass_green_1f",
        "spr_bg_3_flat_grass_green_1g",
        "spr_bg_3_flat_grass_green_1h",
        "spr_bg_3_flat_grass_green_3a",
        "spr_bg_3_flat_grass_green_3b",
        "spr_bg_3_flat_grass_green_4_begin",
        "spr_bg_3_flat_grass_green_4_end",
        "spr_bg_3_flat_grass_green_4a",
        "spr_bg_3_flat_grass_green_4b",
        "spr_bg_3_flat_grass_green_5_begin",
        "spr_bg_3_flat_grass_green_5_end",
        "spr_bg_3_flat_grass_green_5",
        "spr_bg_3_flat_grass_green_6_begin",
        "spr_bg_3_flat_grass_green_6_end",
        "spr_bg_3_flat_grass_green_6",
        "spr_bg_3_flat_grass_yellow_1a",
        "spr_bg_3_flat_grass_yellow_1b",
        "spr_bg_3_flat_grass_yellow_1c",
        "spr_bg_3_flat_grass_yellow_1d",
        "spr_bg_3_flat_grass_yellow_end1",
        "spr_bg_3_flat_grass_yellow_start",
        "spr_bg_3_general_mist_haze",
        "spr_bg_3_hill_leaf_1a",
        "spr_bg_3_hill_leaf_1b",
        "spr_bg_3_hill_leaf_1c",
        "spr_bg_3_hill_leaf_1d",
        "spr_bg_3_hill_leaf_1e",
        "spr_bg_3_hill_leaf_2_loop",
        "spr_bg_3_hill_leaf_end",
        "spr_bg_3_hill_leaf_sparse_1a",
        "spr_bg_3_hill_leaf_sparse_1b",
        "spr_bg_3_hill_leaf_sparse_end",
        "spr_bg_3_hill_leaf_sparse_start",
        "spr_bg_3_hill_leaf_start",
        "spr_bg_3_hill_pine_1a",
        "spr_bg_3_hill_pine_1b",
        "spr_bg_3_hill_pine_1c",
        "spr_bg_3_hill_pine_1d",
        "spr_bg_3_hill_pine_1e",
        "spr_bg_3_hill_pine_1f",
        "spr_bg_3_hill_pine_begin",
        "spr_bg_3_hill_pine_end",
        "spr_bg_3_industry_center_1",
        "spr_bg_3_industry_center_end",
        "spr_bg_3_industry_center_start",
        "spr_bg_3_industry_coast_end",
        "spr_bg_3_industry_coast_start",
        "spr_bg_3_island_part_test",
        "spr_bg_3_lone_town_1",
        "spr_bg_3_lone_town_2",
        "spr_bg_3_mist_fullOpacity_stronger",
        "spr_bg_3_mist_fullOpacity",
        "spr_bg_3_mountain_1_begin",
        "spr_bg_3_mountain_1_end",
        "spr_bg_3_mountain_1a",
        "spr_bg_3_mountain_1b",
        "spr_bg_3_mountain_steephill_end",
        "spr_bg_3_mountain_steephill_loop1",
        "spr_bg_3_mountain_steephill_loop2",
        "spr_bg_3_mountain_steephill_loop3",
        "spr_bg_3_mountain_steephill_start",
        "spr_bg_3_or_anyother_rain_full_haze",
        "spr_bg_3_outskirts_1_begin",
        "spr_bg_3_outskirts_1_end",
        "spr_bg_3_outskirts_1a",
        "spr_bg_3_outskirts_1b",
        "spr_bg_3_water",
        "spr_bg_4_mountain_steephill_end",
        "spr_bg_4_mountain_steephill_loop1",
        "spr_bg_4_mountain_steephill_loop2",
        "spr_bg_4_mountain_steephill_loop3",
        "spr_bg_4_mountain_steephill_start",
        "spr_bg_4_pine_end",
        "spr_bg_4_pine_loop_1a",
        "spr_bg_4_pine_loop_1b",
        "spr_bg_4_pine_loop_1c",
        "spr_bg_4_pine_start",
        "spr_bg_5_apple_2_farBG",
        "spr_bg_5_apple_fruitless_1_farBG",
        "spr_bg_5_bush_1a",
        "spr_bg_5_bush_2a",
        "spr_bg_5_bush_2b",
        "spr_bg_5_bush_3a",
        "spr_bg_5_bush_4a",
        "spr_bg_5_bush_4b",
        "spr_bg_5_country_highgrass_end",
        "spr_bg_5_country_highgrass_loop1",
        "spr_bg_5_country_highgrass_loop2",
        "spr_bg_5_country_highgrass_loop3_test",
        "spr_bg_5_country_highgrass_start",
        "spr_bg_5_country_lowgrass_end",
        "spr_bg_5_country_lowgrass_loop1_test",
        "spr_bg_5_country_lowgrass_loop1",
        "spr_bg_5_country_lowgrass_loop2_test",
        "spr_bg_5_country_lowgrass_loop2",
        "spr_bg_5_country_lowgrass_start",
        "spr_bg_5_country_poppygrass_end",
        "spr_bg_5_country_poppygrass_loop1",
        "spr_bg_5_country_poppygrass_loop2",
        "spr_bg_5_country_poppygrass_start",
        "spr_bg_5_country_yellowgrass_end",
        "spr_bg_5_country_yellowgrass_loop1",
        "spr_bg_5_country_yellowgrass_loop2",
        "spr_bg_5_country_yellowgrass_start",
        "spr_bg_5_darkTallGreen_1_farBG",
        "spr_bg_5_darkTallGreen_2_farBG",
        "spr_bg_5_darkTallGreen_3_farBG",
        "spr_bg_5_desert_ground_begin",
        "spr_bg_5_festival_campers",
        "spr_bg_5_foliage_bush_1a",
        "spr_bg_5_foliage_bush_1b",
        "spr_bg_5_foliage_bush_2a",
        "spr_bg_5_foliage_bush_3a",
        "spr_bg_5_foliage_bush_3b",
        "spr_bg_5_foliage_desert_cactus_1a",
        "spr_bg_5_foliage_desert_cactus_1b",
        "spr_bg_5_foliage_desert_cactus_2a",
        "spr_bg_5_foliage_desert_cactus_2b",
        "spr_bg_5_foliage_desert_cactus_2c",
        "spr_bg_5_foliage_desert_cactus_2d",
        "spr_bg_5_foliage_desert_cactus_2e",
        "spr_bg_5_foliage_desert_cactus_3a",
        "spr_bg_5_foliage_desert_cactus_3b",
        "spr_bg_5_foliage_desert_deadbush_1",
        "spr_bg_5_foliage_desert_deadbush_2",
        "spr_bg_5_foliage_rock_big_1",
        "spr_bg_5_foliage_rock_big_2",
        "spr_bg_5_foliage_rock_medium_1",
        "spr_bg_5_foliage_rock_medium_2",
        "spr_bg_5_foliage_rock_medium_3",
        "spr_bg_5_foliage_rock_small_1a",
        "spr_bg_5_foliage_rock_small_1b",
        "spr_bg_5_foliage_rock_small_1c",
        "spr_bg_5_foliage_rock_small_1d",
        "spr_bg_5_foliage_rock_small_1e",
        "spr_bg_5_foliage_weed_1a",
        "spr_bg_5_foliage_weed_1b",
        "spr_bg_5_foliage_weed_1c",
        "spr_bg_5_foliage_weed_2a",
        "spr_bg_5_foliage_weed_2b",
        "spr_bg_5_foliage_weed_2c",
        "spr_bg_5_foliage_weed_3a",
        "spr_bg_5_foliage_weed_3b",
        "spr_bg_5_foliage_weed_3c",
        "spr_bg_5_forestfloor_earthy_end",
        "spr_bg_5_forestfloor_earthy_loop_1",
        "spr_bg_5_forestfloor_earthy_start",
        "spr_bg_5_forestfloor_mossy_end",
        "spr_bg_5_forestfloor_mossy_loop_1",
        "spr_bg_5_forestfloor_mossy_loop_2",
        "spr_bg_5_forestfloor_mossy_start",
        "spr_bg_5_general_mist_haze",
        "spr_bg_5_grassland_ground_green_1",
        "spr_bg_5_grassland_ground_green_2",
        "spr_bg_5_grassland_ground_green_3",
        "spr_bg_5_grassland_ground_green_4",
        "spr_bg_5_grassland_ground_green_5",
        "spr_bg_5_grassland_ground_green_begin",
        "spr_bg_5_ground_brown_undergrowth_1",
        "spr_bg_5_ground_brown_undergrowth_2",
        "spr_bg_5_ground_brown_undergrowth_begin",
        "spr_bg_5_ground_brown_undergrowth_end",
        "spr_bg_5_ground_desert_1a",
        "spr_bg_5_ground_desert_1b",
        "spr_bg_5_ground_desert_1c",
        "spr_bg_5_ground_desert_1d",
        "spr_bg_5_ground_desert_1e",
        "spr_bg_5_ground_desert_1f",
        "spr_bg_5_ground_desert_1g",
        "spr_bg_5_ground_desert_end",
        "spr_bg_5_ground_desert_loop1",
        "spr_bg_5_ground_desert_loop2",
        "spr_bg_5_ground_desert_start",
        "spr_bg_5_leaningTree_1_farBG",
        "spr_bg_5_leaningTree_2_farBG",
        "spr_bg_5_leaningTree_3_farBG",
        "spr_bg_5_mediumBirch_1_farBG",
        "spr_bg_5_mediumBirch_2_farBG",
        "spr_bg_5_mediumBirch_3_farBG",
        "spr_bg_5_mediumBirch_4_farBG",
        "spr_bg_5_mediumBirch_5_farBG",
        "spr_bg_5_mediumGreen_1_farBG",
        "spr_bg_5_mediumGreen_2_farBG",
        "spr_bg_5_mediumGreen_3_farBG",
        "spr_bg_5_mediumGreen_4_farBG",
        "spr_bg_5_paleGreen_1_farBG",
        "spr_bg_5_paleGreen_2_farBG",
        "spr_bg_5_paleGreen_3_farBG",
        "spr_bg_5_paleShort_1_farBG",
        "spr_bg_5_paleShort_2_farBG",
        "spr_bg_5_pear_1_farBG",
        "spr_bg_5_pear_2_farBG",
        "spr_bg_5_pine_1a",
        "spr_bg_5_pine_1b",
        "spr_bg_5_pine_1c",
        "spr_bg_5_pine_2a",
        "spr_bg_5_pine_2b",
        "spr_bg_5_pine_2c",
        "spr_bg_5_pine_3a",
        "spr_bg_5_pine_3b",
        "spr_bg_5_pine_3c",
        "spr_bg_5_pine_4a",
        "spr_bg_5_pine_4b",
        "spr_bg_5_pine_4c",
        "spr_bg_5_pine_5a",
        "spr_bg_5_pine_5b",
        "spr_bg_5_pine_6a",
        "spr_bg_5_pine_6b",
        "spr_bg_5_pine_6c",
        "spr_bg_5_pine_6d",
        "spr_bg_5_pine_6e",
        "spr_bg_5_pine_6f",
        "spr_bg_5_pine_redwood_1",
        "spr_bg_5_pine_redwood_2",
        "spr_bg_5_pine_redwood_3",
        "spr_bg_5_redLeaf_1_farBG",
        "spr_bg_5_redLeaf_2_farBG",
        "spr_bg_5_redLeaf_butGreen_3_farBG",
        "spr_bg_5_rural_lavender_end",
        "spr_bg_5_rural_lavender_loop1",
        "spr_bg_5_rural_lavender_loop2",
        "spr_bg_5_rural_lavender_start",
        "spr_bg_5_rural_raps_end",
        "spr_bg_5_rural_raps_loop1",
        "spr_bg_5_rural_raps_loop2",
        "spr_bg_5_rural_raps_start",
        "spr_bg_5_rural_sunflower_end",
        "spr_bg_5_rural_sunflower_loop1",
        "spr_bg_5_rural_sunflower_loop2",
        "spr_bg_5_rural_sunflower_start",
        "spr_bg_5_rural_wheat_end",
        "spr_bg_5_rural_wheat_loop1",
        "spr_bg_5_rural_wheat_loop2",
        "spr_bg_5_rural_wheat_start",
        "spr_bg_5_shortGreen_1_farBG",
        "spr_bg_5_shortGreen_2_farBG",
        "spr_bg_5_spr_bg_5_apple_1_farBG",
        "spr_bg_5_tallBirch_1_farBG",
        "spr_bg_5_tallBirch_2_farBG",
        "spr_bg_5_tallBirch_3_farBG",
        "spr_bg_5_tallBirch_4_farBG",
        "spr_bg_5_tallGreen_1_farBG",
        "spr_bg_5_tallGreen_2_farBG",
        "spr_bg_5_tallGreen_3_farBG",
        "spr_bg_5_tallGreen_4_farBG",
        "spr_bg_5_town_country_3_0",
        "spr_bg_5_town_country_3_1",
        "spr_bg_5_town_country_3_10",
        "spr_bg_5_town_country_3_11",
        "spr_bg_5_town_country_3_12",
        "spr_bg_5_town_country_3_13",
        "spr_bg_5_town_country_3_14",
        "spr_bg_5_town_country_3_2",
        "spr_bg_5_town_country_3_3",
        "spr_bg_5_town_country_3_4",
        "spr_bg_5_town_country_3_5",
        "spr_bg_5_town_country_3_6",
        "spr_bg_5_town_country_3_7",
        "spr_bg_5_town_country_3_8",
        "spr_bg_5_town_country_3_9",
        "spr_bg_5_tree_apple_1a",
        "spr_bg_5_tree_apple_1b",
        "spr_bg_5_tree_big_1a",
        "spr_bg_5_tree_birch_1a",
        "spr_bg_5_tree_birch_1b",
        "spr_bg_5_tree_birch_1c",
        "spr_bg_5_tree_birch_2a",
        "spr_bg_5_tree_birch_2b",
        "spr_bg_5_tree_pale_1",
        "spr_bg_5_tree_small_1",
        "spr_bg_5_tree_small_2",
        "spr_bg_5_tree_small_3",
        "spr_bg_5_tree_tall_1a",
        "spr_bg_5_tree_tall_1b",
        "spr_bg_5_tree_tall_2a",
        "spr_bg_5_tree_tall_2b",
        "spr_bg_5_tree_tall_2c",
        "spr_bg_5_tree_tall_3a",
        "spr_bg_6_7__mist_lowopacity",
        "spr_bg_6_bushes_1",
        "spr_bg_6_bushes_2",
        "spr_bg_6_bushes_3",
        "spr_bg_6_bushes_4",
        "spr_bg_6_bushes_5",
        "spr_bg_6_bushes_6",
        "spr_bg_6_bushes_7",
        "spr_bg_6_bushes_big_1",
        "spr_bg_6_bushes_big_2",
        "spr_bg_6_bushes_big_3",
        "spr_bg_6_bushes_big_4",
        "spr_bg_6_bushes_big_5",
        "spr_bg_6_bushes_big_6",
        "spr_bg_6_bushes_big_7",
        "spr_bg_6_bushes_big_8",
        "spr_bg_6_country_highgrass_end",
        "spr_bg_6_country_highgrass_loop1",
        "spr_bg_6_country_highgrass_loop2",
        "spr_bg_6_country_highgrass_loop3",
        "spr_bg_6_country_highgrass_start",
        "spr_bg_6_country_lowgrass_end_camping",
        "spr_bg_6_country_lowgrass_end",
        "spr_bg_6_country_lowgrass_loop1_floweroverlay_test",
        "spr_bg_6_country_lowgrass_loop1",
        "spr_bg_6_country_lowgrass_loop2_floweroverlay_test",
        "spr_bg_6_country_lowgrass_loop2",
        "spr_bg_6_country_lowgrass_loop3_floweroverlay_test",
        "spr_bg_6_country_lowgrass_loop3",
        "spr_bg_6_country_lowgrass_start_camping",
        "spr_bg_6_country_lowgrass_start",
        "spr_bg_6_country_poppygrass_end",
        "spr_bg_6_country_poppygrass_loop1",
        "spr_bg_6_country_poppygrass_loop2",
        "spr_bg_6_country_poppygrass_loop3",
        "spr_bg_6_country_poppygrass_start",
        "spr_bg_6_country_yellowgrass_end",
        "spr_bg_6_country_yellowgrass_loop1",
        "spr_bg_6_country_yellowgrass_loop2",
        "spr_bg_6_country_yellowgrass_loop3",
        "spr_bg_6_country_yellowgrass_start",
        "spr_bg_6_desert_ground_loop_1",
        "spr_bg_6_desert_ground_loop_2",
        "spr_bg_6_desert_ground_loop_3",
        "spr_bg_6_desert_ground_loop_end",
        "spr_bg_6_desert_ground_loop_start",
        "spr_bg_6_ending_race_bleachers",
        "spr_bg_6_festival_camp_tents",
        "spr_bg_6_festival_rv_campers",
        "spr_bg_6_foliage_desert_bush_1a",
        "spr_bg_6_foliage_desert_bush_1b",
        "spr_bg_6_foliage_desert_bush_1c",
        "spr_bg_6_foliage_desert_bush_2a",
        "spr_bg_6_foliage_desert_bush_2b",
        "spr_bg_6_foliage_desert_bush_2c",
        "spr_bg_6_foliage_desert_bush_3",
        "spr_bg_6_foliage_desert_cactus_1a",
        "spr_bg_6_foliage_desert_cactus_1b",
        "spr_bg_6_foliage_desert_cactus_1c",
        "spr_bg_6_foliage_desert_cactus_2a",
        "spr_bg_6_foliage_desert_cactus_2b",
        "spr_bg_6_foliage_desert_cactus_2c",
        "spr_bg_6_foliage_desert_cactus_2d",
        "spr_bg_6_foliage_desert_cactus_2e",
        "spr_bg_6_foliage_desert_rocks_big_1",
        "spr_bg_6_foliage_desert_rocks_big_2",
        "spr_bg_6_foliage_desert_rocks_big_3",
        "spr_bg_6_foliage_desert_rocks_big_4",
        "spr_bg_6_foliage_desert_rocks_big_5",
        "spr_bg_6_foliage_desert_rocks_medium_1",
        "spr_bg_6_foliage_desert_rocks_medium_2",
        "spr_bg_6_foliage_desert_rocks_medium_3",
        "spr_bg_6_foliage_desert_rocks_medium_4",
        "spr_bg_6_foliage_desert_rocks_small_1",
        "spr_bg_6_foliage_desert_rocks_small_2",
        "spr_bg_6_foliage_desert_rocks_small_3",
        "spr_bg_6_foliage_desert_shrub_1a",
        "spr_bg_6_foliage_desert_shrub_1b",
        "spr_bg_6_foliage_desert_shrub_1c",
        "spr_bg_6_foliage_desert_shrub_1d",
        "spr_bg_6_foliage_desert_shrub_1e",
        "spr_bg_6_foliage_desert_weed_1a",
        "spr_bg_6_foliage_desert_weed_1b",
        "spr_bg_6_foliage_desert_weed_1c",
        "spr_bg_6_foliage_desert_weed_1d",
        "spr_bg_6_foliage_desert_weed_2a",
        "spr_bg_6_foliage_desert_weed_2b",
        "spr_bg_6_foliage_desert_weed_2c",
        "spr_bg_6_foliage_desert_weed_3a",
        "spr_bg_6_foliage_desert_weed_3b",
        "spr_bg_6_foliage_desert_weed_3c",
        "spr_bg_6_foliage_desert_weed_3d",
        "spr_bg_6_forestfloor_earthly_end",
        "spr_bg_6_forestfloor_earthly_loop_1",
        "spr_bg_6_forestfloor_earthly_loop_2",
        "spr_bg_6_forestfloor_earthly_start",
        "spr_bg_6_forestfloor_grassy_end",
        "spr_bg_6_forestfloor_grassy_loop_1",
        "spr_bg_6_forestfloor_grassy_start",
        "spr_bg_6_forestfloor_mossy_end",
        "spr_bg_6_forestfloor_mossy_loop_1",
        "spr_bg_6_forestfloor_mossy_loop_2",
        "spr_bg_6_forestfloor_mossy_loop_3",
        "spr_bg_6_forestfloor_mossy_start",
        "spr_bg_6_general_mist_haze",
        "spr_bg_6_general_mist_loop",
        "spr_bg_6_grassland_ground_green_1",
        "spr_bg_6_grassland_ground_green_12549",
        "spr_bg_6_grassland_ground_green_2",
        "spr_bg_6_grassland_ground_green_22550",
        "spr_bg_6_grassland_ground_green_3",
        "spr_bg_6_grassland_ground_green_32551",
        "spr_bg_6_grassland_ground_green_4",
        "spr_bg_6_grassland_ground_green_42552",
        "spr_bg_6_grassland_ground_green_5",
        "spr_bg_6_grassland_ground_green_52553",
        "spr_bg_6_grassland_ground_green_begin",
        "spr_bg_6_grassland_ground_yellow_1",
        "spr_bg_6_grassland_ground_yellow_12554",
        "spr_bg_6_grassland_ground_yellow_2",
        "spr_bg_6_grassland_ground_yellow_22555",
        "spr_bg_6_grassland_ground_yellow_3",
        "spr_bg_6_grassland_ground_yellow_32556",
        "spr_bg_6_grassland_ground_yellow_4",
        "spr_bg_6_grassland_ground_yellow_42557",
        "spr_bg_6_grassland_ground_yellow_5",
        "spr_bg_6_grassland_ground_yellow_52558",
        "spr_bg_6_grassland_ground_yellow_begin",
        "spr_bg_6_ground_brown_undergrowth_1",
        "spr_bg_6_ground_brown_undergrowth_2",
        "spr_bg_6_ground_brown_undergrowth_3",
        "spr_bg_6_ground_brown_undergrowth_4",
        "spr_bg_6_ground_brown_undergrowth_5",
        "spr_bg_6_ground_brown_undergrowth_begin_old",
        "spr_bg_6_ground_brown_undergrowth_begin",
        "spr_bg_6_ground_brown_undergrowth_end",
        "spr_bg_6_pine_huge_redwood_1a",
        "spr_bg_6_pine_huge_redwood_1b",
        "spr_bg_6_pine_huge_redwood_1c",
        "spr_bg_6_pine_short_1a",
        "spr_bg_6_pine_short_1b",
        "spr_bg_6_pine_short_1c",
        "spr_bg_6_pine_short_2a",
        "spr_bg_6_pine_spruce_1a",
        "spr_bg_6_pine_spruce_1b",
        "spr_bg_6_pine_spruce_1c",
        "spr_bg_6_pine_tall_1a",
        "spr_bg_6_pine_tall_1b",
        "spr_bg_6_pine_tall_1c",
        "spr_bg_6_pine_tall_2a",
        "spr_bg_6_pine_tall_2b",
        "spr_bg_6_pine_tall_2c",
        "spr_bg_6_pine_tall_thin_1a",
        "spr_bg_6_pine_tall_thin_1b",
        "spr_bg_6_pine_tall_thin_1c",
        "spr_bg_6_pine_tall_thin_2a",
        "spr_bg_6_pine_tall_thin_2b",
        "spr_bg_6_pine_tall_thin_2c",
        "spr_bg_6_pine_tall_thin_3a",
        "spr_bg_6_pine_tall_thin_3b",
        "spr_bg_6_pine_tall_thin_3c",
        "spr_bg_6_rural_lavender_end",
        "spr_bg_6_rural_lavender_loop1",
        "spr_bg_6_rural_lavender_loop2",
        "spr_bg_6_rural_lavender_start",
        "spr_bg_6_rural_raps_end",
        "spr_bg_6_rural_raps_loop1",
        "spr_bg_6_rural_raps_loop2",
        "spr_bg_6_rural_raps_start",
        "spr_bg_6_rural_sunflower_end",
        "spr_bg_6_rural_sunflower_loop1",
        "spr_bg_6_rural_sunflower_loop2",
        "spr_bg_6_rural_sunflower_start",
        "spr_bg_6_rural_wheat_end",
        "spr_bg_6_rural_wheat_loop1",
        "spr_bg_6_rural_wheat_loop2",
        "spr_bg_6_rural_wheat_start",
        "spr_bg_6_tc_ground_test_2_begin",
        "spr_bg_6_tc_ground_test_2",
        "spr_bg_6_town_country_2_0",
        "spr_bg_6_town_country_2_1",
        "spr_bg_6_town_country_2_10",
        "spr_bg_6_town_country_2_11",
        "spr_bg_6_town_country_2_12",
        "spr_bg_6_town_country_2_13",
        "spr_bg_6_town_country_2_14",
        "spr_bg_6_town_country_2_15",
        "spr_bg_6_town_country_2_16",
        "spr_bg_6_town_country_2_17",
        "spr_bg_6_town_country_2_2",
        "spr_bg_6_town_country_2_3",
        "spr_bg_6_town_country_2_4",
        "spr_bg_6_town_country_2_5",
        "spr_bg_6_town_country_2_6",
        "spr_bg_6_town_country_2_7",
        "spr_bg_6_town_country_2_8",
        "spr_bg_6_town_country_2_9",
        "spr_bg_6_town_country_ground_begin",
        "spr_bg_6_town_country_ground",
        "spr_bg_6_tree_apple_1a",
        "spr_bg_6_tree_apple_1b",
        "spr_bg_6_tree_apple_1c",
        "spr_bg_6_tree_apple_2a",
        "spr_bg_6_tree_apple_2b",
        "spr_bg_6_tree_big_walnut_1a",
        "spr_bg_6_tree_big_walnut_2",
        "spr_bg_6_tree_green_leaning_1a",
        "spr_bg_6_tree_green_leaning_1b",
        "spr_bg_6_tree_green_leaning_1c",
        "spr_bg_6_tree_huge_oak_1a",
        "spr_bg_6_tree_huge_oak_1a3550",
        "spr_bg_6_tree_huge_oak_1b",
        "spr_bg_6_tree_huge_oak_2a",
        "spr_bg_6_tree_huge_oak_2a3551",
        "spr_bg_6_tree_huge_oak_2b",
        "spr_bg_6_tree_huge_oak_2c",
        "spr_bg_6_tree_huge_oak_3a",
        "spr_bg_6_tree_huge_oak_4a",
        "spr_bg_6_tree_huge_oak_6",
        "spr_bg_6_tree_orange_1a",
        "spr_bg_6_tree_orange_1b",
        "spr_bg_6_tree_short_beech_1a",
        "spr_bg_6_tree_short_beech_1a3520",
        "spr_bg_6_tree_short_beech_1b",
        "spr_bg_6_tree_short_beech_2",
        "spr_bg_6_tree_short_beech_2a",
        "spr_bg_6_tree_short_fluffy_1a",
        "spr_bg_6_tree_short_fluffy_1a3526",
        "spr_bg_6_tree_short_fluffy_1b",
        "spr_bg_6_tree_short_fluffy_1b3527",
        "spr_bg_6_tree_short_pale_1",
        "spr_bg_6_tree_tall_dark_1a",
        "spr_bg_6_tree_tall_dark_1a3528",
        "spr_bg_6_tree_tall_dark_1b",
        "spr_bg_6_tree_tall_dark_1b3529",
        "spr_bg_6_tree_tall_dark_1c",
        "spr_bg_6_tree_tall_dark_2a",
        "spr_bg_6_tree_tall_dark_2a3530",
        "spr_bg_6_tree_tall_dark_2b",
        "spr_bg_6_tree_tall_dark_2b3531",
        "spr_bg_6_tree_tall_dark_3a",
        "spr_bg_6_tree_tall_dark_3b",
        "spr_bg_6_tree_tall_dark_4a",
        "spr_bg_6_tree_tall_pale_1",
        "spr_bg_6_tree_tall_pale_2",
        "spr_bg_6_tree_tall_pale_3",
        "spr_bg_6_tree_thin_birch_1a",
        "spr_bg_6_tree_thin_birch_1b",
        "spr_bg_6_tree_thin_birch_1c",
        "spr_bg_6_tree_thin_birch_1d",
        "spr_bg_6_tree_thin_birch_2a",
        "spr_bg_6_tree_thin_birch_2b",
        "spr_bg_6_tree_thin_birch_3a",
        "spr_bg_6_tree_thin_birch_3b",
        "spr_bg_6_tree_thin_brown_1a",
        "spr_bg_6_tree_thin_brown_1a3535",
        "spr_bg_6_tree_thin_brown_1b",
        "spr_bg_6_tree_thin_brown_1c",
        "spr_bg_6_tree_thin_brown_1d",
        "spr_bg_6_tree_thin_brown_1e",
        "spr_bg_6_tree_thin_brown_1f",
        "spr_bg_6_tree_thin_brown_2a",
        "spr_bg_6_tree_thin_brown_2b",
        "spr_bg_6_tree_thin_white_1a",
        "spr_bg_6_tree_thin_white_1b",
        "spr_bg_6_tree_thin_white_1c",
        "spr_bg_6_tree_thin_white_1d",
        "spr_bg_6_tree_thin_white_1e",
        "spr_bg_6_tree_thin_white_1f",
        "spr_bg_7_bushes_big_1",
        "spr_bg_7_bushes_big_10",
        "spr_bg_7_bushes_big_11",
        "spr_bg_7_bushes_big_2",
        "spr_bg_7_bushes_big_3",
        "spr_bg_7_bushes_big_4",
        "spr_bg_7_bushes_big_5",
        "spr_bg_7_bushes_big_6",
        "spr_bg_7_bushes_big_7",
        "spr_bg_7_bushes_big_8",
        "spr_bg_7_bushes_big_9",
        "spr_bg_7_bushes_small_1",
        "spr_bg_7_bushes_small_10",
        "spr_bg_7_bushes_small_11",
        "spr_bg_7_bushes_small_12",
        "spr_bg_7_bushes_small_2",
        "spr_bg_7_bushes_small_3",
        "spr_bg_7_bushes_small_4",
        "spr_bg_7_bushes_small_5",
        "spr_bg_7_bushes_small_6",
        "spr_bg_7_bushes_small_7",
        "spr_bg_7_bushes_small_8",
        "spr_bg_7_bushes_small_9",
        "spr_bg_7_country_highgrass_end",
        "spr_bg_7_country_highgrass_loop1",
        "spr_bg_7_country_highgrass_loop2",
        "spr_bg_7_country_highgrass_loop3",
        "spr_bg_7_country_highgrass_loop4",
        "spr_bg_7_country_highgrass_start",
        "spr_bg_7_country_lowgrass_end",
        "spr_bg_7_country_lowgrass_loop1",
        "spr_bg_7_country_lowgrass_loop2",
        "spr_bg_7_country_lowgrass_start",
        "spr_bg_7_country_poppygrass_end",
        "spr_bg_7_country_poppygrass_loop1",
        "spr_bg_7_country_poppygrass_loop2",
        "spr_bg_7_country_poppygrass_start",
        "spr_bg_7_desert_ground_loop_1",
        "spr_bg_7_desert_ground_loop_2",
        "spr_bg_7_desert_ground_loop_3",
        "spr_bg_7_desert_ground_loop_end",
        "spr_bg_7_desert_ground_loop_start",
        "spr_bg_7_destination_road_campingground_hill",
        "spr_bg_7_destination_road_campingground_reception_anime",
        "spr_bg_7_ending_hospital_grandma_idle",
        "spr_bg_7_ending_hospital_grandma_raining",
        "spr_bg_7_ending_hospital_light",
        "spr_bg_7_ending_hospital_nighttime",
        "spr_bg_7_ending_hospital_withpeople_V2",
        "spr_bg_7_festival_bg_fence_posters",
        "spr_bg_7_festival_bg_fence",
        "spr_bg_7_festival_bg_icecream",
        "spr_bg_7_festival_bg_truck",
        "spr_bg_7_festival_bg_woe_sign_bg",
        "spr_bg_7_festival_bg_woe_sign_foreground",
        "spr_bg_7_foliage_desert_bush_1a",
        "spr_bg_7_foliage_desert_bush_1b",
        "spr_bg_7_foliage_desert_bush_2a",
        "spr_bg_7_foliage_desert_cactus_1a",
        "spr_bg_7_foliage_desert_cactus_1b",
        "spr_bg_7_foliage_desert_cactus_1c",
        "spr_bg_7_foliage_desert_cactus_2a",
        "spr_bg_7_foliage_desert_cactus_2b",
        "spr_bg_7_foliage_desert_cactus_2c",
        "spr_bg_7_foliage_desert_cactus_2d",
        "spr_bg_7_foliage_desert_cactus_2e",
        "spr_bg_7_foliage_desert_cactus_3a",
        "spr_bg_7_foliage_desert_cactus_3b",
        "spr_bg_7_foliage_desert_drybush_1a",
        "spr_bg_7_foliage_desert_drybush_1b",
        "spr_bg_7_foliage_desert_drybush_2a",
        "spr_bg_7_foliage_desert_drybush_3",
        "spr_bg_7_foliage_desert_grass_1a",
        "spr_bg_7_foliage_desert_grass_1b",
        "spr_bg_7_foliage_desert_grass_1c",
        "spr_bg_7_foliage_desert_grass_2a",
        "spr_bg_7_foliage_desert_grass_2b",
        "spr_bg_7_foliage_desert_grass_2c",
        "spr_bg_7_foliage_desert_rock_big_1",
        "spr_bg_7_foliage_desert_rock_big_2",
        "spr_bg_7_foliage_desert_rock_big_3",
        "spr_bg_7_foliage_desert_rock_big_4",
        "spr_bg_7_foliage_desert_rock_big_5",
        "spr_bg_7_foliage_desert_rock_medium_1",
        "spr_bg_7_foliage_desert_rock_medium_2",
        "spr_bg_7_foliage_desert_rock_medium_3",
        "spr_bg_7_foliage_desert_rock_medium_4",
        "spr_bg_7_foliage_desert_rock_small_1",
        "spr_bg_7_foliage_desert_rock_small_2",
        "spr_bg_7_foliage_desert_rock_small_3",
        "spr_bg_7_foliage_desert_rock_tiny_1",
        "spr_bg_7_foliage_desert_rock_tiny_2",
        "spr_bg_7_foliage_desert_rock_tiny_3",
        "spr_bg_7_foliage_desert_rock_tiny_4",
        "spr_bg_7_foliage_desert_rock_tiny_5",
        "spr_bg_7_foliage_desert_rock_tiny_6",
        "spr_bg_7_foliage_desert_rock_tiny_7",
        "spr_bg_7_foliage_desert_shrub_1a",
        "spr_bg_7_foliage_desert_shrub_1b",
        "spr_bg_7_foliage_desert_shrub_2a",
        "spr_bg_7_foliage_desert_sticks_1",
        "spr_bg_7_foliage_desert_sticks_2",
        "spr_bg_7_foliage_desert_sticks_3",
        "spr_bg_7_foliage_desert_sticks_4",
        "spr_bg_7_foliage_desert_sticks_5",
        "spr_bg_7_foliage_desert_tree_1",
        "spr_bg_7_foliage_desert_weeds_big_1",
        "spr_bg_7_foliage_desert_weeds_big_2",
        "spr_bg_7_foliage_desert_weeds_big_3",
        "spr_bg_7_foliage_desert_weeds_green_1",
        "spr_bg_7_foliage_desert_weeds_green_2",
        "spr_bg_7_foliage_desert_weeds_green_3",
        "spr_bg_7_foliage_desert_weeds_green_4",
        "spr_bg_7_foliage_desert_weeds_green_5",
        "spr_bg_7_foliage_desert_weeds_yellow_1",
        "spr_bg_7_foliage_desert_weeds_yellow_2",
        "spr_bg_7_foliage_desert_weeds_yellow_3",
        "spr_bg_7_foliage_desert_weeds_yellow_4",
        "spr_bg_7_foliage_desert_weeds_yellow_5",
        "spr_bg_7_foliage_desert_weeds_yellow_6",
        "spr_bg_7_foliage_desert_weeds_yellow_7",
        "spr_bg_7_foliage_desert_weeds_yellow_8",
        "spr_bg_7_foliage_forest_berrybush_1",
        "spr_bg_7_foliage_forest_berrybush_2",
        "spr_bg_7_foliage_forest_berrybush_3",
        "spr_bg_7_foliage_forest_berrybush_4",
        "spr_bg_7_foliage_forest_berrybush_big",
        "spr_bg_7_foliage_forest_bush_1",
        "spr_bg_7_foliage_forest_bush_2",
        "spr_bg_7_foliage_forest_bush_3",
        "spr_bg_7_foliage_forest_bush_bigleaf_1",
        "spr_bg_7_foliage_forest_bush_bigleaf_2",
        "spr_bg_7_foliage_forest_bush_bigleaf_3",
        "spr_bg_7_foliage_forest_bush_dark_1",
        "spr_bg_7_foliage_forest_bush_dark_2",
        "spr_bg_7_foliage_forest_bush_flower_1",
        "spr_bg_7_foliage_forest_bush_single_1a",
        "spr_bg_7_foliage_forest_bush_single_1b",
        "spr_bg_7_foliage_forest_bush_single_2a",
        "spr_bg_7_foliage_forest_bush_single_2b",
        "spr_bg_7_foliage_forest_bush_single_3a",
        "spr_bg_7_foliage_forest_bush_single_3b",
        "spr_bg_7_foliage_forest_bush_single_tall_1a",
        "spr_bg_7_foliage_forest_bush_single_tall_1b",
        "spr_bg_7_foliage_forest_bush_single_tall_2",
        "spr_bg_7_foliage_forest_bush_small_1",
        "spr_bg_7_foliage_forest_bush_small_2",
        "spr_bg_7_foliage_forest_bush_small_3",
        "spr_bg_7_foliage_forest_clover_1a",
        "spr_bg_7_foliage_forest_clover_1b",
        "spr_bg_7_foliage_forest_clover_1c",
        "spr_bg_7_foliage_forest_deadbush_1",
        "spr_bg_7_foliage_forest_deadbush_2",
        "spr_bg_7_foliage_forest_deadbush_3a",
        "spr_bg_7_foliage_forest_deadbush_3b",
        "spr_bg_7_foliage_forest_deadsapling_1a",
        "spr_bg_7_foliage_forest_deadsapling_1b",
        "spr_bg_7_foliage_forest_fern_1a",
        "spr_bg_7_foliage_forest_fern_1b",
        "spr_bg_7_foliage_forest_fern_2a",
        "spr_bg_7_foliage_forest_fern_2b",
        "spr_bg_7_foliage_forest_fern_3",
        "spr_bg_7_foliage_forest_fern_4",
        "spr_bg_7_foliage_forest_fern_5",
        "spr_bg_7_foliage_forest_fern_6",
        "spr_bg_7_foliage_forest_fern_chunk_1",
        "spr_bg_7_foliage_forest_fern_chunk_2",
        "spr_bg_7_foliage_forest_fern_chunk_3",
        "spr_bg_7_foliage_forest_flower_bush_1a",
        "spr_bg_7_foliage_forest_flower_bush_1b",
        "spr_bg_7_foliage_forest_flower_common_1a",
        "spr_bg_7_foliage_forest_flower_common_1b",
        "spr_bg_7_foliage_forest_flower_common_1c",
        "spr_bg_7_foliage_forest_flower_common_1d",
        "spr_bg_7_foliage_forest_flower_dryred",
        "spr_bg_7_foliage_forest_flower_lavender_1a",
        "spr_bg_7_foliage_forest_flower_lavender_1b",
        "spr_bg_7_foliage_forest_flower_lavender_1c",
        "spr_bg_7_foliage_forest_flower_redstems_1a",
        "spr_bg_7_foliage_forest_flower_redstems_1b",
        "spr_bg_7_foliage_forest_flower_short_blue_1",
        "spr_bg_7_foliage_forest_flower_short_blue_2",
        "spr_bg_7_foliage_forest_flower_short_red_1",
        "spr_bg_7_foliage_forest_flower_short_white_1",
        "spr_bg_7_foliage_forest_flower_short_white_2",
        "spr_bg_7_foliage_forest_flower_short_yellow_1",
        "spr_bg_7_foliage_forest_flower_short_yellow_1531",
        "spr_bg_7_foliage_forest_flower_white_tall_1",
        "spr_bg_7_foliage_forest_flower_white_tall_2",
        "spr_bg_7_foliage_forest_flower_whitefew",
        "spr_bg_7_foliage_forest_flower_yellowbed",
        "spr_bg_7_foliage_forest_grass_1",
        "spr_bg_7_foliage_forest_grass_2a",
        "spr_bg_7_foliage_forest_grass_2b",
        "spr_bg_7_foliage_forest_grass_3",
        "spr_bg_7_foliage_forest_grass_4",
        "spr_bg_7_foliage_forest_grass_ivy_1a",
        "spr_bg_7_foliage_forest_grass_ivy_1b",
        "spr_bg_7_foliage_forest_grass_leaves_1a",
        "spr_bg_7_foliage_forest_grass_leaves_1b",
        "spr_bg_7_foliage_forest_log_1a",
        "spr_bg_7_foliage_forest_log_1b",
        "spr_bg_7_foliage_forest_log_2a",
        "spr_bg_7_foliage_forest_log_2b",
        "spr_bg_7_foliage_forest_lushtree_1a",
        "spr_bg_7_foliage_forest_lushtree_1b",
        "spr_bg_7_foliage_forest_moss_big_1",
        "spr_bg_7_foliage_forest_moss_big_2",
        "spr_bg_7_foliage_forest_moss_big_3",
        "spr_bg_7_foliage_forest_moss_big_4",
        "spr_bg_7_foliage_forest_moss_medium_1",
        "spr_bg_7_foliage_forest_moss_medium_2",
        "spr_bg_7_foliage_forest_moss_medium_3",
        "spr_bg_7_foliage_forest_moss_medium_4",
        "spr_bg_7_foliage_forest_moss_small_1a",
        "spr_bg_7_foliage_forest_moss_small_1b",
        "spr_bg_7_foliage_forest_moss_small_2a",
        "spr_bg_7_foliage_forest_moss_small_2b",
        "spr_bg_7_foliage_forest_moss_small_2c",
        "spr_bg_7_foliage_forest_moss_small_3",
        "spr_bg_7_foliage_forest_moss_tiny_1a",
        "spr_bg_7_foliage_forest_moss_tiny_1b",
        "spr_bg_7_foliage_forest_rock_big_1",
        "spr_bg_7_foliage_forest_rock_big_2",
        "spr_bg_7_foliage_forest_rock_big_3",
        "spr_bg_7_foliage_forest_rock_big_4",
        "spr_bg_7_foliage_forest_rock_huge_1",
        "spr_bg_7_foliage_forest_rock_medium_1",
        "spr_bg_7_foliage_forest_rock_medium_2",
        "spr_bg_7_foliage_forest_rock_medium_3",
        "spr_bg_7_foliage_forest_rock_medium_4",
        "spr_bg_7_foliage_forest_rock_small_1",
        "spr_bg_7_foliage_forest_rock_small_2",
        "spr_bg_7_foliage_forest_rock_small_3",
        "spr_bg_7_foliage_forest_rock_tiny_1a",
        "spr_bg_7_foliage_forest_rock_tiny_1b",
        "spr_bg_7_foliage_forest_rock_tiny_2a",
        "spr_bg_7_foliage_forest_rock_tiny_2b",
        "spr_bg_7_foliage_forest_rock_tiny_3a",
        "spr_bg_7_foliage_forest_rock_tiny_3b",
        "spr_bg_7_foliage_forest_rock_tiny_4a",
        "spr_bg_7_foliage_forest_rock_tiny_4b",
        "spr_bg_7_foliage_forest_rock_tiny_5a",
        "spr_bg_7_foliage_forest_rock_tiny_5b",
        "spr_bg_7_foliage_forest_sapling_1a",
        "spr_bg_7_foliage_forest_sapling_1b",
        "spr_bg_7_foliage_forest_sapling_1c",
        "spr_bg_7_foliage_forest_shroom_brown_1a",
        "spr_bg_7_foliage_forest_shroom_brown_1b",
        "spr_bg_7_foliage_forest_shroom_chant_1",
        "spr_bg_7_foliage_forest_shroom_chant_2",
        "spr_bg_7_foliage_forest_shroom_chant_3",
        "spr_bg_7_foliage_forest_shroom_chunk_1",
        "spr_bg_7_foliage_forest_shroom_chunk_2",
        "spr_bg_7_foliage_forest_shroom_chunk_3",
        "spr_bg_7_foliage_forest_shroom_chunk_4",
        "spr_bg_7_foliage_forest_shroom_flat_1a",
        "spr_bg_7_foliage_forest_shroom_flat_1b",
        "spr_bg_7_foliage_forest_shroom_flat_2",
        "spr_bg_7_foliage_forest_shroom_flyagaric_1a",
        "spr_bg_7_foliage_forest_shroom_flyagaric_1b",
        "spr_bg_7_foliage_forest_shroom_flyagaric_2a",
        "spr_bg_7_foliage_forest_shroom_flyagaric_2b",
        "spr_bg_7_foliage_forest_shroom_green_1a",
        "spr_bg_7_foliage_forest_shroom_green_1b",
        "spr_bg_7_foliage_forest_shroom_kj_1",
        "spr_bg_7_foliage_forest_shroom_kj_2",
        "spr_bg_7_foliage_forest_shroom_kj_rotten",
        "spr_bg_7_foliage_forest_shroom_orange_1a",
        "spr_bg_7_foliage_forest_shroom_orange_1b",
        "spr_bg_7_foliage_forest_shroom_orange_2a",
        "spr_bg_7_foliage_forest_shroom_orange_2b",
        "spr_bg_7_foliage_forest_shroom_red_1",
        "spr_bg_7_foliage_forest_shroom_red_2",
        "spr_bg_7_foliage_forest_shroom_red_3",
        "spr_bg_7_foliage_forest_shroom_red_4",
        "spr_bg_7_foliage_forest_shroom_white_1",
        "spr_bg_7_foliage_forest_shroom_white_2a",
        "spr_bg_7_foliage_forest_shroom_white_2b",
        "spr_bg_7_foliage_forest_smalltree_1",
        "spr_bg_7_foliage_forest_smalltree_2",
        "spr_bg_7_foliage_forest_smalltree_pine_1a",
        "spr_bg_7_foliage_forest_smalltree_pine_1b",
        "spr_bg_7_foliage_forest_smalltree_pine_1c",
        "spr_bg_7_foliage_forest_smalltree_thin_1",
        "spr_bg_7_foliage_forest_sticks_big_1",
        "spr_bg_7_foliage_forest_sticks_big_2",
        "spr_bg_7_foliage_forest_sticks_big_3",
        "spr_bg_7_foliage_forest_sticks_medium_1",
        "spr_bg_7_foliage_forest_sticks_medium_2",
        "spr_bg_7_foliage_forest_sticks_medium_3",
        "spr_bg_7_foliage_forest_sticks_medium_4",
        "spr_bg_7_foliage_forest_sticks_small_1",
        "spr_bg_7_foliage_forest_sticks_small_2",
        "spr_bg_7_foliage_forest_sticks_small_3",
        "spr_bg_7_forestfloor_earthly_end",
        "spr_bg_7_forestfloor_earthly_loop_1",
        "spr_bg_7_forestfloor_earthly_loop_2",
        "spr_bg_7_forestfloor_earthly_loop_3",
        "spr_bg_7_forestfloor_earthly_start",
        "spr_bg_7_forestfloor_grassy_end",
        "spr_bg_7_forestfloor_grassy_loop_1",
        "spr_bg_7_forestfloor_grassy_loop_2",
        "spr_bg_7_forestfloor_grassy_start",
        "spr_bg_7_forestfloor_mossy_end",
        "spr_bg_7_forestfloor_mossy_loop_1",
        "spr_bg_7_forestfloor_mossy_loop_2",
        "spr_bg_7_forestfloor_mossy_loop_3",
        "spr_bg_7_forestfloor_mossy_start",
        "spr_bg_7_general_mist_haze",
        "spr_bg_7_general_mist_loop",
        "spr_bg_7_grass_part_0",
        "spr_bg_7_grass_part_1",
        "spr_bg_7_grass_part_2",
        "spr_bg_7_grass_part_3",
        "spr_bg_7_grass_part_4",
        "spr_bg_7_grass_part_5",
        "spr_bg_7_grass_part_6",
        "spr_bg_7_grass_part_7",
        "spr_bg_7_grass_part_8",
        "spr_bg_7_grass_part_9",
        "spr_bg_7_grass_part_begin",
        "spr_bg_7_mountain_roadside_end",
        "spr_bg_7_mountain_roadside_loop1",
        "spr_bg_7_mountain_roadside_loop2",
        "spr_bg_7_mountain_roadside_start",
        "spr_bg_7_pine_short_1a",
        "spr_bg_7_pine_short_1b",
        "spr_bg_7_pine_short_1c",
        "spr_bg_7_pine_spruce_1a",
        "spr_bg_7_pine_spruce_1b",
        "spr_bg_7_pine_spruce_1c",
        "spr_bg_7_pine_stump_1a",
        "spr_bg_7_pine_stump_1b",
        "spr_bg_7_pine_stump_1c",
        "spr_bg_7_pine_stump_1d",
        "spr_bg_7_pine_stump_1e",
        "spr_bg_7_pine_stump_1f",
        "spr_bg_7_pine_stump_1g",
        "spr_bg_7_pine_stump_1h",
        "spr_bg_7_pine_tall_1a",
        "spr_bg_7_pine_tall_1b",
        "spr_bg_7_pine_tall_1c",
        "spr_bg_7_pine_tall_2a",
        "spr_bg_7_pine_tall_2b",
        "spr_bg_7_pine_tall_2c",
        "spr_bg_7_pine_tall_thin_1a",
        "spr_bg_7_pine_tall_thin_1b",
        "spr_bg_7_pine_tall_thin_1c",
        "spr_bg_7_pine_tall_thin_2a",
        "spr_bg_7_pine_tall_thin_2b",
        "spr_bg_7_pine_tall_thin_2c",
        "spr_bg_7_prop_street_bikerack",
        "spr_bg_7_prop_street_newspaperholder_1",
        "spr_bg_7_prop_street_newspaperholder_2",
        "spr_bg_7_prop_street_newspaperholder_3",
        "spr_bg_7_prop_street_toyota_1",
        "spr_bg_7_prop_street_toyota_2",
        "spr_bg_7_prop_street_toyota_3",
        "spr_bg_7_prop_street_toyota_4",
        "spr_bg_7_prop_street_trafficcone_1",
        "spr_bg_7_prop_street_trafficcone_2",
        "spr_bg_7_prop_street_truck_1",
        "spr_bg_7_prop_street_truck_2",
        "spr_bg_7_prop_street_truck_3",
        "spr_bg_7_prop_street_truck_4",
        "spr_bg_7_prop_street_volvo_1",
        "spr_bg_7_prop_street_volvo_2",
        "spr_bg_7_prop_street_volvo_3",
        "spr_bg_7_prop_street_volvo_4",
        "spr_bg_7_prop_street_volvo_5",
        "spr_bg_7_rural_raps_end",
        "spr_bg_7_rural_raps_loop1",
        "spr_bg_7_rural_raps_loop2",
        "spr_bg_7_rural_raps_start",
        "spr_bg_7_rural_sunflower_end",
        "spr_bg_7_rural_sunflower_loop",
        "spr_bg_7_rural_sunflower_start",
        "spr_bg_7_rural_wheat_end",
        "spr_bg_7_rural_wheat_loop",
        "spr_bg_7_rural_wheat_start",
        "spr_bg_7_tree_apple_1a",
        "spr_bg_7_tree_apple_1b",
        "spr_bg_7_tree_apple_1c",
        "spr_bg_7_tree_apple_2a",
        "spr_bg_7_tree_apple_2b",
        "spr_bg_7_tree_big_sleeper",
        "spr_bg_7_tree_big_walnut_1a",
        "spr_bg_7_tree_big_walnut_1a3523",
        "spr_bg_7_tree_big_walnut_1b",
        "spr_bg_7_tree_big_walnut_2",
        "spr_bg_7_tree_big_walnut_23524",
        "spr_bg_7_tree_green_leaning_1a",
        "spr_bg_7_tree_green_leaning_1b",
        "spr_bg_7_tree_green_leaning_1c",
        "spr_bg_7_tree_huge_oak_1a",
        "spr_bg_7_tree_huge_oak_1a3555",
        "spr_bg_7_tree_huge_oak_1b",
        "spr_bg_7_tree_huge_oak_1c",
        "spr_bg_7_tree_orange_1a",
        "spr_bg_7_tree_orange_1b",
        "spr_bg_7_tree_short_beech_1a",
        "spr_bg_7_tree_short_beech_1a3525",
        "spr_bg_7_tree_short_beech_1b",
        "spr_bg_7_tree_short_beech_2",
        "spr_bg_7_tree_short_beech_2a",
        "spr_bg_7_tree_short_fluffy_1a",
        "spr_bg_7_tree_short_fluffy_1a3538",
        "spr_bg_7_tree_short_fluffy_1b",
        "spr_bg_7_tree_short_fluffy_1b3539",
        "spr_bg_7_tree_short_pale_1",
        "spr_bg_7_tree_short_pale_13527",
        "spr_bg_7_tree_short_pale_1b",
        "spr_bg_7_tree_tall_dark_1a",
        "spr_bg_7_tree_tall_dark_1a3540",
        "spr_bg_7_tree_tall_dark_1b",
        "spr_bg_7_tree_tall_dark_1b3541",
        "spr_bg_7_tree_tall_dark_1c",
        "spr_bg_7_tree_tall_dark_2a",
        "spr_bg_7_tree_tall_dark_2a3542",
        "spr_bg_7_tree_tall_dark_2b",
        "spr_bg_7_tree_tall_dark_2b3543",
        "spr_bg_7_tree_tall_dark_3a",
        "spr_bg_7_tree_tall_dark_3a3544",
        "spr_bg_7_tree_tall_dark_3b",
        "spr_bg_7_tree_tall_dark_3b3545",
        "spr_bg_7_tree_tall_dark_4a",
        "spr_bg_7_tree_tall_dark_4a3546",
        "spr_bg_7_tree_tall_dark_4b",
        "spr_bg_7_tree_tall_pale_1",
        "spr_bg_7_tree_tall_pale_2",
        "spr_bg_7_tree_tall_pale_3",
        "spr_bg_7_tree_thin_birch_1a",
        "spr_bg_7_tree_thin_birch_1b",
        "spr_bg_7_tree_thin_birch_1c",
        "spr_bg_7_tree_thin_birch_1d",
        "spr_bg_7_tree_thin_birch_2a",
        "spr_bg_7_tree_thin_birch_2b",
        "spr_bg_7_tree_thin_birch_3a",
        "spr_bg_7_tree_thin_birch_3b",
        "spr_bg_7_tree_thin_brown_1a",
        "spr_bg_7_tree_thin_brown_1a3547",
        "spr_bg_7_tree_thin_brown_1b",
        "spr_bg_7_tree_thin_brown_1c",
        "spr_bg_7_tree_thin_brown_1d",
        "spr_bg_7_tree_thin_brown_1e",
        "spr_bg_7_tree_thin_brown_2a",
        "spr_bg_7_tree_thin_brown_2b",
        "spr_bg_7_tree_thin_white_1a",
        "spr_bg_7_tree_thin_white_1b",
        "spr_bg_7_tree_thin_white_1c",
        "spr_bg_7_tree_thin_white_1d",
        "spr_bg_7_tree_thin_white_1e",
        "spr_bg_7_tree_thin_white_2a",
        "spr_bg_7_tree_thin_white_2b",
        "spr_bg_8_prop_street_bicycle_1a",
        "spr_bg_8_prop_street_bicycle_1b",
        "spr_bg_8_prop_street_bicycle_1c",
        "spr_bg_8_prop_street_flowerpot_1a",
        "spr_bg_8_prop_street_flowerpot_1b",
        "spr_bg_8_prop_street_flowerpot_1c",
        "spr_bg_8_prop_street_light_1",
        "spr_bg_8_prop_street_trashbag_1",
        "spr_bg_8_prop_street_trashbag_2",
        "spr_bg_8_prop_street_trashbin",
        "spr_bg_8_prop_street_trashcan_1",
        "spr_bg_8_prop_street_trashcan_2",
        "spr_bg_8_prop_street_trashcan_3",
        "spr_bg_9_foreground_manmade_streetlamp",
        "spr_bg_9_foreground_manmade_telepole_new_1",
        "spr_bg_9_foreground_manmade_telepole_new_2",
        "spr_bg_9_foreground_nature_tree_leaf_1a",
        "spr_bg_9_foreground_nature_tree_leaf_1b",
        "spr_bg_9_foreground_nature_tree_leaf_1c",
        "spr_bg_9_foreground_nature_tree_leaf_1d",
        "spr_bg_9_foreground_nature_tree_pine",
        "spr_bg_9_foreground_nature_tree_pine2",
        "spr_bg_city_5_chunk_end",
        "spr_bg_city_5_chunk_loop1",
        "spr_bg_city_5_chunk_loop2",
        "spr_bg_city_5_chunk_loop3",
        "spr_bg_city_5_chunk_start",
        "spr_bg_city_close",
        "spr_bg_city_small_building_1",
        "spr_bg_city_small_building_10",
        "spr_bg_city_small_building_11",
        "spr_bg_city_small_building_12",
        "spr_bg_city_small_building_13",
        "spr_bg_city_small_building_14",
        "spr_bg_city_small_building_15",
        "spr_bg_city_small_building_16",
        "spr_bg_city_small_building_17",
        "spr_bg_city_small_building_2",
        "spr_bg_city_small_building_3",
        "spr_bg_city_small_building_4",
        "spr_bg_city_small_building_5",
        "spr_bg_city_small_building_6",
        "spr_bg_city_small_building_7",
        "spr_bg_city_small_building_8",
        "spr_bg_city_small_building_9",
        "spr_bg_city",
        "spr_bg_dn_7_city_bar_light",
        "spr_bg_dn_7_city_bar_reflection_back",
        "spr_bg_dn_7_city_bar",
        "spr_bg_dn_7_city_blackbuilding_reflection_back",
        "spr_bg_dn_7_city_blackbuilding",
        "spr_bg_dn_7_city_cafe_light",
        "spr_bg_dn_7_city_cafe_reflection_back",
        "spr_bg_dn_7_city_cafe",
        "spr_bg_dn_7_city_carparts_lights",
        "spr_bg_dn_7_city_carparts_reflection_back",
        "spr_bg_dn_7_city_carparts",
        "spr_bg_dn_7_city_cornerstore_light",
        "spr_bg_dn_7_city_cornerstore_reflection_back",
        "spr_bg_dn_7_city_cornerstore",
        "spr_bg_dn_7_city_dystopicbuilding_reflection_back",
        "spr_bg_dn_7_city_dystopicbuilding",
        "spr_bg_dn_7_city_explore_reflection_back",
        "spr_bg_dn_7_city_explore",
        "spr_bg_dn_7_city_floor_end",
        "spr_bg_dn_7_city_floor_loop1",
        "spr_bg_dn_7_city_floor_loop2",
        "spr_bg_dn_7_city_floor_loop3",
        "spr_bg_dn_7_city_floor_start",
        "spr_bg_dn_7_city_garage_light",
        "spr_bg_dn_7_city_garage_reflection_back",
        "spr_bg_dn_7_city_garage",
        "spr_bg_dn_7_city_gasstation_front",
        "spr_bg_dn_7_city_gasstation_light",
        "spr_bg_dn_7_city_gasstation_pumps_light",
        "spr_bg_dn_7_city_gasstation_pumps_only",
        "spr_bg_dn_7_city_gasstation_shop",
        "spr_bg_dn_7_city_gasstation",
        "spr_bg_dn_7_city_hotel_light",
        "spr_bg_dn_7_city_hotel_reflection_back",
        "spr_bg_dn_7_city_hotel",
        "spr_bg_dn_7_city_reflection_1",
        "spr_bg_dn_7_city_supermarket_light",
        "spr_bg_dn_7_city_supermarket_reflection_back",
        "spr_bg_dn_7_city_supermarket",
        "spr_bg_dn_7_city_thrift_light",
        "spr_bg_dn_7_city_thrift_reflection_back",
        "spr_bg_dn_7_city_thrift",
        "spr_bg_dn_7_city_thriftexplore_explore_sign",
        "spr_bg_dn_7_city_work_light",
        "spr_bg_dn_7_city_work_reflection_back",
        "spr_bg_dn_7_city_work",
        "spr_bg_dn_7_desert_bar_front",
        "spr_bg_dn_7_desert_bar_light",
        "spr_bg_dn_7_desert_bar",
        "spr_bg_dn_7_desert_cafe_light",
        "spr_bg_dn_7_desert_cafe",
        "spr_bg_dn_7_desert_carparts_light",
        "spr_bg_dn_7_desert_carparts",
        "spr_bg_dn_7_desert_church_light",
        "spr_bg_dn_7_desert_church",
        "spr_bg_dn_7_desert_cinema_light",
        "spr_bg_dn_7_desert_cinema",
        "spr_bg_dn_7_desert_extrabuildings_1",
        "spr_bg_dn_7_desert_extrabuildings_2",
        "spr_bg_dn_7_desert_extrabuildings_3",
        "spr_bg_dn_7_desert_extrabuildings_4",
        "spr_bg_dn_7_desert_extrabuildings_5",
        "spr_bg_dn_7_desert_garage_light",
        "spr_bg_dn_7_desert_garage",
        "spr_bg_dn_7_desert_gasstation_lightpumps",
        "spr_bg_dn_7_desert_gasstation_lightshop",
        "spr_bg_dn_7_desert_gasstation_pumps",
        "spr_bg_dn_7_desert_gasstation_shop",
        "spr_bg_dn_7_desert_hotel_light",
        "spr_bg_dn_7_desert_hotel",
        "spr_bg_dn_7_desert_motel_night",
        "spr_bg_dn_7_desert_motel",
        "spr_bg_dn_7_desert_pawnshop_light",
        "spr_bg_dn_7_desert_pawnshop",
        "spr_bg_dn_7_desert_supermarket_light",
        "spr_bg_dn_7_desert_supermarket",
        "spr_bg_dn_7_desert_work_light",
        "spr_bg_dn_7_desert_work",
        "spr_bg_dn_7_forest_church_light",
        "spr_bg_dn_7_forest_church",
        "spr_bg_dn_7_mountain_bar_light",
        "spr_bg_dn_7_mountain_bar",
        "spr_bg_dn_7_mountain_cafe_light",
        "spr_bg_dn_7_mountain_cafe",
        "spr_bg_dn_7_mountain_carparts_light",
        "spr_bg_dn_7_mountain_carparts",
        "spr_bg_dn_7_mountain_extrabuildings_1_light",
        "spr_bg_dn_7_mountain_extrabuildings_1",
        "spr_bg_dn_7_mountain_extrabuildings_2",
        "spr_bg_dn_7_mountain_flag",
        "spr_bg_dn_7_mountain_garage_light",
        "spr_bg_dn_7_mountain_garage_race",
        "spr_bg_dn_7_mountain_garage",
        "spr_bg_dn_7_mountain_gasstation_light",
        "spr_bg_dn_7_mountain_gasstation_pumps_light",
        "spr_bg_dn_7_mountain_gasstation_pumps",
        "spr_bg_dn_7_mountain_gasstation_shop_light",
        "spr_bg_dn_7_mountain_gasstation_shop",
        "spr_bg_dn_7_mountain_gasstation",
        "spr_bg_dn_7_mountain_hotel_light",
        "spr_bg_dn_7_mountain_hotel",
        "spr_bg_dn_7_mountain_mountainbase_light",
        "spr_bg_dn_7_mountain_mountainbase",
        "spr_bg_dn_7_mountain_rehab_light",
        "spr_bg_dn_7_mountain_rehab",
        "spr_bg_dn_7_mountain_supermarket_light",
        "spr_bg_dn_7_mountain_supermarket",
        "spr_bg_dn_7_mountain_thriftshop_light",
        "spr_bg_dn_7_mountain_thriftshop",
        "spr_bg_dn_7_mountain_work_light",
        "spr_bg_dn_7_mountain_work",
        "spr_bg_dn_7_race_poster",
        "spr_bg_ending_demo_gaming_house_light",
        "spr_bg_ending_demo_gaming_house",
        "spr_bg_ending_festival_flag_checkered",
        "spr_bg_ending_festival_flag_orange",
        "spr_bg_ending_festival_flag_pink",
        "spr_bg_ending_festival_flag_red",
        "spr_bg_ending_festival_flag_yellow",
        "spr_bg_ending_festival_info_fullanimation",
        "spr_bg_ending_festival_info_idle",
        "spr_bg_ending_festival_info_open",
        "spr_bg_ending_festival_info_opening",
        "spr_bg_ending_festival_tents_beerbuddies",
        "spr_bg_ending_festival_tents_couples",
        "spr_bg_ending_festival_tents_girlgroup",
        "spr_bg_ending_festival_tents_guitarphoto",
        "spr_bg_ending_festival_tents_noone1",
        "spr_bg_ending_festival_tents_noone2",
        "spr_bg_ending_festival_tents_portapotty",
        "spr_bg_ending_festival_tents_readingwriting",
        "spr_bg_ending_festival_ticketbooth_idle",
        "spr_bg_ending_festival_ticketbooth_talk",
        "spr_bg_ending_festival_whitemerch_loop",
        "spr_bg_ending_festival_whitetent_loop",
        "spr_bg_ending_festival_whitetent_police",
        "spr_bg_ending_inheritance_6_building",
        "spr_bg_ending_inheritance_crows",
        "spr_bg_ending_mountain_mtton",
        "spr_bg_ending_mountain_rock",
        "spr_bg_ending_mountain_rocktower_1",
        "spr_bg_ending_mountain_rocktower_2",
        "spr_bg_ending_mountain_wind1",
        "spr_bg_ending_mountain_wind2",
        "spr_bg_ending_mountain_wind3",
        "spr_bg_ending_race_ambulance",
        "spr_bg_ending_race_comercial_backrailing_ROAD",
        "spr_bg_ending_race_comercial_backrailing",
        "spr_bg_ending_race_depot",
        "spr_bg_ending_race_flag_checkered",
        "spr_bg_ending_race_loudspeaker",
        "spr_bg_ending_race_people_flashes",
        "spr_bg_ending_race_people_flashes1",
        "spr_bg_ending_race_people_flashes2",
        "spr_bg_ending_race_people_flashes3",
        "spr_bg_ending_race_people_photocowboy",
        "spr_bg_ending_race_people_photopro",
        "spr_bg_ending_race_people_shirtlessmusch",
        "spr_bg_ending_race_people_tapeboy",
        "spr_bg_ending_race_people_worker1",
        "spr_bg_ending_race_people04",
        "spr_bg_ending_race_people05",
        "spr_bg_ending_race_people06",
        "spr_bg_ending_race_people07",
        "spr_bg_ending_race_people08",
        "spr_bg_ending_race_people09",
        "spr_bg_ending_race_people10",
        "spr_bg_ending_race_people11",
        "spr_bg_ending_race_people12",
        "spr_bg_ending_race_people13",
        "spr_bg_ending_race_people14",
        "spr_bg_ending_race_people15",
        "spr_bg_ending_race_people16",
        "spr_bg_ending_race_podium",
        "spr_bg_ending_race_portapotty",
        "spr_bg_ending_race_railing",
        "spr_bg_ending_race_ROAD_tirewall",
        "spr_bg_ending_race_ROAD_trackwarning",
        "spr_bg_ending_race_ROAD_warningfence",
        "spr_bg_far_hill_part",
        "spr_bg_far_hill_tree_1",
        "spr_bg_far_hill_tree_2",
        "spr_bg_forest_close",
        "spr_bg_grassy_piece",
        "spr_bg_ground_brown_undergrowth_1",
        "spr_bg_ground_brown_undergrowth_10",
        "spr_bg_ground_brown_undergrowth_2",
        "spr_bg_ground_brown_undergrowth_3",
        "spr_bg_ground_brown_undergrowth_4",
        "spr_bg_ground_brown_undergrowth_5",
        "spr_bg_ground_brown_undergrowth_6",
        "spr_bg_ground_brown_undergrowth_7",
        "spr_bg_ground_brown_undergrowth_8",
        "spr_bg_ground_brown_undergrowth_9",
        "spr_bg_ground_brown_undergrowth_begin",
        "spr_bg_haze_line",
        "spr_bg_hill_part",
        "spr_bg_hills",
        "spr_bg_house",
        "spr_bg_leaf_fall_1a",
        "spr_bg_leaf_fall_1b",
        "spr_bg_leaf_fall_2a",
        "spr_bg_leaf_fall_3a",
        "spr_bg_mountains",
        "spr_bg_ocean",
        "spr_bg_pine_road_0",
        "spr_bg_pine_road_1",
        "spr_bg_pine_road_10",
        "spr_bg_pine_road_11",
        "spr_bg_pine_road_12",
        "spr_bg_pine_road_13",
        "spr_bg_pine_road_14",
        "spr_bg_pine_road_15",
        "spr_bg_pine_road_16",
        "spr_bg_pine_road_17",
        "spr_bg_pine_road_18",
        "spr_bg_pine_road_19",
        "spr_bg_pine_road_2",
        "spr_bg_pine_road_3",
        "spr_bg_pine_road_4",
        "spr_bg_pine_road_5",
        "spr_bg_pine_road_6",
        "spr_bg_pine_road_7",
        "spr_bg_pine_road_8",
        "spr_bg_pine_road_9",
        "spr_bg_race_tent_road",
        "spr_bg_space_128",
        "spr_bg_space_256",
        "spr_bg_space_512",
        "spr_bg_space_64",
        "spr_bg_tmp_grass",
        "spr_bg_tmp_moss",
        "spr_bg_town_country_1_0",
        "spr_bg_town_country_1_1",
        "spr_bg_town_country_1_2",
        "spr_bg_town_country_4_0",
        "spr_bg_town_country_4_1",
        "spr_bg_town_country_4_2",
        "spr_bg_town_country_4_3",
        "spr_bg_town_country_4_4",
        "spr_bg_town_country_4_5",
        "spr_bg_town_country_4_end",
        "spr_bg_town_country_4_start",
        "spr_bg_tree_medium_leaf_0",
        "spr_bg_tree_medium_leaf_1",
        "spr_bg_tree_medium_leaf_2",
        "spr_bg_tree_medium_leaf_3",
        "spr_bg_tree_medium_leaf_4",
        "spr_bg_tree_medium_leaf_5",
        "spr_bg_tree_medium_leaf_6",
        "spr_bg_tree_medium_leaf_7",
        "spr_bg_tunnel_begin",
        "spr_bg_tunnel_end",
        "spr_bg_tunnel",
        "spr_bg_water_general",
        "spr_bg_water_glitter_circle",
        "spr_bg_water_test_all",
        "spr_birdinroad_crow_caw_small",
        "spr_birdinroad_crow_caw",
        "spr_birdinroad_crow_fly",
        "spr_birdinroad_crow_peck",
        "spr_birdinroad_crow_walk",
        "spr_birdinroad_pigeon_fly",
        "spr_birdinroad_pigeon_peck_2",
        "spr_birdinroad_pigeon_peck",
        "spr_birdinroad_pigeon_walk_2",
        "spr_birdinroad_pigeon_walk",
        "spr_blonde_guy",
        "spr_blue_noise",
        "spr_break_pedal_highlight",
        "spr_break_pedal_outline",
        "spr_break_pedal",
        "spr_btruck_bg",
        "spr_btruck_black",
        "spr_btruck_blue",
        "spr_btruck_driver",
        "spr_btruck_gray",
        "spr_btruck_green",
        "spr_btruck_wheel_a",
        "spr_btruck_windows_a",
        "spr_businessman_temp",
        "spr_button_close",
        "spr_cafe_town_country_1",
        "spr_cafe_town_country_2",
        "spr_cafe_town_country_3",
        "spr_cafe_town_country_empty",
        "spr_calendar_arrow_left",
        "spr_calendar_arrow_right",
        "spr_calendar_bg",
        "spr_calendar_check",
        "spr_calendar_day_view_bg",
        "spr_calendar_end",
        "spr_calendar_event_marker",
        "spr_calendar_expand_button",
        "spr_calendar_item_symbol",
        "spr_calendar_map_symbol",
        "spr_calendar_marked",
        "spr_calendar_marker",
        "spr_calendar_overlay",
        "spr_calendar_paper_tex",
        "spr_calendar_quest_fill_tex",
        "spr_calendar_quest_main_marker",
        "spr_calendar_quest_marker",
        "spr_car_240_upgrade_back_exhaustpipe",
        "spr_car_240_upgrade_back_extratireholder",
        "spr_car_240_upgrade_back_spoiler1",
        "spr_car_240_upgrade_back_spoiler2",
        "spr_car_240_upgrade_back_suspension",
        "spr_car_240_upgrade_back_towhook1",
        "spr_car_240_upgrade_back_towhook2",
        "spr_car_240_upgrade_cosmetic_vandalism",
        "spr_car_240_upgrade_engine_compressor",
        "spr_car_240_upgrade_engine_improvedbreaks",
        "spr_car_240_upgrade_front_dog_head",
        "spr_car_240_upgrade_front_externalradiator",
        "spr_car_240_upgrade_front_fender_1",
        "spr_car_240_upgrade_front_fender_2",
        "spr_car_240_upgrade_front_flag1",
        "spr_car_240_upgrade_front_flag2",
        "spr_car_240_upgrade_front_flag3",
        "spr_car_240_upgrade_front_lights1",
        "spr_car_240_upgrade_front_lights2",
        "spr_car_240_upgrade_front_skirts",
        "spr_car_240_upgrade_front_undershield",
        "spr_car_240_upgrade_front_winch",
        "spr_car_240_upgrade_interior_dimmedwindows",
        "spr_car_240_upgrade_interior_fuzz",
        "spr_car_240_upgrade_interior_idiot_flowers",
        "spr_car_240_upgrade_interior_louver",
        "spr_car_240_upgrade_interior_rattmuff1",
        "spr_car_240_upgrade_interior_rattmuff2",
        "spr_car_240_upgrade_interior_rollcage",
        "spr_car_240_upgrade_interior_speakersystem",
        "spr_car_240_upgrade_interior_subwoofer",
        "spr_car_240_upgrade_roof_cheaprack",
        "spr_car_240_upgrade_roof_classicrack",
        "spr_car_240_upgrade_roof_goodrack",
        "spr_car_240_upgrade_roof_tentrack",
        "spr_car_240_upgrade_roof_wrap1",
        "spr_car_240_upgrade_roof_wrap2",
        "spr_car_240_upgrade_utility_halysen",
        "spr_car_240_upgrade_utility_spoiler",
        "spr_car_240_upgrade_wheel_big",
        "spr_car_240_upgrade_wheel_rally",
        "spr_car_240_upgrade_wheel_winter",
        "spr_car_240_wear_dirt_1",
        "spr_car_240_wear_dirt_2",
        "spr_car_240_wear_ducttape_1",
        "spr_car_240_wear_ducttape_2",
        "spr_car_240_wear_ducttape_3",
        "spr_car_240_wear_ducttape_4",
        "spr_car_240_wear_ducttape_5",
        "spr_car_240_wear_ducttape_6",
        "spr_car_240_wear_ducttape_7",
        "spr_car_240_wear_ducttape",
        "spr_car_damage_alert",
        "spr_car_menu_button_calendar",
        "spr_car_menu_button_drive",
        "spr_car_menu_button_frame",
        "spr_car_menu_button_journal",
        "spr_car_menu_button_leave",
        "spr_car_menu_button_map",
        "spr_car_menu_button_phone",
        "spr_car_menu_button_sleep",
        "spr_car_menu_button_stats",
        "spr_car_menu_button_tow",
        "spr_car_menu_button_trunk",
        "spr_car_menu_button_walk",
        "spr_car_menu_tutorial_arrow",
        "spr_car_seat_32x32",
        "spr_car_seat_32x48_hover",
        "spr_car_seat_32x48_move_glow",
        "spr_car_seat_32x48",
        "spr_car_seat_64x48_invisible",
        "spr_car_seat_64x48",
        "spr_car_seat_button_glow",
        "spr_car_seat_button",
        "spr_car_spinoff_linger",
        "spr_car_spinoff_start",
        "spr_car_sportscar_background",
        "spr_car_sportscar_body_red",
        "spr_car_sportscar_body_white",
        "spr_car_sportscar_glass",
        "spr_car_sportscar_whel",
        "spr_car_upgrade_skill",
        "spr_car_upgrade_slot_1x2_highlight",
        "spr_car_upgrade_slot_2x1_highlight",
        "spr_car_upgrade_slot_2x1",
        "spr_car_upgrade_slot_2x2_highlight",
        "spr_car_upgrade_slot_2x2",
        "spr_car_upgrade_slot_3x2_highlight",
        "spr_car_upgrade_slot_3x2",
        "spr_car_upgrade_slot_cosmetics_blueprint",
        "spr_car_upgrade_slot_cosmetics_highlight",
        "spr_car_upgrade_slot_cosmetics",
        "spr_car_upgrade_slot_idol",
        "spr_car_upgrade_slot_spray",
        "spr_car_upgrade_temp_32",
        "spr_car_upgrade_temp",
        "spr_car_wear_dust1",
        "spr_car_wear_dust2",
        "spr_car_wear_mud",
        "spr_car_wear_mud2",
        "spr_car_wear_rust1",
        "spr_car_wear_rust2",
        "spr_car_wear_scratches_1",
        "spr_car_wear_scratches_2",
        "spr_car_wear_scratches_3",
        "spr_car_wear_scratches_4",
        "spr_car_wear_scratches",
        "spr_cars_boring_2door_background",
        "spr_cars_boring_2door_body_black",
        "spr_cars_boring_2door_body_blue",
        "spr_cars_boring_2door_body_gray",
        "spr_cars_boring_2door_body_red",
        "spr_cars_boring_2door_body_silver",
        "spr_cars_boring_2door_body_white",
        "spr_cars_boring_2door_driver",
        "spr_cars_boring_2door_wheel_1",
        "spr_cars_boring_2door_wheel_2",
        "spr_cars_boring_2door_windows",
        "spr_cars_boring_4door_background",
        "spr_cars_boring_4door_body_black",
        "spr_cars_boring_4door_body_blue",
        "spr_cars_boring_4door_body_gray",
        "spr_cars_boring_4door_body_red",
        "spr_cars_boring_4door_body_silver",
        "spr_cars_boring_4door_body_white",
        "spr_cars_boring_4door_driver",
        "spr_cars_boring_4door_wheel_1",
        "spr_cars_boring_4door_wheel_2",
        "spr_cars_boring_4door_windows",
        "spr_cars_boring_mini_background",
        "spr_cars_boring_mini_body_black",
        "spr_cars_boring_mini_body_blue",
        "spr_cars_boring_mini_body_gray",
        "spr_cars_boring_mini_body_red",
        "spr_cars_boring_mini_body_silver",
        "spr_cars_boring_mini_body_white",
        "spr_cars_boring_mini_driver_oldman",
        "spr_cars_boring_mini_driver",
        "spr_cars_boring_mini_wheel",
        "spr_cars_boring_mini_windows",
        "spr_cars_bug_background",
        "spr_cars_bug_body_black",
        "spr_cars_bug_body_blue",
        "spr_cars_bug_body_brown",
        "spr_cars_bug_body_green",
        "spr_cars_bug_body_red",
        "spr_cars_bug_body_white",
        "spr_cars_bug_body_yellow",
        "spr_cars_bug_driver",
        "spr_cars_bug_wheels",
        "spr_cars_bug_windows",
        "spr_cars_bus_background",
        "spr_cars_bus_body_grayblue",
        "spr_cars_bus_body_graypink",
        "spr_cars_bus_body_redwhite",
        "spr_cars_bus_body_school",
        "spr_cars_bus_body_syria",
        "spr_cars_bus_body_white",
        "spr_cars_bus_curtain_1",
        "spr_cars_bus_curtain_2",
        "spr_cars_bus_driver",
        "spr_cars_bus_passengers",
        "spr_cars_bus_wheels",
        "spr_cars_bus_windows",
        "spr_cars_golf_cab_background",
        "spr_cars_golf_cab_body_black",
        "spr_cars_golf_cab_body_orange",
        "spr_cars_golf_cab_body_white",
        "spr_cars_golf_cab_driver",
        "spr_cars_golf_cab_wheel_1",
        "spr_cars_golf_cab_windows",
        "spr_cars_hatchback_golf_background",
        "spr_cars_hatchback_golf_body_black",
        "spr_cars_hatchback_golf_body_blue",
        "spr_cars_hatchback_golf_body_green",
        "spr_cars_hatchback_golf_body_gti",
        "spr_cars_hatchback_golf_body_orange",
        "spr_cars_hatchback_golf_body_red",
        "spr_cars_hatchback_golf_body_silver",
        "spr_cars_hatchback_golf_body_yellow",
        "spr_cars_hatchback_golf_driver",
        "spr_cars_hatchback_golf_wheel",
        "spr_cars_hatchback_golf_windows",
        "spr_cars_malibu_background",
        "spr_cars_malibu_body_black",
        "spr_cars_malibu_body_blue",
        "spr_cars_malibu_body_police",
        "spr_cars_malibu_body_red",
        "spr_cars_malibu_body_rusty",
        "spr_cars_malibu_driver",
        "spr_cars_malibu_wheels_1",
        "spr_cars_malibu_wheels_2",
        "spr_cars_malibu_window",
        "spr_cars_minivan_background",
        "spr_cars_minivan_body_beige",
        "spr_cars_minivan_body_blue",
        "spr_cars_minivan_body_brown",
        "spr_cars_minivan_body_hippy",
        "spr_cars_minivan_body_orange",
        "spr_cars_minivan_body_red",
        "spr_cars_minivan_body_teal",
        "spr_cars_minivan_body_yellow",
        "spr_cars_minivan_driver",
        "spr_cars_minivan_passenger",
        "spr_cars_minivan_wheel",
        "spr_cars_minivan_windows_stickers",
        "spr_cars_minivan_windows",
        "spr_cars_player_muscle_body_black",
        "spr_cars_player_muscle_body_bluegray",
        "spr_cars_player_muscle_body_bluelight",
        "spr_cars_player_muscle_body_brown",
        "spr_cars_player_muscle_body_cream",
        "spr_cars_player_muscle_body_gray",
        "spr_cars_player_muscle_body_green",
        "spr_cars_player_muscle_body_greentoxic",
        "spr_cars_player_muscle_body_orange",
        "spr_cars_player_muscle_body_pink",
        "spr_cars_player_muscle_body_pontiac",
        "spr_cars_player_muscle_body_red",
        "spr_cars_player_muscle_body_rootbeer",
        "spr_cars_player_muscle_body_scrap",
        "spr_cars_player_muscle_body_silver",
        "spr_cars_player_muscle_body_sunset",
        "spr_cars_player_muscle_body_teal",
        "spr_cars_player_muscle_body_white",
        "spr_cars_player_muscle_body_yellow",
        "spr_cars_player_muscle_cosmetic_70s",
        "spr_cars_player_muscle_cosmetic_bossmach_1_ICON",
        "spr_cars_player_muscle_cosmetic_bossmach_1",
        "spr_cars_player_muscle_cosmetic_bossmach_2_ICON",
        "spr_cars_player_muscle_cosmetic_bossmach_2",
        "spr_cars_player_muscle_cosmetic_bullets",
        "spr_cars_player_muscle_cosmetic_celica_ICON",
        "spr_cars_player_muscle_cosmetic_celica",
        "spr_cars_player_muscle_cosmetic_cheater",
        "spr_cars_player_muscle_cosmetic_fire",
        "spr_cars_player_muscle_cosmetic_gbg",
        "spr_cars_player_muscle_cosmetic_hearts",
        "spr_cars_player_muscle_cosmetic_hemsedal",
        "spr_cars_player_muscle_cosmetic_kawaii_ICON",
        "spr_cars_player_muscle_cosmetic_kawaii",
        "spr_cars_player_muscle_cosmetic_keepdriving",
        "spr_cars_player_muscle_cosmetic_lennon_ICON",
        "spr_cars_player_muscle_cosmetic_lennon_ONLY_MUSCLE",
        "spr_cars_player_muscle_cosmetic_martini",
        "spr_cars_player_muscle_cosmetic_military",
        "spr_cars_player_muscle_cosmetic_nordica",
        "spr_cars_player_muscle_cosmetic_orangeline",
        "spr_cars_player_muscle_cosmetic_police",
        "spr_cars_player_muscle_cosmetic_redline",
        "spr_cars_player_muscle_cosmetic_skull",
        "spr_cars_player_muscle_cosmetic_spirals",
        "spr_cars_player_muscle_cosmetic_spitfire_ICON",
        "spr_cars_player_muscle_cosmetic_spitfire",
        "spr_cars_player_muscle_cosmetic_stars",
        "spr_cars_player_muscle_cosmetic_stickers1",
        "spr_cars_player_muscle_cosmetic_stickers2",
        "spr_cars_player_muscle_cosmetic_stickers3",
        "spr_cars_player_muscle_cosmetic_stickers4",
        "spr_cars_player_muscle_cosmetic_stripes",
        "spr_cars_player_muscle_cosmetic_uglyline",
        "spr_cars_player_muscle_cosmetic_vand_circle",
        "spr_cars_player_muscle_cosmetic_vand_cunt",
        "spr_cars_player_muscle_cosmetic_vand_dickline",
        "spr_cars_player_muscle_cosmetic_vand_hell",
        "spr_cars_player_muscle_cosmetic_vand_killmachine",
        "spr_cars_player_muscle_cosmetic_vand_line",
        "spr_cars_player_muscle_cosmetic_vand_soso",
        "spr_cars_player_muscle_cosmetic_warriorenergy",
        "spr_cars_player_muscle_cosmetic_whitedoor_ICON",
        "spr_cars_player_muscle_cosmetic_whitedoor",
        "spr_cars_player_muscle_lights_lamps",
        "spr_cars_player_muscle_upgrade_back_dragkrok",
        "spr_cars_player_muscle_upgrade_back_exhaust",
        "spr_cars_player_muscle_upgrade_back_extrawheel_full",
        "spr_cars_player_muscle_upgrade_back_extrawheel",
        "spr_cars_player_muscle_upgrade_back_halusin",
        "spr_cars_player_muscle_upgrade_back_spoiler1",
        "spr_cars_player_muscle_upgrade_back_spoiler2",
        "spr_cars_player_muscle_upgrade_engine_breaks",
        "spr_cars_player_muscle_upgrade_engine_compressor",
        "spr_cars_player_muscle_upgrade_engine_sportintake",
        "spr_cars_player_muscle_upgrade_engine_turbo",
        "spr_cars_player_muscle_upgrade_front_externalcooler",
        "spr_cars_player_muscle_upgrade_front_kofongare_1",
        "spr_cars_player_muscle_upgrade_front_kofongare_2",
        "spr_cars_player_muscle_upgrade_front_lights1",
        "spr_cars_player_muscle_upgrade_front_lights2",
        "spr_cars_player_muscle_upgrade_front_protectiveplates",
        "spr_cars_player_muscle_upgrade_front_winch",
        "spr_cars_player_muscle_upgrade_interior_flowers",
        "spr_cars_player_muscle_upgrade_interior_fuzz",
        "spr_cars_player_muscle_upgrade_interior_radio",
        "spr_cars_player_muscle_upgrade_interior_sunprotection",
        "spr_cars_player_muscle_upgrade_roof_box",
        "spr_cars_player_muscle_upgrade_roof_rack1_full",
        "spr_cars_player_muscle_upgrade_roof_rack1",
        "spr_cars_player_muscle_upgrade_roof_rack2_full",
        "spr_cars_player_muscle_upgrade_roof_rack2",
        "spr_cars_player_muscle_wear_dirt1",
        "spr_cars_player_muscle_wear_ducttape_1",
        "spr_cars_player_muscle_wear_ducttape_2",
        "spr_cars_player_muscle_wear_ducttape_3",
        "spr_cars_player_muscle_wear_ducttape_4",
        "spr_cars_player_muscle_wear_ducttape_5",
        "spr_cars_player_muscle_wear_ducttape_6",
        "spr_cars_player_muscle_wear_ducttape_7",
        "spr_cars_player_muscle_wear_ducttape",
        "spr_cars_player_muscle_wear_dust1",
        "spr_cars_player_muscle_wear_dust2",
        "spr_cars_player_muscle_wear_mud1",
        "spr_cars_player_muscle_wear_mud2",
        "spr_cars_player_muscle_wear_rust1",
        "spr_cars_player_muscle_wear_rust2",
        "spr_cars_player_muscle_wear_scratches_1",
        "spr_cars_player_muscle_wear_scratches_2",
        "spr_cars_player_muscle_wear_scratches_3",
        "spr_cars_player_muscle_wear_scratches_4",
        "spr_cars_player_muscle_wear_scratches",
        "spr_cars_player_pickup_bg",
        "spr_cars_player_pickup_body_beige",
        "spr_cars_player_pickup_body_black",
        "spr_cars_player_pickup_body_brown",
        "spr_cars_player_pickup_body_cream",
        "spr_cars_player_pickup_body_darkblue",
        "spr_cars_player_pickup_body_darkred",
        "spr_cars_player_pickup_body_gray",
        "spr_cars_player_pickup_body_graylight",
        "spr_cars_player_pickup_body_green",
        "spr_cars_player_pickup_body_lightblue",
        "spr_cars_player_pickup_body_orange",
        "spr_cars_player_pickup_body_red",
        "spr_cars_player_pickup_body_silver",
        "spr_cars_player_pickup_body_toxicgreen",
        "spr_cars_player_pickup_body_white",
        "spr_cars_player_pickup_body_yellow",
        "spr_cars_player_pickup_cosmetic_70s",
        "spr_cars_player_pickup_cosmetic_bullets",
        "spr_cars_player_pickup_cosmetic_cheater",
        "spr_cars_player_pickup_cosmetic_flags",
        "spr_cars_player_pickup_cosmetic_flames",
        "spr_cars_player_pickup_cosmetic_gallionsfigurer",
        "spr_cars_player_pickup_cosmetic_gbg",
        "spr_cars_player_pickup_cosmetic_hearts",
        "spr_cars_player_pickup_cosmetic_hemsedal",
        "spr_cars_player_pickup_cosmetic_hilux_ICON",
        "spr_cars_player_pickup_cosmetic_hilux_ONLY_TRUCK",
        "spr_cars_player_pickup_cosmetic_keepdriving",
        "spr_cars_player_pickup_cosmetic_martini",
        "spr_cars_player_pickup_cosmetic_mazda_1_ICON",
        "spr_cars_player_pickup_cosmetic_mazda_1",
        "spr_cars_player_pickup_cosmetic_mazda_2_ICON",
        "spr_cars_player_pickup_cosmetic_mazda_2",
        "spr_cars_player_pickup_cosmetic_military",
        "spr_cars_player_pickup_cosmetic_nordica",
        "spr_cars_player_pickup_cosmetic_police",
        "spr_cars_player_pickup_cosmetic_silverlines",
        "spr_cars_player_pickup_cosmetic_skull",
        "spr_cars_player_pickup_cosmetic_spirals",
        "spr_cars_player_pickup_cosmetic_stars",
        "spr_cars_player_pickup_cosmetic_sticker4",
        "spr_cars_player_pickup_cosmetic_stickers1",
        "spr_cars_player_pickup_cosmetic_stickers2",
        "spr_cars_player_pickup_cosmetic_stickers3",
        "spr_cars_player_pickup_cosmetic_stripes",
        "spr_cars_player_pickup_cosmetic_toyota_1_ICON",
        "spr_cars_player_pickup_cosmetic_toyota_1",
        "spr_cars_player_pickup_cosmetic_vandal_blueline",
        "spr_cars_player_pickup_cosmetic_vandal_circle",
        "spr_cars_player_pickup_cosmetic_vandal_cuntcar",
        "spr_cars_player_pickup_cosmetic_vandal_dickline",
        "spr_cars_player_pickup_cosmetic_vandal_hell",
        "spr_cars_player_pickup_cosmetic_vandal_machinekills",
        "spr_cars_player_pickup_cosmetic_vandal_soso",
        "spr_cars_player_pickup_cosmetic_warriorenergy",
        "spr_cars_player_pickup_night_lamps",
        "spr_cars_player_pickup_upgrade_back_dragkrok",
        "spr_cars_player_pickup_upgrade_back_exhust",
        "spr_cars_player_pickup_upgrade_back_front_skirt",
        "spr_cars_player_pickup_upgrade_back_spoiler_1",
        "spr_cars_player_pickup_upgrade_back_spoiler_2",
        "spr_cars_player_pickup_upgrade_back_wheelcarrier_full",
        "spr_cars_player_pickup_upgrade_back_wheelcarrier",
        "spr_cars_player_pickup_upgrade_breaks",
        "spr_cars_player_pickup_upgrade_dimmedwindow",
        "spr_cars_player_pickup_upgrade_engine_compressor",
        "spr_cars_player_pickup_upgrade_flowers",
        "spr_cars_player_pickup_upgrade_front_back_underprotection",
        "spr_cars_player_pickup_upgrade_front_externalcooler",
        "spr_cars_player_pickup_upgrade_front_extralights_1",
        "spr_cars_player_pickup_upgrade_front_extralights_2",
        "spr_cars_player_pickup_upgrade_front_kofongare_1",
        "spr_cars_player_pickup_upgrade_front_kofongare_2",
        "spr_cars_player_pickup_upgrade_front_winch",
        "spr_cars_player_pickup_upgrade_fuzz2",
        "spr_cars_player_pickup_upgrade_interior_antenna",
        "spr_cars_player_pickup_upgrade_rattmuff1",
        "spr_cars_player_pickup_upgrade_rattmuff2",
        "spr_cars_player_pickup_upgrade_rattmuff3",
        "spr_cars_player_pickup_upgrade_rollcage",
        "spr_cars_player_pickup_upgrade_roof_extralights1",
        "spr_cars_player_pickup_upgrade_roof_hardcover_ITEM",
        "spr_cars_player_pickup_upgrade_roof_hardcover",
        "spr_cars_player_pickup_upgrade_roof_tbedcover_1",
        "spr_cars_player_pickup_upgrade_roof_tbedcover_2",
        "spr_cars_player_pickup_upgrade_suspension",
        "spr_cars_player_pickup_wear_dirt1",
        "spr_cars_player_pickup_wear_dirt2",
        "spr_cars_player_pickup_wear_ducttape_1",
        "spr_cars_player_pickup_wear_ducttape_2",
        "spr_cars_player_pickup_wear_ducttape_3",
        "spr_cars_player_pickup_wear_ducttape_4",
        "spr_cars_player_pickup_wear_ducttape_5",
        "spr_cars_player_pickup_wear_ducttape_6",
        "spr_cars_player_pickup_wear_ducttape_7",
        "spr_cars_player_pickup_wear_dust1",
        "spr_cars_player_pickup_wear_dust2",
        "spr_cars_player_pickup_wear_mud1",
        "spr_cars_player_pickup_wear_mud2",
        "spr_cars_player_pickup_wear_rust1",
        "spr_cars_player_pickup_wear_rust2",
        "spr_cars_player_pickup_wear_scratches_1",
        "spr_cars_player_pickup_wear_scratches_2",
        "spr_cars_player_pickup_wear_scratches_3",
        "spr_cars_player_pickup_wear_scratches_4",
        "spr_cars_player_pickup_wear_scratches",
        "spr_cars_player_pickup_wear_smashedwindow",
        "spr_cars_player_pickup_wheel_big",
        "spr_cars_player_pickup_wheel_normal",
        "spr_cars_player_pickup_wheel_winter",
        "spr_cars_player_pickup_window_1",
        "spr_cars_player_pickup_window_foggy",
        "spr_cars_RALLY_corolla_bg",
        "spr_cars_RALLY_corolla_body",
        "spr_cars_RALLY_corolla_driver",
        "spr_cars_RALLY_corolla_wheel",
        "spr_cars_RALLY_corolla_window",
        "spr_cars_RALLY_saab_bg",
        "spr_cars_RALLY_saab_body",
        "spr_cars_RALLY_saab_driver",
        "spr_cars_RALLY_saab_FULL",
        "spr_cars_RALLY_saab_wheels",
        "spr_cars_RALLY_saab_window",
        "spr_cars_saab_background",
        "spr_cars_saab_body_black",
        "spr_cars_saab_body_blue",
        "spr_cars_saab_body_green",
        "spr_cars_saab_body_red",
        "spr_cars_saab_body_silver",
        "spr_cars_saab_body_white",
        "spr_cars_saab_driver",
        "spr_cars_saab_wheels",
        "spr_cars_saab_windows",
        "spr_cars_semitruck_background",
        "spr_cars_semitruck_body_blue",
        "spr_cars_semitruck_body_bluered",
        "spr_cars_semitruck_body_red_2",
        "spr_cars_semitruck_body_red",
        "spr_cars_semitruck_body_white_2",
        "spr_cars_semitruck_body_white",
        "spr_cars_semitruck_body_whiteblue",
        "spr_cars_semitruck_body_whitepink",
        "spr_cars_semitruck_body_whitered",
        "spr_cars_semitruck_driver",
        "spr_cars_semitruck_festival_1",
        "spr_cars_semitruck_festival_2",
        "spr_cars_semitruck_lorry_blue_blue_flipped",
        "spr_cars_semitruck_lorry_blue_blue",
        "spr_cars_semitruck_lorry_evolution_gray_flipped",
        "spr_cars_semitruck_lorry_evolution_gray",
        "spr_cars_semitruck_lorry_evolution_white_flipped",
        "spr_cars_semitruck_lorry_evolution_white",
        "spr_cars_semitruck_lorry_fantasia_blue_flipped",
        "spr_cars_semitruck_lorry_fantasia_blue",
        "spr_cars_semitruck_lorry_ftl_gray_flipped",
        "spr_cars_semitruck_lorry_ftl_gray",
        "spr_cars_semitruck_lorry_ftl_white_flipped",
        "spr_cars_semitruck_lorry_ftl_white",
        "spr_cars_semitruck_lorry_graffitti_1",
        "spr_cars_semitruck_lorry_graffitti_2",
        "spr_cars_semitruck_lorry_graffitti_3",
        "spr_cars_semitruck_lorry_graffitti_4",
        "spr_cars_semitruck_lorry_phc_yellow_flipped",
        "spr_cars_semitruck_lorry_phc_yellow",
        "spr_cars_semitruck_lorry_rcv_white_flipped",
        "spr_cars_semitruck_lorry_rcv_white",
        "spr_cars_semitruck_lorry_tko_white_flipped",
        "spr_cars_semitruck_lorry_tko_white",
        "spr_cars_semitruck_lorry_western_blue_flipped",
        "spr_cars_semitruck_lorry_western_blue",
        "spr_cars_semitruck_lorry_western_gray_flipped",
        "spr_cars_semitruck_lorry_western_gray",
        "spr_cars_semitruck_lorry_western_white_flipped",
        "spr_cars_semitruck_lorry_western_white",
        "spr_cars_semitruck_wheels",
        "spr_cars_semitruck_windows",
        "spr_cars_stationwagon_background",
        "spr_cars_stationwagon_body_blue",
        "spr_cars_stationwagon_body_driver",
        "spr_cars_stationwagon_body_green",
        "spr_cars_stationwagon_body_red",
        "spr_cars_stationwagon_wheel",
        "spr_cars_stationwagon_windows",
        "spr_cars_taxi_background",
        "spr_cars_taxi_body_black",
        "spr_cars_taxi_body_yellow_flipped",
        "spr_cars_taxi_body_yellow",
        "spr_cars_taxi_driver",
        "spr_cars_taxi_wheels",
        "spr_cars_taxi_window_stickers",
        "spr_cars_taxi_window",
        "spr_cars_transam_background",
        "spr_cars_transam_body_black",
        "spr_cars_transam_body_red",
        "spr_cars_transam_body_silver",
        "spr_cars_transam_driver",
        "spr_cars_transam_wheel",
        "spr_cars_transam_window",
        "spr_cars_transporter_background",
        "spr_cars_transporter_body_fresh_flipped",
        "spr_cars_transporter_body_fresh",
        "spr_cars_transporter_body_icarry_flipped",
        "spr_cars_transporter_body_icarry",
        "spr_cars_transporter_body_white_2",
        "spr_cars_transporter_body_white_open",
        "spr_cars_transporter_body_white",
        "spr_cars_transporter_driver",
        "spr_cars_transporter_grafitti_1",
        "spr_cars_transporter_grafitti_2",
        "spr_cars_transporter_standingstill_open",
        "spr_cars_transporter_wheels",
        "spr_cars_transporter_windows",
        "spr_cars_truck_b2000_background",
        "spr_cars_truck_b2000_body_beige",
        "spr_cars_truck_b2000_body_black",
        "spr_cars_truck_b2000_body_blue",
        "spr_cars_truck_b2000_body_darkblue",
        "spr_cars_truck_b2000_body_red",
        "spr_cars_truck_b2000_body_white",
        "spr_cars_truck_b2000_body_window",
        "spr_cars_truck_b2000_driver",
        "spr_cars_truck_big_body_red",
        "spr_cars_truck_big_body_yellow",
        "spr_cars_truck_chickencoop_feather1",
        "spr_cars_truck_chickencoop_feather2",
        "spr_cars_truck_chickencoop_feather3",
        "spr_cars_truck_chickencoop_feather4",
        "spr_cars_truck_chickencoop_feather5",
        "spr_cars_truck_chickencoop",
        "spr_cars_truck_ford_background",
        "spr_cars_truck_ford_body_black",
        "spr_cars_truck_ford_body_blue",
        "spr_cars_truck_ford_body_brown",
        "spr_cars_truck_ford_body_red",
        "spr_cars_truck_ford_body_white",
        "spr_cars_truck_ford_dirt",
        "spr_cars_truck_ford_driver",
        "spr_cars_truck_ford_trunkcase",
        "spr_cars_truck_ford_wheel_1",
        "spr_cars_truck_ford_wheel_2",
        "spr_cars_truck_ford_wheel_3",
        "spr_cars_truck_ford_wheel_4",
        "spr_cars_truck_ford_wheel_rally",
        "spr_cars_truck_ford_wheel_rimmed",
        "spr_cars_truck_ford_wheel_sport",
        "spr_cars_truck_ford_wheel_superwide",
        "spr_cars_truck_ford_window",
        "spr_cars_truck_small_background",
        "spr_cars_truck_small_body_black",
        "spr_cars_truck_small_body_blue",
        "spr_cars_truck_small_body_green",
        "spr_cars_truck_small_body_red",
        "spr_cars_truck_small_driver",
        "spr_cars_truck_small_wheel",
        "spr_cars_truck_small_window",
        "spr_cars_volvo_245_background",
        "spr_cars_volvo_245_body_black",
        "spr_cars_volvo_245_body_blue",
        "spr_cars_volvo_245_body_brown",
        "spr_cars_volvo_245_body_darkblue",
        "spr_cars_volvo_245_body_raggare",
        "spr_cars_volvo_245_body_red",
        "spr_cars_volvo_245_body_silver",
        "spr_cars_volvo_245_body_trashy",
        "spr_cars_volvo_245_body_white",
        "spr_cars_volvo_245_driver",
        "spr_cars_volvo_245_passenger",
        "spr_cars_volvo_245_stickers",
        "spr_cars_volvo_245_wheel",
        "spr_cars_volvo_245_window_2",
        "spr_cars_volvo_245_window",
        "spr_cars_workvan_background",
        "spr_cars_workvan_body_electric_flipped",
        "spr_cars_workvan_body_electric",
        "spr_cars_workvan_body_kingofpipes_flipped",
        "spr_cars_workvan_body_kingofpipes",
        "spr_cars_workvan_body_lhf_flipped",
        "spr_cars_workvan_body_lhf",
        "spr_cars_workvan_body_onoffpaints_flipped",
        "spr_cars_workvan_body_onoffpaints",
        "spr_cars_workvan_body_repairnfix_flipped",
        "spr_cars_workvan_body_repairnfix",
        "spr_cars_workvan_body_white",
        "spr_cars_workvan_driver",
        "spr_cars_workvan_prisonertransp_background",
        "spr_cars_workvan_prisonertransp_body",
        "spr_cars_workvan_prisonertransp_wheels",
        "spr_cars_workvan_rust",
        "spr_cars_workvan_wheels",
        "spr_cars_workvan_windows",
        "spr_cc_arrow_left",
        "spr_cc_arrow_right",
        "spr_cc_arrow_small_left",
        "spr_cc_arrow_small_right",
        "spr_cc_car_bg",
        "spr_cc_check_box",
        "spr_cc_diff_bg",
        "spr_cc_dropdown_arrow",
        "spr_cc_license",
        "spr_cc_polaroid_circle",
        "spr_cc_portrait_bg",
        "spr_cc_portrait_button",
        "spr_cc_postit",
        "spr_cc_sp_number_selection",
        "spr_cc_summary_done",
        "spr_cc_temp_choice",
        "spr_cc_top_dot",
        "spr_chocolate",
        "spr_clouds_1",
        "spr_clouds_2",
        "spr_clouds_3",
        "spr_clouds_4",
        "spr_clouds_5",
        "spr_coffee_cafe_spilled",
        "spr_contruction_fence",
        "spr_cosmetic_decal_70sorange_ICON",
        "spr_cosmetic_decal_70sorange",
        "spr_cosmetic_decal_bulletholes_ICON",
        "spr_cosmetic_decal_bulletholes_VOLVO",
        "spr_cosmetic_decal_cheater_ICON",
        "spr_cosmetic_decal_cheater",
        "spr_cosmetic_decal_flames_ICON",
        "spr_cosmetic_decal_flames_VOLVO",
        "spr_cosmetic_decal_gbg_ICON",
        "spr_cosmetic_decal_gbg",
        "spr_cosmetic_decal_gti_ICON",
        "spr_cosmetic_decal_gti_VOLVO",
        "spr_cosmetic_decal_hearts",
        "spr_cosmetic_decal_hemsedal_ICON",
        "spr_cosmetic_decal_hemsedal",
        "spr_cosmetic_decal_keepdriving_ICON",
        "spr_cosmetic_decal_keepdriving_VOLVO",
        "spr_cosmetic_decal_martini_ICON",
        "spr_cosmetic_decal_martini_VOLVO",
        "spr_cosmetic_decal_military_ICON",
        "spr_cosmetic_decal_military",
        "spr_cosmetic_decal_nordica_ICON",
        "spr_cosmetic_decal_nordica_VOLVO",
        "spr_cosmetic_decal_police1_ICON",
        "spr_cosmetic_decal_police1_VOLVO",
        "spr_cosmetic_decal_silverlines_ICON",
        "spr_cosmetic_decal_silverlines",
        "spr_cosmetic_decal_skullbones_ICON",
        "spr_cosmetic_decal_skullbones",
        "spr_cosmetic_decal_spirals_ICON",
        "spr_cosmetic_decal_spirals",
        "spr_cosmetic_decal_stars_ICON",
        "spr_cosmetic_decal_stars_VOLVO",
        "spr_cosmetic_decal_stickers4_ICON",
        "spr_cosmetic_decal_stickers4",
        "spr_cosmetic_decal_stickers5_ICON",
        "spr_cosmetic_decal_stickers5",
        "spr_cosmetic_decal_stripes_ICON",
        "spr_cosmetic_decal_stripes",
        "spr_cosmetic_decal_taxi_ICON",
        "spr_cosmetic_decal_taxi_VOLVO",
        "spr_cosmetic_decal_uglyred_ICON",
        "spr_cosmetic_decal_uglyred",
        "spr_cosmetic_decal_warriorenergy_VOLVO",
        "spr_cosmetic_decal_warriorenergy",
        "spr_cosmetic_decal_wolfmoon_ICON",
        "spr_cosmetic_decal_wolfmoon",
        "spr_cosmetic_extra_hearts_ICON",
        "spr_cosmetic_extra_vandalism2_ICON",
        "spr_cosmetic_extra_vandalism2_VOLVO",
        "spr_cosmetic_extra_vandalism3_ICON",
        "spr_cosmetic_extra_vandalism3_VOLVO",
        "spr_cosmetic_extra_vandalism4_ICON",
        "spr_cosmetic_extra_vandalism4_VOLVO",
        "spr_cosmetic_extra_vandalism5_ICON",
        "spr_cosmetic_extra_vandalism5_VOLVO",
        "spr_cosmetic_extra_vandalism6_ICON",
        "spr_cosmetic_extra_vandalism6_VOLVO",
        "spr_cosmetic_extra_vandalism7_ICON",
        "spr_cosmetic_extra_vandalism7_VOLVO",
        "spr_cosmetic_stickers1_ICON",
        "spr_cosmetic_stickers1_VOLVO",
        "spr_cosmetic_stickers2_ICON",
        "spr_cosmetic_stickers2_VOLVO",
        "spr_creative_europe_icon",
        "spr_credits_robb",
        "spr_credits_title",
        "spr_credits_ycjy",
        "spr_dark_noise",
        "spr_dashboard_bg_bottom_threat",
        "spr_dashboard_bg",
        "spr_dashboard_bigscreen_v2",
        "spr_dashboard_bobble_archie_bob",
        "spr_dashboard_bobble_buddha_bounce",
        "spr_dashboard_bobble_hotline_bob",
        "spr_dashboard_bobble_hulagirl_dance",
        "spr_dashboard_bobble_jesus_bob",
        "spr_dashboard_bobble_luckycat_arm",
        "spr_dashboard_bobble_mulle_bob",
        "spr_dashboard_bobble_postvoid_bob",
        "spr_dashboard_display_big_orange",
        "spr_dashboard_display_big_shadow",
        "spr_dashboard_display_big",
        "spr_dashboard_display_noise",
        "spr_dashboard_display",
        "spr_dashboard_gp_bg_dirty",
        "spr_dashboard_gp_bg",
        "spr_dashboard_gp_hold_meter",
        "spr_dashboard_gp_outline",
        "spr_dashboard_gp_press",
        "spr_dashboard_gp_return",
        "spr_dashboard_gp_skip_effect",
        "spr_dashboard_gp_stuck",
        "spr_dashboard_hula_girl_still",
        "spr_dashboard_hula_girl",
        "spr_dashboard_info_icon",
        "spr_dashboard_perfect_flash",
        "spr_dashboard_threat_bg",
        "spr_dashboard_threat_status_bg",
        "spr_dashboard_threat_status_flash",
        "spr_dashpanel",
        "spr_debug_small_kd_dollar",
        "spr_dennis_van",
        "spr_dest_dot_big",
        "spr_dest_dot",
        "spr_dest_drug_store",
        "spr_dest_exit_sign_sign",
        "spr_dest_icon_animal",
        "spr_dest_icon_cafe",
        "spr_dest_icon_carparts",
        "spr_dest_icon_explore",
        "spr_dest_icon_garage",
        "spr_dest_icon_gas",
        "spr_dest_icon_home",
        "spr_dest_icon_hospital",
        "spr_dest_icon_junkyard",
        "spr_dest_icon_leave",
        "spr_dest_icon_parts",
        "spr_dest_icon_person_hh",
        "spr_dest_icon_person",
        "spr_dest_icon_pub",
        "spr_dest_icon_race",
        "spr_dest_icon_shop",
        "spr_dest_icon_sleep",
        "spr_dest_icon_temp",
        "spr_dest_icon_thrift",
        "spr_dest_icon_work",
        "spr_dest_light_house",
        "spr_dest_shop_gas",
        "spr_dest_shop",
        "spr_dest_work_place_cat",
        "spr_dest_work_place",
        "spr_destination_7_road_farmer_honey_idle",
        "spr_destination_7_road_farmer_truck",
        "spr_destination_road_graveyard_loop",
        "spr_destination_road_graveyard_sides_end",
        "spr_destination_road_graveyard_sides_start",
        "spr_dialogue_bg_point",
        "spr_dialogue_bg",
        "spr_doom_diver",
        "spr_driver_idle",
        "spr_driver_incar_driving_cdchange",
        "spr_driver_incar_driving_cigarette_full",
        "spr_driver_incar_driving_eating",
        "spr_driver_incar_driving_hairfix",
        "spr_driver_incar_driving_lookingback",
        "spr_driver_incar_idle_1a",
        "spr_driver_incar_idle_backrub",
        "spr_driver_incar_idle_yawn",
        "spr_driver_incar_wake_up",
        "spr_driver_inventory_animation",
        "spr_driver_inventory",
        "spr_driver_portrait_female_glasses",
        "spr_driver_portrait_male_glasses",
        "spr_driver_ui_bg",
        "spr_driving_mastery_emblem",
        "spr_dufay_128_bw",
        "spr_dufay_128_bwreal",
        "spr_dufay_128_custom",
        "spr_dufay_128",
        "spr_dufay_64",
        "spr_durability_quarters_destroyed",
        "spr_effect_sleep",
        "spr_ending_police_portrait_mugshot_boy",
        "spr_ending_police_portrait_mugshot_girl",
        "spr_ending_room_book_idle",
        "spr_ending_room_book_pickup",
        "spr_ending_room_bookshelf",
        "spr_ending_room_ceiling",
        "spr_ending_room_door_bedroom",
        "spr_ending_room_door_wc",
        "spr_ending_room_door",
        "spr_ending_room_floor",
        "spr_ending_room_painting_5",
        "spr_ending_room_shelves",
        "spr_ending_room_shower",
        "spr_ending_room_silhouette_2",
        "spr_ending_room_silhouette",
        "spr_ending_room_sky",
        "spr_ending_room_table_things",
        "spr_ending_room_toilet",
        "spr_ending_room_tv",
        "spr_ending_room_wall_bathroom",
        "spr_ending_room_wall_window",
        "spr_ending_room_wall",
        "spr_ending_room_window",
        "spr_enemy_cop_temp",
        "spr_enemy_tree_temp",
        "spr_energy_alert",
        "spr_env_symbol_city",
        "spr_env_symbol_desert",
        "spr_env_symbol_forest",
        "spr_env_symbol_mountain",
        "spr_env_symbol_plain",
        "spr_envelope_arrow",
        "spr_event_track_bg",
        "spr_event_track_border",
        "spr_event_track_icons_map_square_carparts_1",
        "spr_event_track_icons_map_square_dimond",
        "spr_event_track_icons_map_square_fireplace",
        "spr_exp_bg_forest",
        "spr_exp_building",
        "spr_exp_city_boxes",
        "spr_exp_city_container",
        "spr_exp_city_door_dog_done",
        "spr_exp_city_door_dog",
        "spr_exp_city_door_fence",
        "spr_exp_city_door_muggers_done",
        "spr_exp_city_door_muggers",
        "spr_exp_city_dumpster",
        "spr_exp_city_floor",
        "spr_exp_city_props",
        "spr_exp_city_punk_club_done",
        "spr_exp_city_punk_club",
        "spr_exp_city_roof",
        "spr_exp_city_spray",
        "spr_exp_city_vents",
        "spr_exp_city_wall_temp",
        "spr_exp_city_wall",
        "spr_exp_forest_bush_2",
        "spr_exp_forest_bush_3",
        "spr_exp_forest_bush_single_tree_2",
        "spr_exp_forest_bush_single_tree",
        "spr_exp_forest_bush_single_trees",
        "spr_exp_forest_bush",
        "spr_exp_forest_bushes",
        "spr_exp_forest_door_cave",
        "spr_exp_forest_door_rock",
        "spr_exp_forest_door_vines",
        "spr_exp_forest_floor_simple",
        "spr_exp_forest_floor",
        "spr_exp_forest_passage_simple",
        "spr_exp_forest_special",
        "spr_exp_forest_treasure_berry_1",
        "spr_exp_forest_treasure_berry_2",
        "spr_exp_forest_treasure_car",
        "spr_exp_forest_treasure_mushrooms",
        "spr_exp_forest_treasure_shed",
        "spr_exp_forest_treasure_tent",
        "spr_exp_forest_tree",
        "spr_exp_forest_wall_simple",
        "spr_exp_forest_wall",
        "spr_exp_start_sign",
        "spr_exp_tmp_sign",
        "spr_exp_trees",
        "spr_exploration_16_tile",
        "spr_exploration_frame_old",
        "spr_exploration_frame",
        "spr_exploration_sign_city",
        "spr_exploration_sign",
        "spr_explore_arrow_forward_hover",
        "spr_explore_arrow_forward_idle",
        "spr_explore_arrow_forward_shadow",
        "spr_explore_arrow_investigate_hover",
        "spr_explore_arrow_investigate_idle",
        "spr_explore_arrow_investigate_shadow",
        "spr_explore_arrow_side_hover",
        "spr_explore_arrow_side_idle",
        "spr_explore_arrow_side_shadow",
        "spr_explore_backpack_check",
        "spr_explore_backpack",
        "spr_explore_shader_tex",
        "spr_festival_bg_foreground_1",
        "spr_festival_bg_foreground_2",
        "spr_festival_bg_foreground_3",
        "spr_festival_bg_foreground_4",
        "spr_festival_bg_foreground_5",
        "spr_festival_bg_foreground_6",
        "spr_fg_floor_1",
        "spr_fg_floor_2",
        "spr_fg_floor_wide",
        "spr_fg_forest_plant_1",
        "spr_fg_forest_plant_10",
        "spr_fg_forest_plant_11",
        "spr_fg_forest_plant_12",
        "spr_fg_forest_plant_2",
        "spr_fg_forest_plant_3",
        "spr_fg_forest_plant_4",
        "spr_fg_forest_plant_5",
        "spr_fg_forest_plant_6",
        "spr_fg_forest_plant_7",
        "spr_fg_forest_plant_8",
        "spr_fg_forest_plant_9",
        "spr_fg_forest_rock_1",
        "spr_fg_forest_rock_2",
        "spr_fg_forest_rock_3",
        "spr_fg_mask",
        "spr_fg_pine_1",
        "spr_fg_pine_2",
        "spr_fg_pine_3",
        "spr_fg_pine_4",
        "spr_fg_pine_5",
        "spr_fnt_command_line_2",
        "spr_fnt_command_line",
        "spr_fnt_interact",
        "spr_fnt_money_hud",
        "spr_fnt_money",
        "spr_fnt_music_unlock",
        "spr_fnt_road_event",
        "spr_font_menu_titles_exitbar",
        "spr_forest_shadows",
        "spr_foxgrad",
        "spr_fruit_stand",
        "spr_fuel_jerrycan_animated",
        "spr_fuel_nr_font_percent",
        "spr_fuel_pump_loop",
        "spr_fuel_pump",
        "spr_garage_bg_dark",
        "spr_garage_bg",
        "spr_garage_customize_mold",
        "spr_garage_customize_text",
        "spr_garage_hoist_cover",
        "spr_garage_hoist",
        "spr_garage_repair_bg_strip_notfortraits",
        "spr_garage_repair_bg",
        "spr_garage_repair_check",
        "spr_garage_repair_checkbox",
        "spr_garage_repair_circle",
        "spr_garage_screen_tutorial",
        "spr_gas_button_accept",
        "spr_gas_button_cancel",
        "spr_gas_button_refill",
        "spr_gas_display_overlay",
        "spr_gas_interface_bg",
        "spr_gas_interface_font",
        "spr_gas_interface_meter",
        "spr_gas_interface_percent",
        "spr_gas_kd_icon",
        "spr_gas_meter_pointer",
        "spr_gas_pedal_bg",
        "spr_gas_pedal_highlight",
        "spr_gas_pedal_old",
        "spr_gas_pedal_pointer",
        "spr_gas_pedal",
        "spr_gas_pump_town_country_real_light",
        "spr_gas_pump_town_country_real",
        "spr_gas_shop_town_country_real_light",
        "spr_gas_shop_town_country_real",
        "spr_gas_station_pumps_1",
        "spr_gas_station_town_country_double",
        "spr_gas_station_town_country_gas_light",
        "spr_gas_station_town_country_gas",
        "spr_gas_station_town_country_shop_light",
        "spr_gas_station_town_country_shop",
        "spr_gearbox_auto",
        "spr_gearbox_goal",
        "spr_gearbox_old",
        "spr_gearbox_spak",
        "spr_gearbox_stick_hl",
        "spr_gearbox_stick",
        "spr_gearbox",
        "spr_general_store_town_country_light",
        "spr_general_store_town_country",
        "spr_girl_cry_idle",
        "spr_girl_cry_talk",
        "spr_girl_cry",
        "spr_glovebox_bg",
        "spr_glovebox_close",
        "spr_glovebox_itemslots",
        "spr_glovebox_open",
        "spr_glovebox_outline_closed",
        "spr_glovebox_outline_open",
        "spr_glovebox_slot_2",
        "spr_glovebox_slot",
        "spr_gp_icon_dpad_down",
        "spr_gp_icon_dpad_left_and_right",
        "spr_gp_icon_dpad_left",
        "spr_gp_icon_dpad_outline",
        "spr_gp_icon_dpad_right",
        "spr_gp_icon_dpad_up",
        "spr_gp_icon_dpad",
        "spr_gp_icon_face_bg",
        "spr_gp_icon_face1_filled",
        "spr_gp_icon_face1",
        "spr_gp_icon_face2",
        "spr_gp_icon_face3",
        "spr_gp_icon_face4",
        "spr_gp_icon_lb",
        "spr_gp_icon_ls",
        "spr_gp_icon_lt",
        "spr_gp_icon_rb",
        "spr_gp_icon_rs",
        "spr_gp_icon_rt",
        "spr_gp_icon_select_ol",
        "spr_gp_icon_select_small",
        "spr_gp_icon_select",
        "spr_grain_128_bw",
        "spr_grain_128_colored",
        "spr_grasslands_grass_0",
        "spr_grasslands_grass_1",
        "spr_grasslands_grass_10",
        "spr_grasslands_grass_11",
        "spr_grasslands_grass_12",
        "spr_grasslands_grass_13",
        "spr_grasslands_grass_14",
        "spr_grasslands_grass_2",
        "spr_grasslands_grass_3",
        "spr_grasslands_grass_4",
        "spr_grasslands_grass_5",
        "spr_grasslands_grass_6",
        "spr_grasslands_grass_7",
        "spr_grasslands_grass_8",
        "spr_grasslands_grass_9",
        "spr_graveyard_single_grave",
        "spr_hh_bride_button",
        "spr_hh_bride1_incar",
        "spr_hh_bride2_incar",
        "spr_hh_button_bg",
        "spr_hh_button_frame",
        "spr_hh_convict_button",
        "spr_hh_convict_incar",
        "spr_hh_dog_incar",
        "spr_hh_doggie",
        "spr_hh_eve_test",
        "spr_hh_frame_seat",
        "spr_hh_girl_button",
        "spr_hh_girl_incar",
        "spr_hh_girl_rw_big",
        "spr_hh_girl_rw_small",
        "spr_hh_hiker_button",
        "spr_hh_hiker_incar",
        "spr_hh_hitcher_menu_ability_frame",
        "spr_hh_hitcher_menu_ability_locked_opaque",
        "spr_hh_hitcher_menu_ability_locked",
        "spr_hh_hitcher_menu_ability_new",
        "spr_hh_hitcher_menu_ability_passive_frame",
        "spr_hh_hitcher_menu_bg",
        "spr_hh_hitcher_menu_decline_button",
        "spr_hh_hitcher_menu_exp_bar",
        "spr_hh_hitcher_menu_kick_button",
        "spr_hh_hitcher_menu_mockup",
        "spr_hh_hurricane_button",
        "spr_hh_hurricane_hitch",
        "spr_hh_hurricane_idle_1",
        "spr_hh_hurricane_idle_2",
        "spr_hh_hurricane_idle_3",
        "spr_hh_hurricane_incar",
        "spr_hh_hurricane_kicked",
        "spr_hh_hurricane_portrait_hitchermenu",
        "spr_hh_hurricane_rw_big",
        "spr_hh_hurricane_rw_small",
        "spr_hh_idiot_button",
        "spr_hh_idiot_cdplayer",
        "spr_hh_idiot_incar",
        "spr_hh_idiot_portrait_full_hitchermenu",
        "spr_hh_idiot_portrait_full",
        "spr_hh_idiot_portrait_small_seat",
        "spr_hh_idiot_portrait_small",
        "spr_hh_kid_incar",
        "spr_hh_leave_button_bb",
        "spr_hh_leave_button",
        "spr_hh_level_up_symbol",
        "spr_hh_mark_test",
        "spr_hh_mechanic_button",
        "spr_hh_mechanic_incar",
        "spr_hh_mechanic_rw_big",
        "spr_hh_mechanic_rw_small",
        "spr_hh_n_perk",
        "spr_hh_number_bg",
        "spr_hh_or",
        "spr_hh_perk_got",
        "spr_hh_perk_icon_2",
        "spr_hh_perk_icon",
        "spr_hh_perk_locked",
        "spr_hh_pickup_frame",
        "spr_hh_portrait_blocked",
        "spr_hh_portrait_dog",
        "spr_hh_portrait_empty",
        "spr_hh_portrait_eve_test",
        "spr_hh_portrait_hippiegirl",
        "spr_hh_portrait_hurricane",
        "spr_hh_portrait_mark_test",
        "spr_hh_portrait_mechanic",
        "spr_hh_portrait_none",
        "spr_hh_portrait_player",
        "spr_hh_portrait_seat_bg",
        "spr_hh_portrait_steve_test",
        "spr_hh_portrait_suit",
        "spr_hh_portrait_temp",
        "spr_hh_punk_button",
        "spr_hh_punk_incar",
        "spr_hh_seat_highlight",
        "spr_hh_seat",
        "spr_hh_skill_icon",
        "spr_hh_sleep_overlay_small_animated",
        "spr_hh_sleep_overlay_small",
        "spr_hh_sleeper_button",
        "spr_hh_sleeper_incar",
        "spr_hh_songwriter_button",
        "spr_hh_songwriter_idle_2",
        "spr_hh_songwriter_idle_3",
        "spr_hh_songwriter_idle",
        "spr_hh_songwriter_incar",
        "spr_hh_songwriter_portrait_full_hitchermenu",
        "spr_hh_songwriter_portrait_full",
        "spr_hh_songwriter_portrait_small_seat",
        "spr_hh_songwriter_portrait_small",
        "spr_hh_steve_test",
        "spr_hh_stop_button_bb",
        "spr_hh_stop_button",
        "spr_hh_stop_text",
        "spr_hh_stranger_incar",
        "spr_hh_suit_button",
        "spr_hh_suit_incar",
        "spr_hh_suit_rw_big",
        "spr_hh_suit_rw_small",
        "spr_hitchhiker_bride_dress_hitch",
        "spr_hitchhiker_bride_idle_2",
        "spr_hitchhiker_bride_idle",
        "spr_hitchhiker_bride_portrait_full_2",
        "spr_hitchhiker_bride_portrait_full_hitchermenu_2",
        "spr_hitchhiker_bride_portrait_full_hitchermenu",
        "spr_hitchhiker_bride_portrait_full_sleep",
        "spr_hitchhiker_bride_portrait_full",
        "spr_hitchhiker_bride_portrait_small_2",
        "spr_hitchhiker_bride_portrait_small_seat_2",
        "spr_hitchhiker_bride_portrait_small_seat",
        "spr_hitchhiker_bride_portrait_small_v2_sleep",
        "spr_hitchhiker_bride_portrait_small",
        "spr_hitchhiker_bride_trash_idle",
        "spr_hitchhiker_bride2_portrait_full_sleep",
        "spr_hitchhiker_bride2_portrait_small_sleep",
        "spr_hitchhiker_convict_hitch",
        "spr_hitchhiker_convict_idle_2",
        "spr_hitchhiker_convict_idle_3",
        "spr_hitchhiker_convict_idle",
        "spr_hitchhiker_convict_portrait_full_hitchermenu",
        "spr_hitchhiker_convict_portrait_full_sleep",
        "spr_hitchhiker_convict_portrait_full",
        "spr_hitchhiker_convict_portrait_small_empty",
        "spr_hitchhiker_convict_portrait_small_seat",
        "spr_hitchhiker_convict_portrait_small_sleep",
        "spr_hitchhiker_convict_portrait_small",
        "spr_hitchhiker_girl_hitch",
        "spr_hitchhiker_girl_idle_1",
        "spr_hitchhiker_girl_idle_1b",
        "spr_hitchhiker_girl_portrait_full_sleep",
        "spr_hitchhiker_girl_portrait_hitchermenu",
        "spr_hitchhiker_girl_portrait_small_sleep",
        "spr_hitchhiker_girl_sitting",
        "spr_hitchhiker_hiker_hitch",
        "spr_hitchhiker_hiker_idle_2",
        "spr_hitchhiker_hiker_idle_3",
        "spr_hitchhiker_hiker_idle",
        "spr_hitchhiker_hiker_portrait_full_hitchermenu",
        "spr_hitchhiker_hiker_portrait_full_sleep",
        "spr_hitchhiker_hiker_portrait_full",
        "spr_hitchhiker_hiker_portrait_small_seat",
        "spr_hitchhiker_hiker_portrait_small_sleep",
        "spr_hitchhiker_hiker_portrait_small",
        "spr_hitchhiker_idiot_hitch",
        "spr_hitchhiker_idiot_idle_2",
        "spr_hitchhiker_idiot_idle_3",
        "spr_hitchhiker_idiot_idle",
        "spr_hitchhiker_idiot_portrait_full_sleep",
        "spr_hitchhiker_idiot_portrait_small_sleep",
        "spr_hitchhiker_indiechick_portrait_full_sleep",
        "spr_hitchhiker_indiechick_portrait_small_sleep",
        "spr_hitchhiker_kid_button",
        "spr_hitchhiker_kid_hitch",
        "spr_hitchhiker_kid_idle_2",
        "spr_hitchhiker_kid_idle_3",
        "spr_hitchhiker_kid_idle",
        "spr_hitchhiker_kid_pee_end",
        "spr_hitchhiker_kid_pee_loop",
        "spr_hitchhiker_kid_pee_start",
        "spr_hitchhiker_kid_portrait_full_hitchermenu",
        "spr_hitchhiker_kid_portrait_full_sleep",
        "spr_hitchhiker_kid_portrait_full",
        "spr_hitchhiker_kid_portrait_small_seat",
        "spr_hitchhiker_kid_portrait_small_sleep",
        "spr_hitchhiker_kid_quest_parents_police_hug_loop",
        "spr_hitchhiker_kid_quest_parents_police_hug",
        "spr_hitchhiker_kid_quest_parents_police_idle",
        "spr_hitchhiker_kid_quest_parents_police",
        "spr_hitchhiker_kid_small",
        "spr_hitchhiker_mechanic_hitch",
        "spr_hitchhiker_mechanic_idle_fixingcar_2_copy",
        "spr_hitchhiker_mechanic_idle_fixingcar_CAR",
        "spr_hitchhiker_mechanic_idle",
        "spr_hitchhiker_mechanic_portrait_full_sleep",
        "spr_hitchhiker_mechanic_portrait_hitchermenu",
        "spr_hitchhiker_mechanic_portrait_small_sleep",
        "spr_hitchhiker_mechanic_smoke",
        "spr_hitchhiker_punk_dog_button",
        "spr_hitchhiker_punk_dog_idle_sitting_b",
        "spr_hitchhiker_punk_dog_idle_sitting_c",
        "spr_hitchhiker_punk_dog_idle_sitting_d",
        "spr_hitchhiker_punk_dog_idle",
        "spr_hitchhiker_punk_dog_portrait_full_hitchermenu",
        "spr_hitchhiker_punk_dog_portrait_full_sleep",
        "spr_hitchhiker_punk_dog_portrait_full",
        "spr_hitchhiker_punk_dog_portrait_small_seat",
        "spr_hitchhiker_punk_dog_portrait_small_sleep",
        "spr_hitchhiker_punk_dog_portrait_small",
        "spr_hitchhiker_punk_dog_stand_idle_extra",
        "spr_hitchhiker_punk_dog_stand_idle_lick",
        "spr_hitchhiker_punk_dog_stand_idle_lookup",
        "spr_hitchhiker_punk_dog_stand_idle",
        "spr_hitchhiker_punk_dog_stand_yawn",
        "spr_hitchhiker_punk_idle_1a",
        "spr_hitchhiker_punk_idle_petting",
        "spr_hitchhiker_punk_portrait_full_sleep",
        "spr_hitchhiker_punk_portrait_full",
        "spr_hitchhiker_punk_portrait_hitchermenu",
        "spr_hitchhiker_punk_portrait_small_seat",
        "spr_hitchhiker_punk_portrait_small_sleep",
        "spr_hitchhiker_punk_portrait_small",
        "spr_hitchhiker_punk_sitting",
        "spr_hitchhiker_sleeper_idle",
        "spr_hitchhiker_sleeper_portrait_full_hitchermenu",
        "spr_hitchhiker_sleeper_portrait_full_sleep",
        "spr_hitchhiker_sleeper_portrait_full",
        "spr_hitchhiker_sleeper_portrait_small_seat",
        "spr_hitchhiker_sleeper_portrait_small_sleep",
        "spr_hitchhiker_sleeper_portrait_small",
        "spr_hitchhiker_sleeper_stand",
        "spr_hitchhiker_sleeper_tree_v2",
        "spr_hitchhiker_sleeper_wakeup",
        "spr_hitchhiker_songwriter_portrait_full_sleep",
        "spr_hitchhiker_songwriter_portrait_small_sleep",
        "spr_hitchhiker_stranger_button",
        "spr_hitchhiker_stranger_hitch",
        "spr_hitchhiker_stranger_idle_2",
        "spr_hitchhiker_stranger_idle_3",
        "spr_hitchhiker_stranger_idle",
        "spr_hitchhiker_stranger_portrait_full_hitchermenu",
        "spr_hitchhiker_stranger_portrait_full_sleep",
        "spr_hitchhiker_stranger_portrait_full",
        "spr_hitchhiker_stranger_portrait_small_seat",
        "spr_hitchhiker_stranger_portrait_small_sleep",
        "spr_hitchhiker_stranger_portrait_small",
        "spr_hitchhiker_suit_hitch_watch",
        "spr_hitchhiker_suit_hitch",
        "spr_hitchhiker_suit_idle_2",
        "spr_hitchhiker_suit_idle",
        "spr_hitchhiker_suit_portrait_full_sleep",
        "spr_hitchhiker_suit_portrait_hitchermenu",
        "spr_hitchhiker_suit_portrait_small_sleep",
        "spr_hitchhiker_suit_sitting_loop",
        "spr_hitchhiker_suit_sitting_wave",
        "spr_hospital",
        "spr_hostel_2",
        "spr_hostel_bg",
        "spr_hostel_buttons1629",
        "spr_hostel_menu",
        "spr_hostel_town_country_1",
        "spr_hostel_town_country_2",
        "spr_hostel_town_country_3",
        "spr_ib_7_countrytown_employment_light",
        "spr_ib_7_countrytown_mechanic_closed_light",
        "spr_ib_countrytown_mechanic_down",
        "spr_interact_button_old",
        "spr_interact_button",
        "spr_introspection_cloud_1",
        "spr_introspection_cloud_11567",
        "spr_introspection_cloud_1a",
        "spr_introspection_cloud_1a1568",
        "spr_introspection_cloud_1b",
        "spr_introspection_cloud_1c",
        "spr_introspection_cloud_2",
        "spr_introspection_cloud_21569",
        "spr_introspection_cloud_2a",
        "spr_introspection_cloud_2a1570",
        "spr_introspection_cloud_2b",
        "spr_introspection_cloud_2c",
        "spr_introspection_cloud_3",
        "spr_introspection_cloud_3a",
        "spr_introspection_cloud_3b",
        "spr_introspection_cloud_3c",
        "spr_introspection_cloud_4",
        "spr_introspection_cloud_4a",
        "spr_introspection_cloud_4b",
        "spr_introspection_cloud_4c",
        "spr_introspection_frame",
        "spr_inventory_cell",
        "spr_inventory_close_button",
        "spr_inventory_outside_cell_hover_big",
        "spr_inventory_outside_cell_hover",
        "spr_inventory_outside_grid",
        "spr_inventory_seat_64x48_bottom_",
        "spr_inventory_seat_64x48_middle",
        "spr_inventory_seat_64x48_top_",
        "spr_inventory_seat_down_hl",
        "spr_inventory_seat_full_animation_raise",
        "spr_inventory_seat_full_animation",
        "spr_inventory_seat_hl",
        "spr_inventory",
        "spr_item_amp",
        "spr_item_apple",
        "spr_item_aspirin",
        "spr_item_back_exhaust_pipe",
        "spr_item_back_muffler",
        "spr_item_back_spoiler_1",
        "spr_item_back_spoiler_2",
        "spr_item_back_suspension",
        "spr_item_back_tire_holder",
        "spr_item_back_tow_hook_1",
        "spr_item_back_tow_hook_2",
        "spr_item_baguette_half",
        "spr_item_baguette",
        "spr_item_banana",
        "spr_item_bandage",
        "spr_item_bandage2990",
        "spr_item_basket_ball",
        "spr_item_beans",
        "spr_item_beer_can_1",
        "spr_item_beer_can_2",
        "spr_item_beer_can_3",
        "spr_item_beer_can_4",
        "spr_item_beer_case_green",
        "spr_item_berries_blue",
        "spr_item_berries_red",
        "spr_item_book_ac",
        "spr_item_book_bible",
        "spr_item_book_horror",
        "spr_item_book_mich",
        "spr_item_book_mura",
        "spr_item_book_peng",
        "spr_item_book_phil",
        "spr_item_book_poem",
        "spr_item_book_road",
        "spr_item_book_scifi",
        "spr_item_book_slaughter",
        "spr_item_book_surreal",
        "spr_item_book_thirdp",
        "spr_item_book_walden",
        "spr_item_box_big",
        "spr_item_box_medium",
        "spr_item_box_small",
        "spr_item_bulle_2",
        "spr_item_bulle",
        "spr_item_bunny",
        "spr_item_caffeine_pills",
        "spr_item_camera",
        "spr_item_candy_wrapping",
        "spr_item_car_jack",
        "spr_item_carrots",
        "spr_item_cat",
        "spr_item_cd",
        "spr_item_cheese",
        "spr_item_chicken_wings",
        "spr_item_chips_big",
        "spr_item_chips_small",
        "spr_item_cigarettes_2",
        "spr_item_cigarettes_3",
        "spr_item_cigarettes",
        "spr_item_cocaine",
        "spr_item_coffee_cafe_cold",
        "spr_item_coffee_cafe",
        "spr_item_coffee_cold",
        "spr_item_coffee",
        "spr_item_coke_big",
        "spr_item_coke_small",
        "spr_item_compass",
        "spr_item_cooler_big",
        "spr_item_cooler",
        "spr_item_cosmetic_vandalism",
        "spr_item_coupon",
        "spr_item_crowbar",
        "spr_item_dog_food",
        "spr_item_duct_tape",
        "spr_item_egg_jar",
        "spr_item_electric_guitar",
        "spr_item_empty_can",
        "spr_item_engine_breaks",
        "spr_item_engine_carburetor",
        "spr_item_engine_compressor_crappy",
        "spr_item_engine_compressor",
        "spr_item_engine_exhaust_manifold",
        "spr_item_engine_fuel_injection",
        "spr_item_engine_servo",
        "spr_item_engine_sport_breaks",
        "spr_item_engine_sport_intake",
        "spr_item_engine_temp",
        "spr_item_engine_turbo",
        "spr_item_envelope",
        "spr_item_festival_ticket",
        "spr_item_flash_light",
        "spr_item_fries",
        "spr_item_front_lights_2",
        "spr_item_front_lights",
        "spr_item_front_skirts",
        "spr_item_front_under_shield",
        "spr_item_front_under_winch",
        "spr_item_gas_tank_big",
        "spr_item_gum",
        "spr_item_gum2",
        "spr_item_gun",
        "spr_item_happy_pills",
        "spr_item_harmonica",
        "spr_item_honey_1",
        "spr_item_honey_2",
        "spr_item_hot_dog",
        "spr_item_ice_cream",
        "spr_item_idol_hula",
        "spr_item_idol_jacket",
        "spr_item_instant_coffee",
        "spr_item_interior_ac",
        "spr_item_interior_heater",
        "spr_item_interior_idiot_flowers",
        "spr_item_interior_louver",
        "spr_item_interior_roll_cage_crappy",
        "spr_item_interior_roll_cage",
        "spr_item_interior_seat_beads",
        "spr_item_interior_seat_comfy",
        "spr_item_interior_seat_sport",
        "spr_item_interior_speakers",
        "spr_item_interior_steering_wheel_sleeve_1",
        "spr_item_interior_steering_wheel_sleeve_2",
        "spr_item_interior_subwoofer",
        "spr_item_interior_temp",
        "spr_item_juice_box",
        "spr_item_knife_a",
        "spr_item_knife_b",
        "spr_item_knife_small_golden",
        "spr_item_knife_small",
        "spr_item_letters",
        "spr_item_lighter",
        "spr_item_liquor",
        "spr_item_marker",
        "spr_item_matches",
        "spr_item_melodica",
        "spr_item_milkshake",
        "spr_item_multispray",
        "spr_item_mushroom_kant",
        "spr_item_mushroom_karl",
        "spr_item_mushroom_nice",
        "spr_item_mushroom_poison",
        "spr_item_music_cable",
        "spr_item_music_case_big",
        "spr_item_music_case",
        "spr_item_noodles_1",
        "spr_item_noodles_2",
        "spr_item_noodles_3",
        "spr_item_nuts",
        "spr_item_orange",
        "spr_item_pedal_board",
        "spr_item_pie_piece_1",
        "spr_item_pie_piece_2",
        "spr_item_pie",
        "spr_item_pipe",
        "spr_item_pizza",
        "spr_item_porn_a",
        "spr_item_porn_b",
        "spr_item_porn_c",
        "spr_item_portable_stove",
        "spr_item_potatoes",
        "spr_item_ravioli",
        "spr_item_roof_cheap_rack",
        "spr_item_roof_classic_rack",
        "spr_item_roof_good_rack",
        "spr_item_roof_lights",
        "spr_item_roof_temp",
        "spr_item_roof_tent_rack",
        "spr_item_roof_wrap_1",
        "spr_item_roof_wrap_2",
        "spr_item_rope",
        "spr_item_sandwich",
        "spr_item_scrap_1",
        "spr_item_scrap_10",
        "spr_item_scrap_2",
        "spr_item_scrap_3",
        "spr_item_scrap_4",
        "spr_item_scrap_5",
        "spr_item_scrap_6",
        "spr_item_scrap_7",
        "spr_item_scrap_8",
        "spr_item_scrap_9",
        "spr_item_skittles",
        "spr_item_sleeping_bag",
        "spr_item_soap",
        "spr_item_songwriter_guitar",
        "spr_item_spray_beige",
        "spr_item_spray_black",
        "spr_item_spray_blue",
        "spr_item_spray_brown",
        "spr_item_spray_dark_blue",
        "spr_item_spray_dark_gray",
        "spr_item_spray_dark_red",
        "spr_item_spray_green",
        "spr_item_spray_orange",
        "spr_item_spray_pink",
        "spr_item_spray_police",
        "spr_item_spray_pontiac",
        "spr_item_spray_red",
        "spr_item_spray_rootbeer",
        "spr_item_spray_scrap",
        "spr_item_spray_silver",
        "spr_item_spray_sunset",
        "spr_item_spray_teal",
        "spr_item_spray_temp",
        "spr_item_spray_toxic_green",
        "spr_item_spray_white",
        "spr_item_spray_yellow",
        "spr_item_sprite_big",
        "spr_item_sprite_small",
        "spr_item_sunglasses",
        "spr_item_talisman",
        "spr_item_tambourine",
        "spr_item_tea_spilled",
        "spr_item_tea",
        "spr_item_tent",
        "spr_item_toilet_paper",
        "spr_item_toolbox",
        "spr_item_tp_empty",
        "spr_item_trumpet",
        "spr_item_tuna",
        "spr_item_upg_flag_1",
        "spr_item_upg_flag_2",
        "spr_item_upg_flag_3",
        "spr_item_upg_galjon",
        "spr_item_upg_kofangare_1",
        "spr_item_upg_kofangare_2",
        "spr_item_upg_radiator",
        "spr_item_upg_utility_temp",
        "spr_item_video_game",
        "spr_item_watermelon_half",
        "spr_item_watermelon",
        "spr_item_weed_joint",
        "spr_item_weed",
        "spr_item_wheels_city",
        "spr_item_wheels_normal",
        "spr_item_wheels_rally",
        "spr_item_wheels_rims",
        "spr_item_wheels_sport",
        "spr_item_wheels_super",
        "spr_item_wheels_temp",
        "spr_item_wheels_winter",
        "spr_item_whiskey",
        "spr_item_wine_2",
        "spr_item_wine",
        "spr_journal_bg_2",
        "spr_journal_bg",
        "spr_journal_country_bg",
        "spr_journal_girl_talk",
        "spr_journal_girl",
        "spr_journal_hh_button",
        "spr_journal_loadout",
        "spr_journal_mockup_2",
        "spr_journal_mockup",
        "spr_journal_scroll_center",
        "spr_journal_tab_driving",
        "spr_journal_tab_gourmet",
        "spr_journal_tab_hiking",
        "spr_journal_tab_social",
        "spr_journal_tab_thrifty",
        "spr_journal_tab",
        "spr_journal_tape",
        "spr_jrain_1",
        "spr_jrain_2",
        "spr_jrain_wave_2",
        "spr_jrain_wave_2b",
        "spr_jrain_wave_2c",
        "spr_jrain_wave_static",
        "spr_jrain_wave",
        "spr_jrain_waveb",
        "spr_junkyard_guy_still",
        "spr_junkyard_guy_walk",
        "spr_kiosk_korv",
        "spr_knife_mora",
        "spr_land_sign",
        "spr_leopard_distortion_colored",
        "spr_light_source_circle_64",
        "spr_lumberjack_done",
        "spr_lumberjack_idle",
        "spr_lumberjack_talk",
        "spr_lut_clean_64",
        "spr_lut_night_extreme",
        "spr_lut_night_extreme2",
        "spr_lut_overlay_clean",
        "spr_lut_overlay_fuji_fp100c_adj",
        "spr_lut_overlay_fuji_fpplus",
        "spr_lut_overlay_fujifc100",
        "spr_lut_overlay_j1",
        "spr_lut_overlay_kodachrome",
        "spr_lut_overlay_polaroid_px680",
        "spr_lutmap_new_city",
        "spr_lutmap_new_desert",
        "spr_lutmap_new_duskdawn",
        "spr_lutmap_new_night",
        "spr_lutmap_new_rain",
        "spr_main_menu_bg_shade",
        "spr_main_menu_bg_tex",
        "spr_main_menu_bg_things",
        "spr_main_menu_bg",
        "spr_main_menu_bottom_text",
        "spr_main_menu_only_text",
        "spr_main_menu",
        "spr_main_quest_bg_festival",
        "spr_main_quest_bg_inheritance",
        "spr_main_quest_bg_mountain",
        "spr_main_quest_bg_party",
        "spr_main_quest_bg_race",
        "spr_main_quest_bg_rehab",
        "spr_main_quest_bg_small",
        "spr_main_quest_bg_work",
        "spr_main_quest_bg",
        "spr_main_quest_envelope_2",
        "spr_main_quest_envelope_3",
        "spr_main_quest_envelope_overlay",
        "spr_main_quest_envelope",
        "spr_main_title",
        "spr_mainmenu_metamenu_book_full_held",
        "spr_mainmenu_metamenu_prison",
        "spr_mainmenu_metamenu_things_festival",
        "spr_mainmenu_metamenu_things_game_over",
        "spr_mainmenu_metamenu_things_inheritance",
        "spr_mainmenu_metamenu_things_mountain",
        "spr_mainmenu_metamenu_things_original_v2",
        "spr_mainmenu_metamenu_things_original",
        "spr_mainmenu_metamenu_things_party",
        "spr_mainmenu_metamenu_things_race",
        "spr_mainmenu_metamenu_things_rehab",
        "spr_mainmenu_metamenu_things_work",
        "spr_map_anti_lake",
        "spr_map_book_button_small",
        "spr_map_book_button",
        "spr_map_border",
        "spr_map_button_frame",
        "spr_map_calendar_button",
        "spr_map_center_button_new",
        "spr_map_center_button",
        "spr_map_city_part",
        "spr_map_city_texture",
        "spr_map_collapse_button",
        "spr_map_crazy_lines",
        "spr_map_cross",
        "spr_map_desert_part",
        "spr_map_desert_texture",
        "spr_map_dest_blocker_2",
        "spr_map_dest_blocker_3",
        "spr_map_dest_blocker_tiny",
        "spr_map_dest_blocker",
        "spr_map_dest_leave",
        "spr_map_destination_old",
        "spr_map_destination_selectable",
        "spr_map_destination_small_variation",
        "spr_map_destination_small",
        "spr_map_destination_star",
        "spr_map_destination_tiny",
        "spr_map_destination",
        "spr_map_dotted_road_tex",
        "spr_map_drive_button",
        "spr_map_expand_button",
        "spr_map_folds_old",
        "spr_map_folds",
        "spr_map_forest_part",
        "spr_map_forest_texture",
        "spr_map_gas_cross",
        "spr_map_gen_traveller_test_2",
        "spr_map_gen_traveller",
        "spr_map_goal",
        "spr_map_gp_cursor",
        "spr_map_lake_bg",
        "spr_map_lake_connection",
        "spr_map_lake_old",
        "spr_map_lake_texture",
        "spr_map_lake",
        "spr_map_legend_info",
        "spr_map_lines",
        "spr_map_location_button",
        "spr_map_mini_blocker",
        "spr_map_mountain_part_old",
        "spr_map_mountain_part",
        "spr_map_mountain_texture",
        "spr_map_path_blocker",
        "spr_map_path_sprite_bg",
        "spr_map_path_sprite_city",
        "spr_map_path_sprite_country",
        "spr_map_path_sprite_motorway",
        "spr_map_path_sprite_rough",
        "spr_map_path_sprite",
        "spr_map_pen_marker",
        "spr_map_pin_head_arrow",
        "spr_map_pin_head_button_fill_white",
        "spr_map_pin_head_button_fill",
        "spr_map_pin_head_button",
        "spr_map_pin_head_white",
        "spr_map_pin_head",
        "spr_map_pin",
        "spr_map_pointer",
        "spr_map_quest_marker",
        "spr_map_road_info_sign",
        "spr_map_road_shield",
        "spr_map_road_types_city_bg",
        "spr_map_road_types",
        "spr_map_runner",
        "spr_map_select_button",
        "spr_map_side_stop",
        "spr_map_small_cross",
        "spr_map_square",
        "spr_map_time_cross",
        "spr_map_water_dist_checker_large",
        "spr_map_water_dist_checker_medium",
        "spr_map_water_dist_checker_mini",
        "spr_map_water_dist_checker_small",
        "spr_map_water_dist_checker_tiny",
        "spr_map_x_button",
        "spr_map_y_button",
        "spr_mechanic_shop_shop",
        "spr_mechanic_shop",
        "spr_milkshake_broken",
        "spr_moose",
        "spr_mountain_gradient",
        "spr_mouse_music_display",
        "spr_mouse",
        "spr_music_unlock_gradient",
        "spr_noise_alpha_256",
        "spr_noise_alpha_512",
        "spr_noise_bw",
        "spr_noise_color_alpha_64",
        "spr_oc_night_lights_back",
        "spr_oc_night_lights_front",
        "spr_paper_fold_temp",
        "spr_paper_noise_2",
        "spr_paper_noise",
        "spr_party_cabin_light",
        "spr_party_cabin_temp",
        "spr_passive_flash_text",
        "spr_passive_flash_title",
        "spr_pedals_bg",
        "spr_people_camera_girl",
        "spr_people_drugdealer",
        "spr_people_hobo",
        "spr_people_oldfriends_idle",
        "spr_people_priest",
        "spr_people_vwdriver_car_door_close",
        "spr_people_vwdriver_car_door_closed",
        "spr_people_vwdriver_car_door_open_loop",
        "spr_people_vwdriver_car_door_open",
        "spr_people_vwdriver_car_drink",
        "spr_people_vwdriver_car_laying_idle",
        "spr_people_vwdriver_car_laying_loop",
        "spr_people_vwdriver_car_laying_start",
        "spr_people_vwdriver_car_laying",
        "spr_person_dealer",
        "spr_person_old_lady_talk",
        "spr_person_old_lady",
        "spr_pine_big_1a_far",
        "spr_pine_big_1b_far",
        "spr_pine_big_1c_far",
        "spr_pine_big_2a_closebg",
        "spr_pine_big_2b_closebg",
        "spr_pine_big_2c_closebg",
        "spr_pine_medium_1a_closebg",
        "spr_pine_medium_1a_far",
        "spr_pine_medium_1b_closebg",
        "spr_pine_medium_1b_far",
        "spr_pine_medium_1c_closebg",
        "spr_pine_medium_1c_far",
        "spr_pine_medium_2a_closebg",
        "spr_pine_medium_2a_far",
        "spr_pine_medium_2b_closebg",
        "spr_pine_medium_2b_far",
        "spr_pine_medium_2c_closebg",
        "spr_pine_medium_2c_far",
        "spr_pine_short_1a_closebg",
        "spr_pine_short_1a_far",
        "spr_pine_short_1b_closebg",
        "spr_pine_short_1b_far",
        "spr_pine_short_1c_closebg",
        "spr_pine_short_1c_far",
        "spr_pine_short_2a_far",
        "spr_pine_short_2b_far",
        "spr_pine_short_2c_far",
        "spr_pine_small_1a_closebg",
        "spr_pine_small_1b_closebg",
        "spr_pine_small_1c_closebg",
        "spr_pine_small_2a_closebg",
        "spr_pine_small_2b_closebg",
        "spr_pine_small_2c_closebg",
        "spr_pine_smallThin_1a_far",
        "spr_pine_smallThin_1b_far",
        "spr_pine_smallThin_1c_far",
        "spr_pine_smallWide_1a_far",
        "spr_pine_smallWide_1b_far",
        "spr_pine_smallWide_1c_far",
        "spr_pine_spruce_1a_closebg",
        "spr_pine_spruce_1a_far",
        "spr_pine_spruce_1b_closebg",
        "spr_pine_spruce_1b_far",
        "spr_pine_spruce_1c_closebg",
        "spr_pine_spruce_1c_far",
        "spr_pine_spruce_2a_far",
        "spr_pine_spruce_2b_far",
        "spr_pine_spruce_2c_far",
        "spr_pine_thin_1a_far",
        "spr_pine_thin_1b_far",
        "spr_player_car_muscle_background",
        "spr_player_car_muscle_night_lights_2",
        "spr_player_car_muscle_wheel_black",
        "spr_player_car_muscle_wheel_normal_1",
        "spr_player_car_muscle_wheel_pontiac",
        "spr_player_car_muscle_wheel_sport",
        "spr_player_car_muscle_wheel_winter",
        "spr_player_car_muscle_window_foggy",
        "spr_player_car_muscle_window_normal",
        "spr_player_car_muscle_window_tinted",
        "spr_player_car_RALLY_volvo240_bg",
        "spr_player_car_RALLY_volvo240_body",
        "spr_player_car_RALLY_volvo240_driver",
        "spr_player_car_RALLY_volvo240_wheels",
        "spr_player_car_truck_extra_lights",
        "spr_player_car_truck_night_lights_2",
        "spr_player_car_volvo240_background",
        "spr_player_car_volvo240_body_beige",
        "spr_player_car_volvo240_body_black",
        "spr_player_car_volvo240_body_blue",
        "spr_player_car_volvo240_body_bluedark",
        "spr_player_car_volvo240_body_brown",
        "spr_player_car_volvo240_body_coffee",
        "spr_player_car_volvo240_body_gray",
        "spr_player_car_volvo240_body_grayrepairs",
        "spr_player_car_volvo240_body_green",
        "spr_player_car_volvo240_body_highlight",
        "spr_player_car_volvo240_body_orange",
        "spr_player_car_volvo240_body_police",
        "spr_player_car_volvo240_body_red",
        "spr_player_car_volvo240_body_silver",
        "spr_player_car_volvo240_body_teal",
        "spr_player_car_volvo240_body_toxicgreen",
        "spr_player_car_volvo240_body_white",
        "spr_player_car_volvo240_body_yellow",
        "spr_player_car_volvo240_driver_bee",
        "spr_player_car_volvo240_driver_idle",
        "spr_player_car_volvo240_driver_sleeping",
        "spr_player_car_volvo240_driver_sleepy",
        "spr_player_car_volvo240_driver_wake",
        "spr_player_car_volvo240_front_window",
        "spr_player_car_volvo240_night_lamps",
        "spr_player_car_volvo240_night_lights_2",
        "spr_player_car_volvo240_night_lights",
        "spr_player_car_volvo240_wheel_cool_1",
        "spr_player_car_volvo240_wheel_junky",
        "spr_player_car_volvo240_wheel_none",
        "spr_player_car_volvo240_wheel_normal",
        "spr_player_car_volvo240_wheel_rimmed",
        "spr_player_car_volvo240_wheel_trashy",
        "spr_player_car_volvo240_windows_1",
        "spr_player_car_volvo240_windows_foggy",
        "spr_player_menu_bg_city",
        "spr_player_menu_bg_desert",
        "spr_player_menu_bg_forest",
        "spr_player_menu_bg_mountain",
        "spr_player_menu_journal_tab_icon_basic",
        "spr_player_menu_journal_tab_icon_bonus",
        "spr_player_menu_journal_tab_icon_driving",
        "spr_player_menu_journal_tab_icon_gourmet",
        "spr_player_menu_journal_tab_icon_hiking",
        "spr_player_menu_journal_tab_icon_mechanic",
        "spr_player_menu_journal_tab_icon_social",
        "spr_player_menu_scratch_bg",
        "spr_police_car_bg",
        "spr_police_car_body",
        "spr_police_car_driver",
        "spr_police_car_wheel",
        "spr_police_car_windows",
        "spr_police_get_out",
        "spr_police_idle",
        "spr_police_walk",
        "spr_prompt_bg_shadow",
        "spr_prompt_bg",
        "spr_prompt_selection",
        "spr_pskill_img_autorepair",
        "spr_pskill_img_temp_2",
        "spr_pskill_img_temp",
        "spr_quest_board_accept_button",
        "spr_quest_board_decline_button",
        "spr_quest_board_desc_bg",
        "spr_quest_head_symbol",
        "spr_quest_notice_band_van",
        "spr_quest_notice_beer",
        "spr_quest_notice_books",
        "spr_quest_notice_bride",
        "spr_quest_notice_cat",
        "spr_quest_notice_commercial",
        "spr_quest_notice_convict",
        "spr_quest_notice_film",
        "spr_quest_notice_gas",
        "spr_quest_notice_general_1",
        "spr_quest_notice_kid",
        "spr_quest_notice_mail",
        "spr_quest_notice_move",
        "spr_quest_notice_music",
        "spr_quest_notice_pizza",
        "spr_quest_notice_singer",
        "spr_quest_notification",
        "spr_race_crowd",
        "spr_race_goal_front",
        "spr_race_goal_start",
        "spr_race_goal_started",
        "spr_race_goal",
        "spr_race_player_muscle_nr",
        "spr_race_player_pickuptruck_nr",
        "spr_race_player_volvo240_nr",
        "spr_railing_end",
        "spr_railing",
        "spr_rain_bg_temp",
        "spr_rain_front_mask",
        "spr_rain_intensity_tex",
        "spr_rain_tex_128",
        "spr_rain_tex_64",
        "spr_rainbow_opaque",
        "spr_rainbow",
        "spr_rc_menu_bg",
        "spr_rd_continuous_line_1a",
        "spr_rd_continuous_line_1b",
        "spr_rd_continuous_line_1c",
        "spr_rd_continuous_line_1d",
        "spr_rd_continuous_line_1e",
        "spr_rd_continuous_line_2a",
        "spr_rd_continuous_line_2b",
        "spr_rd_continuous_line_2c",
        "spr_rd_continuous_line_2d",
        "spr_rd_continuous_line_2e",
        "spr_rd_dotted_city_line_1a",
        "spr_rd_dotted_city_line_1b",
        "spr_rd_dotted_city_line_1c",
        "spr_rd_dotted_city_line_1d",
        "spr_rd_dotted_city_line_1e",
        "spr_rd_dotted_line_1a",
        "spr_rd_dotted_line_1b",
        "spr_rd_dotted_line_1c",
        "spr_rd_dotted_line_1d",
        "spr_rd_dotted_line_1e",
        "spr_rd_small_country_1",
        "spr_rd_small_country_2",
        "spr_rd_small_country_3",
        "spr_rd_small_country_4",
        "spr_rd_small_country_5",
        "spr_rd_small_country_begin",
        "spr_rd_small_country_end",
        "spr_re_abandoned_car",
        "spr_re_abandoned_hut",
        "spr_re_ambulance_gui",
        "spr_re_bee",
        "spr_re_confused",
        "spr_re_construction_cone_1a",
        "spr_re_construction_cone_1b",
        "spr_re_construction_cone_2",
        "spr_re_construction_cone_sign_1",
        "spr_re_construction_cone_sign_2",
        "spr_re_construction_roadwork",
        "spr_re_construction_worker_digging",
        "spr_re_construction_worker_sign",
        "spr_re_construction_worker_standing",
        "spr_re_cow",
        "spr_re_crash_cars",
        "spr_re_crash_crying",
        "spr_re_crash_smoke",
        "spr_re_cyclist_backlegs",
        "spr_re_cyclist_body",
        "spr_re_cyclist_wheel",
        "spr_re_deer_enter",
        "spr_re_deer_inheadlights",
        "spr_re_deer_runloop",
        "spr_re_dumpster",
        "spr_re_epa_bg",
        "spr_re_epa_driver",
        "spr_re_epa_exhaust",
        "spr_re_epa_main",
        "spr_re_epa_neon_frame",
        "spr_re_epa_wheel",
        "spr_re_epa_window",
        "spr_re_falcon_flap",
        "spr_re_falcon_soar",
        "spr_re_fallen_tree_back",
        "spr_re_fallen_tree_front",
        "spr_re_insect_big_1",
        "spr_re_insect_big_2",
        "spr_re_insect_fg",
        "spr_re_insect_medium_1",
        "spr_re_insect_medium_2",
        "spr_re_insect_small_texture",
        "spr_re_insect_small",
        "spr_re_insect_splat",
        "spr_re_item_common_2",
        "spr_re_item_common_open_effect",
        "spr_re_item_common",
        "spr_re_kids_jumprope",
        "spr_re_kids_playingcards",
        "spr_re_motorcycle_biker_1",
        "spr_re_motorcycle_biker_2",
        "spr_re_motorcycle_biker_3",
        "spr_re_motorcycle_body_1",
        "spr_re_motorcycle_body_2",
        "spr_re_motorcycle_body_3",
        "spr_re_motorcycle_wheel_back",
        "spr_re_motorcycle_wheel_front",
        "spr_re_pothole_1",
        "spr_re_pothole_2",
        "spr_re_pothole_3",
        "spr_re_pothole_4",
        "spr_re_pothole_5",
        "spr_re_pothole_6",
        "spr_re_puddle_1",
        "spr_re_puddle_2",
        "spr_re_puddle_3",
        "spr_re_puddle_4",
        "spr_re_puddle_5",
        "spr_re_puddle_splash_1",
        "spr_re_puddle_splash_2",
        "spr_re_puddle_splash_mud_1",
        "spr_re_puddle_splash_mud_2",
        "spr_re_road_kill",
        "spr_re_sheep_1",
        "spr_re_sheep_2",
        "spr_re_sheep_3",
        "spr_re_sheep_4",
        "spr_re_skate_kid_fail",
        "spr_re_skate_kid_land_end_loop",
        "spr_re_skate_kid_land",
        "spr_re_skate_kids_cheering",
        "spr_re_skate_kids_watching",
        "spr_re_speed_camera_gui",
        "spr_re_speed_camera_world",
        "spr_re_tmp_bee",
        "spr_re_window_cleaner_idle",
        "spr_re_window_cleaner_walk",
        "spr_re_window_cleaner_water",
        "spr_re_window_cleaner_wipe",
        "spr_rear_mirror_bg_muscle",
        "spr_rear_mirror_bg_old",
        "spr_rear_mirror_bg_truck",
        "spr_rear_mirror_bg",
        "spr_rear_mirror_frame_knopp",
        "spr_rear_mirror_frame_mask",
        "spr_rear_mirror_frame_old",
        "spr_rear_mirror_frame",
        "spr_rear_mirror_reflection",
        "spr_rear_mirror_tooltip_bg",
        "spr_refresh_skills_icon",
        "spr_rest_top_button",
        "spr_rm_back_seat_a",
        "spr_rm_back_seat_b",
        "spr_rm_back_seat_c",
        "spr_rm_back_seat",
        "spr_rm_back_seats",
        "spr_rm_front_seat_truck_middle",
        "spr_rm_front_seat_truck_right",
        "spr_rm_front_seat_truck",
        "spr_rm_front_seat",
        "spr_rm_glow",
        "spr_rm_gradient_hl_big",
        "spr_rm_gradient_hl",
        "spr_rm_hh_dog",
        "spr_rm_hh_female",
        "spr_rm_hh_front",
        "spr_rm_hh_male",
        "spr_rm_player_female",
        "spr_rm_player_half",
        "spr_rm_player_temp",
        "spr_rm_player",
        "spr_road_event_armor",
        "spr_road_event_dust_devil",
        "spr_road_event_start_text",
        "spr_road_event_start_warning",
        "spr_road_event_timer_bg",
        "spr_road_event_timer_end",
        "spr_road_event_timer",
        "spr_road_hh_icon",
        "spr_road_info_bg_part",
        "spr_road_info_marker",
        "spr_road_part_bg_3_end",
        "spr_road_part_bg_3_start",
        "spr_road_part_bg_3",
        "spr_road_part_old",
        "spr_road_part",
        "spr_road_sign_actual_temp",
        "spr_road_sign_big_turn_left",
        "spr_road_sign_big_turn_right",
        "spr_road_sign_event",
        "spr_road_sign_s_turn",
        "spr_road_sign_side_stop",
        "spr_road_sign_speed_bg_big",
        "spr_road_sign_speed_bg",
        "spr_road_sign_warning_bg",
        "spr_road_summary_bg",
        "spr_road_summary_event_icon_golden",
        "spr_road_summary_event_icon",
        "spr_road_summary_exp_effect",
        "spr_road_summary_red_line_birth_bigger",
        "spr_road_summary_red_line_birth",
        "spr_road_summary_white_line_birth",
        "spr_road_summary_white_line_loop",
        "spr_road_type_city",
        "spr_road_type_country",
        "spr_road_type_motorway",
        "spr_road_type_rough",
        "spr_roadevent_desert_slowturtle_1framstill",
        "spr_roadevent_desert_snake_v2",
        "spr_roadevent_desert_tumbleweed1",
        "spr_roadevent_desert_tumbleweed2",
        "spr_roadevent_desert_tumbleweed3",
        "spr_roadevent_fallenrocks_backlayer",
        "spr_roadevent_fallenrocks_frontlayer",
        "spr_roadevent_flattire",
        "spr_roadevent_flies_close_lights",
        "spr_roadevent_flies_close_single_lights",
        "spr_roadevent_flies_close_single",
        "spr_roadevent_flies_close_single2_lights",
        "spr_roadevent_flies_close_single2",
        "spr_roadevent_flies_close",
        "spr_roadevent_goats",
        "spr_roadevent_playingchicken_comingup",
        "spr_roadevent_playingchicken_wheel",
        "spr_roadevent_playingchicken",
        "spr_roadevent_police_car_body_headlight_b",
        "spr_roadevent_police_car_body_light_white",
        "spr_roadevent_police_car_body_nightLight_1a",
        "spr_roadevent_police_car_siren_light_postest",
        "spr_roadevent_police_car_siren_light",
        "spr_roadevent_pushingcar_done",
        "spr_roadevent_pushingcar_finish",
        "spr_roadevent_pushingcar",
        "spr_roadevent_thug_animation_1",
        "spr_roadevent_thug_animation_2",
        "spr_roadevent_tractor_driver",
        "spr_roadevent_tractor_toplayerextra",
        "spr_roadevent_tractor_wheelback",
        "spr_roadevent_tractor_wheelfront",
        "spr_roadevent_tractor_window",
        "spr_roadevent_upgivenman",
        "spr_rs_sparkle_1",
        "spr_rs_sparkle_2",
        "spr_rs_sparkle_3",
        "spr_ruins_explore_camp_fire_dead",
        "spr_ruins_explore_camp_fire_light",
        "spr_ruins_explore_camp_fire",
        "spr_ruins",
        "spr_saving_icon",
        "spr_seagull_cruising",
        "spr_seagull_fly",
        "spr_seagull_idle",
        "spr_seagull_scream",
        "spr_shader_dither_pattern_big",
        "spr_shader_dither_pattern",
        "spr_shader_leopard_128",
        "spr_shader_leopard_small",
        "spr_shop_bg_dealer",
        "spr_shop_bg_gas_station",
        "spr_shop_bg_home",
        "spr_shop_bg_market",
        "spr_shop_bg_mechanic",
        "spr_shop_bg_none",
        "spr_shop_bg_supermarket",
        "spr_shop_bg_thrift",
        "spr_shop_close_button",
        "spr_shop_inventory_bg_dealer",
        "spr_shop_inventory_bg_gas_station",
        "spr_shop_inventory_bg_home",
        "spr_shop_inventory_bg_market",
        "spr_shop_inventory_bg_mechanic",
        "spr_shop_inventory_bg_supermarket",
        "spr_shop_inventory_bg_thrift",
        "spr_shop_inventory_bg",
        "spr_side_stop_sign",
        "spr_side_stop_stop_button",
        "spr_sidequest_bandvan_girls_delivered_gas",
        "spr_sidequest_bandvan_girls_delivered_instruments",
        "spr_sidequest_bandvan_girls_delivered_singer",
        "spr_sidequest_bandvan_girls",
        "spr_sidequest_beer_delivered",
        "spr_sidequest_beer",
        "spr_sidequest_catgirl_delivered",
        "spr_sidequest_catgirl",
        "spr_sidequest_filmcrew_delivered",
        "spr_sidequest_filmcrew",
        "spr_sidequest_movingboxes_delivered",
        "spr_sidequest_movingboxes",
        "spr_sidequest_pizzakarl_delivered",
        "spr_sidequest_pizzakarl",
        "spr_sign_guy_buy",
        "spr_sign_guy_hotdog",
        "spr_sign_guy_sock",
        "spr_sign_guy_tool",
        "spr_skill_armor",
        "spr_skill_background_baum",
        "spr_skill_background_camp",
        "spr_skill_background_car_horn",
        "spr_skill_background_daddy",
        "spr_skill_background_deal_maker",
        "spr_skill_background_fired",
        "spr_skill_background_gas_pedal",
        "spr_skill_background_gulp",
        "spr_skill_background_kebab",
        "spr_skill_background_kid_1_polaroid",
        "spr_skill_background_kid_1",
        "spr_skill_background_kid_2",
        "spr_skill_background_kid_3",
        "spr_skill_background_misfits",
        "spr_skill_background_patch_campfire",
        "spr_skill_background_patch_default",
        "spr_skill_background_patch_gas_item",
        "spr_skill_background_patch_improvise",
        "spr_skill_background_patch_major_debt",
        "spr_skill_background_patch_mountain_1",
        "spr_skill_background_patch_nice_wheels",
        "spr_skill_background_patch_raccoon",
        "spr_skill_background_patch_test1",
        "spr_skill_background_patch_test2",
        "spr_skill_background_patch_test3",
        "spr_skill_background_patch_test4",
        "spr_skill_background_patch_walking",
        "spr_skill_background_peace",
        "spr_skill_background_polaroid_35b",
        "spr_skill_background_polaroid_37",
        "spr_skill_background_polaroid_39",
        "spr_skill_background_polaroid_41",
        "spr_skill_background_polaroid_44",
        "spr_skill_background_polaroid_default",
        "spr_skill_background_polaroid_encourage",
        "spr_skill_background_polaroid_fumes",
        "spr_skill_background_polaroid_iconbar_even",
        "spr_skill_background_polaroid_iconbar_odd",
        "spr_skill_background_polaroid_test",
        "spr_skill_background_polaroid_test2",
        "spr_skill_background_polaroid_test3",
        "spr_skill_background_polaroid_test4",
        "spr_skill_background_polaroid_tomato",
        "spr_skill_background_roadtrip",
        "spr_skill_background_sitting_window",
        "spr_skill_background_ticket",
        "spr_skill_background_vitriol",
        "spr_skill_background_walkin",
        "spr_skill_bg_food_2",
        "spr_skill_bg_food_4",
        "spr_skill_bg_journal",
        "spr_skill_bg_polaroid_archie",
        "spr_skill_bg_polaroid_boat",
        "spr_skill_bg_polaroid_cows",
        "spr_skill_bg_polaroid_crafting",
        "spr_skill_bg_polaroid_drive_safe",
        "spr_skill_bg_polaroid_eco_driving",
        "spr_skill_bg_polaroid_fumes",
        "spr_skill_bg_polaroid_gear_down",
        "spr_skill_bg_polaroid_generous",
        "spr_skill_bg_polaroid_have_a_go",
        "spr_skill_bg_polaroid_innocence",
        "spr_skill_bg_polaroid_instruct",
        "spr_skill_bg_polaroid_relax",
        "spr_skill_bg_polaroid_resourceful",
        "spr_skill_bg_polaroid_smooth_talker",
        "spr_skill_bg_polaroid_step_on_it",
        "spr_skill_border_glow",
        "spr_skill_border",
        "spr_skill_circle_bg",
        "spr_skill_circle_frame",
        "spr_skill_clamp_swift",
        "spr_skill_clamp",
        "spr_skill_cost_border",
        "spr_skill_cost_fill_empty",
        "spr_skill_cost_fill",
        "spr_skill_cost_frame",
        "spr_skill_cost_note_d",
        "spr_skill_cost_note_e",
        "spr_skill_cost_note_g",
        "spr_skill_cost_note_m",
        "spr_skill_cost_note_none",
        "spr_skill_cost_note_swift",
        "spr_skill_cost_reduction_effect_old",
        "spr_skill_cost_reduction_effect",
        "spr_skill_dot_example",
        "spr_skill_effect_test",
        "spr_skill_focus_desc_frame_old",
        "spr_skill_focus_desc_frame",
        "spr_skill_focus_learn_button",
        "spr_skill_focus_swift",
        "spr_skill_img_backrub",
        "spr_skill_img_confidence",
        "spr_skill_img_fumble",
        "spr_skill_img_improvise",
        "spr_skill_img_nice_seats",
        "spr_skill_img_passive_temp",
        "spr_skill_img_pocket_change",
        "spr_skill_img_refresh",
        "spr_skill_img_running_on_fumes",
        "spr_skill_img_self_reliance",
        "spr_skill_img_sturdy",
        "spr_skill_img_tmp",
        "spr_skill_journal_unavailable",
        "spr_skill_line_part",
        "spr_skill_menu_frame",
        "spr_skill_menu_hh",
        "spr_skill_menu_player",
        "spr_skill_new_cost_border_bg",
        "spr_skill_new_cost_border",
        "spr_skill_note_icon_d",
        "spr_skill_note_icon_e",
        "spr_skill_note_icon_g",
        "spr_skill_note_icon_m",
        "spr_skill_note_icon_none",
        "spr_skill_note_number_boost",
        "spr_skill_note_number",
        "spr_skill_perfect",
        "spr_skill_play_effect",
        "spr_skill_point_icon",
        "spr_skill_polaroid_food_1",
        "spr_skill_polaroid_food_3",
        "spr_skill_slot_empty",
        "spr_skill_swift",
        "spr_skill_threat_bg",
        "spr_skill_threat_border",
        "spr_skill_threat_point_sep_summary",
        "spr_skill_threat_point_summary",
        "spr_skill_threat_point",
        "spr_skill_threat_separator",
        "spr_skill_tree_icon_basic_big",
        "spr_skill_tree_icon_basic",
        "spr_skill_tree_icon_big",
        "spr_skill_tree_icon_drive_big",
        "spr_skill_tree_icon_drive",
        "spr_skill_tree_icon_gourmet_big",
        "spr_skill_tree_icon_gourmet",
        "spr_skill_tree_icon_hiking_big",
        "spr_skill_tree_icon_hiking",
        "spr_skill_tree_icon_social_big",
        "spr_skill_tree_icon_social",
        "spr_skill_tree_icon_thrifty_big",
        "spr_skill_tree_icon_thrifty",
        "spr_skill_tree_node",
        "spr_skill_tree_tab_basic",
        "spr_skill_uses_bg",
        "spr_skill_uses",
        "spr_sky_clear",
        "spr_sky_rain",
        "spr_slow_driving_sign",
        "spr_small_pixel_msdf",
        "spr_small_plant_0",
        "spr_small_plant_1",
        "spr_small_plant_10",
        "spr_small_plant_2",
        "spr_small_plant_3",
        "spr_small_plant_4",
        "spr_small_plant_5",
        "spr_small_plant_6",
        "spr_small_plant_7",
        "spr_small_plant_8",
        "spr_small_plant_9",
        "spr_snow",
        "spr_social_kick",
        "spr_sound_controller",
        "spr_sound_slider",
        "spr_speech_bubble",
        "spr_speed_bumps",
        "spr_speed_meter_bg",
        "spr_speed_meter_goal",
        "spr_speed_meter_pointer",
        "spr_sss_bg",
        "spr_sss_campsite_small",
        "spr_sss_campsite",
        "spr_sss_culture_small",
        "spr_sss_culture",
        "spr_sss_explore_small",
        "spr_sss_explore",
        "spr_sss_eye",
        "spr_sss_food_small",
        "spr_sss_food",
        "spr_sss_frame_map",
        "spr_sss_gas_small",
        "spr_sss_gas",
        "spr_sss_goal_small",
        "spr_sss_goal",
        "spr_sss_home_small",
        "spr_sss_home",
        "spr_sss_hospital",
        "spr_sss_junkyard_small",
        "spr_sss_junkyard",
        "spr_sss_leave",
        "spr_sss_mechanic_small",
        "spr_sss_mechanic",
        "spr_sss_misc_small",
        "spr_sss_misc",
        "spr_sss_race",
        "spr_sss_shop_parts_small",
        "spr_sss_shop_parts",
        "spr_sss_shop_small",
        "spr_sss_shop_thrift_small",
        "spr_sss_shop_thrift",
        "spr_sss_shop",
        "spr_sss_sleep_small",
        "spr_sss_sleep",
        "spr_sss_talk",
        "spr_sss_work_small",
        "spr_sss_work",
        "spr_stamp_festival",
        "spr_stamp_home",
        "spr_stamp_inheritance",
        "spr_stamp_jail",
        "spr_stamp_lose_old",
        "spr_stamp_lose",
        "spr_stamp_mountain",
        "spr_stamp_none_2",
        "spr_stamp_none_3",
        "spr_stamp_none_4",
        "spr_stamp_none_5",
        "spr_stamp_none_old",
        "spr_stamp_none",
        "spr_stamp_party",
        "spr_stamp_race",
        "spr_stamp_rehab",
        "spr_stamp_work",
        "spr_status_energy_down",
        "spr_status_energy_up",
        "spr_steering_wheel_hl",
        "spr_steering_wheel_pointer",
        "spr_steering_wheel",
        "spr_street_light_big",
        "spr_street_light_default",
        "spr_survey_button",
        "spr_symbol_infinity",
        "spr_t01_bg",
        "spr_t01_black",
        "spr_t01_blue",
        "spr_t01_caramel",
        "spr_t01_dark_green",
        "spr_t01_driver_smol",
        "spr_t01_driver",
        "spr_t01_red",
        "spr_t01_silver",
        "spr_t01_turq",
        "spr_t01_wheel_a",
        "spr_t01_white",
        "spr_t01_windows_a",
        "spr_talk_symbol_bgi",
        "spr_talk_symbol",
        "spr_tcb_7_big_1",
        "spr_tcb_7_big_2",
        "spr_tcb_7_big_3",
        "spr_tcb_7_short_1",
        "spr_tcb_7_short_2",
        "spr_tcb_7_short_3",
        "spr_tcb_7_tall_1",
        "spr_tcb_7_tall_2",
        "spr_tcb_7_tall_3",
        "spr_tcb_line_left",
        "spr_tcb_line_right",
        "spr_tent_fold",
        "spr_tent_in_world",
        "spr_test_car_bg",
        "spr_test_car_wheel",
        "spr_test_car_windows",
        "spr_test_car",
        "spr_text_gas",
        "spr_text_music_note",
        "spr_text_road",
        "spr_text_time",
        "spr_text_weather_fog",
        "spr_text_weather_heat",
        "spr_text_weather_rain",
        "spr_text_weather",
        "spr_threat_attack_effect",
        "spr_threat_obscured",
        "spr_threat_point_attack_spawn",
        "spr_threat_point_attack",
        "spr_threat_point_death",
        "spr_threat_point_highlight",
        "spr_threat_point_kill",
        "spr_threat_point_none",
        "spr_threat_point_outline",
        "spr_threat_point",
        "spr_threat_solution_biggy_chunky",
        "spr_threat_solution_border_side",
        "spr_threat_solution_border",
        "spr_threat_solution_icons_small_all",
        "spr_threat_solution_icons_small_durability",
        "spr_threat_solution_icons_small_energy",
        "spr_threat_solution_icons_small_gas",
        "spr_threat_solution_icons_small_money",
        "spr_threat_solution_icons_small_space",
        "spr_threat_solution_obscured",
        "spr_threat_solution_target_durability",
        "spr_threat_solution_target_energy",
        "spr_threat_solution_target_gas",
        "spr_threat_solution_target_money",
        "spr_threat_solution_wrong",
        "spr_threat_status_attack_example",
        "spr_threat_status_attack_random",
        "spr_threat_status_attack",
        "spr_threat_status_clone",
        "spr_threat_status_crit",
        "spr_threat_status_info_bg",
        "spr_threat_warning_all",
        "spr_threat_warning_car_attack",
        "spr_threat_warning_car_fade",
        "spr_threat_warning_car_status",
        "spr_threat_warning_car",
        "spr_threat_warning_energy_attack",
        "spr_threat_warning_energy_fade",
        "spr_threat_warning_energy_status",
        "spr_threat_warning_energy",
        "spr_threat_warning_gas_attack",
        "spr_threat_warning_gas_fade",
        "spr_threat_warning_gas_status",
        "spr_threat_warning_gas",
        "spr_threat_warning_money_attack",
        "spr_threat_warning_money_fade",
        "spr_threat_warning_money_status",
        "spr_threat_warning_money",
        "spr_threat_warning_none",
        "spr_threat_warning_shielded",
        "spr_threat_warning_status_bomb_explode",
        "spr_threat_warning_status_bomb",
        "spr_threat_warning_status_debuff",
        "spr_threat_warning_status_move",
        "spr_threat_warning_status_redcircle",
        "spr_threat_warning_status_shield_break",
        "spr_threat_warning_status_shield_on_threat",
        "spr_threat_warning_status_shield",
        "spr_threat_warning_status_yellowcircle",
        "spr_time_sun",
        "spr_title_book_old",
        "spr_title_book_photo_frame",
        "spr_title_book_photo",
        "spr_title_book_test",
        "spr_title_book",
        "spr_title_sprite",
        "spr_titlescreen_creativeeurope",
        "spr_titlescreen_ff_test",
        "spr_titlescreen_game_maker_test",
        "spr_titlescreen_kowloon_ca",
        "spr_titlescreen_kowloon",
        "spr_titlescreen_sonigon_test",
        "spr_titlescreen_sonigon_test4209",
        "spr_titlescreen_start_smoker",
        "spr_titlescreen_text_demo_white",
        "spr_titlescreen_ycjy",
        "spr_tmp_car",
        "spr_tmp_effect",
        "spr_tmp_guy",
        "spr_tmp_person",
        "spr_tmp_skill_image",
        "spr_tmp_tree_3_0",
        "spr_tmp_tree_3_1",
        "spr_tmp_tree_3_2",
        "spr_tmp_tree_3_3",
        "spr_tmp_tree_3_4",
        "spr_tmp_tree_3_5",
        "spr_tmp_tree_3_6",
        "spr_tmp_tree_3_7",
        "spr_tmp_tree_3_8",
        "spr_tmp_tree_3_9",
        "spr_tmp",
        "spr_town_country_fountain",
        "spr_tractor_main",
        "spr_traffic_lights_red",
        "spr_traffic_lights",
        "spr_trait_border_big",
        "spr_trait_unlock_bg",
        "spr_tutorial_arrow",
        "spr_ui_bg_backbox",
        "spr_ui_bg_left",
        "spr_ui_bg_right",
        "spr_ui_car_health_empty",
        "spr_ui_car_health_small",
        "spr_ui_car_health",
        "spr_ui_carmenu_calendar",
        "spr_ui_carmenu_journal",
        "spr_ui_carmenu_leave",
        "spr_ui_carmenu_music",
        "spr_ui_carmenu_notification_bg",
        "spr_ui_carmenu_phone",
        "spr_ui_carmenu_radial",
        "spr_ui_carmenu_radialcircle",
        "spr_ui_carmenu_roadmap",
        "spr_ui_carmenu_sleep",
        "spr_ui_carmenu_tmp_leave",
        "spr_ui_carmenu_tmp_phone",
        "spr_ui_carmenu_tmp_tow",
        "spr_ui_carmenu_tmp_walk",
        "spr_ui_carmenu_tow",
        "spr_ui_carmenu_trunk",
        "spr_ui_carmenu_walk",
        "spr_ui_casino_bg",
        "spr_ui_casino_button_addspin",
        "spr_ui_casino_button_cashout",
        "spr_ui_casino_button_pay",
        "spr_ui_casino_coin1",
        "spr_ui_casino_coin1b",
        "spr_ui_casino_coin2",
        "spr_ui_casino_coin2b",
        "spr_ui_casino_coin3",
        "spr_ui_casino_coindrop_bg",
        "spr_ui_casino_icons_1pixel",
        "spr_ui_casino_lever_animation",
        "spr_ui_casino_lever",
        "spr_ui_casino_mockup",
        "spr_ui_casino_money_cashinput",
        "spr_ui_casino_money",
        "spr_ui_casino_nrs_6x9",
        "spr_ui_casino_slotmachine_darkoverlay_v2",
        "spr_ui_casino_slotmachine_darkoverlay",
        "spr_ui_casino_slotmachine_jackpot",
        "spr_ui_casino_slotmachine_v2",
        "spr_ui_casino_slotmachine",
        "spr_ui_cm_gp_circle",
        "spr_ui_divider",
        "spr_ui_energy_block_empty",
        "spr_ui_energy_block_small",
        "spr_ui_energy_block",
        "spr_ui_enter_mask",
        "spr_ui_enter_pattern_over",
        "spr_ui_enter_pattern",
        "spr_ui_grocerystore_receipt_animation",
        "spr_ui_hostel_bell",
        "spr_ui_hostel_button_12_hour",
        "spr_ui_hostel_button_6_hour",
        "spr_ui_hostel_button_new",
        "spr_ui_hostel_day_night_icon",
        "spr_ui_hostel_key",
        "spr_ui_hud_blackout_background",
        "spr_ui_hud_blackout_blackbg_at75percent",
        "spr_ui_hud_blackout_check_car",
        "spr_ui_hud_blackout_check_energy",
        "spr_ui_hud_blackout_check_gas",
        "spr_ui_hud_blackout_highlight",
        "spr_ui_hud_blackout_keepdriving_off_pressed",
        "spr_ui_hud_blackout_keepdriving_on_pressed",
        "spr_ui_hud_blackout_keepdriving_on",
        "spr_ui_hud_blackout_odometer_numbers",
        "spr_ui_hud_blackout_odometer",
        "spr_ui_hud_durability_4_hl",
        "spr_ui_hud_durability_4_new_hide",
        "spr_ui_hud_durability_4_new_hl",
        "spr_ui_hud_durability_4_new",
        "spr_ui_hud_durability_4",
        "spr_ui_hud_durability_empty",
        "spr_ui_hud_durability_half",
        "spr_ui_hud_durability_warning",
        "spr_ui_hud_durability",
        "spr_ui_hud_energy_birth_effect",
        "spr_ui_hud_energy_death_effect",
        "spr_ui_hud_energy_last",
        "spr_ui_hud_energy_removed",
        "spr_ui_hud_energy",
        "spr_ui_hud_gas_full",
        "spr_ui_hud_gas_pointer",
        "spr_ui_hud_gas_single_small",
        "spr_ui_hud_gas_single_tiny",
        "spr_ui_hud_gas_single",
        "spr_ui_hud_gas_warning",
        "spr_ui_hud_left_energy_hover",
        "spr_ui_hud_left_money_hover",
        "spr_ui_hud_left",
        "spr_ui_hud_phone_calling_dad",
        "spr_ui_hud_phone_calling_fail",
        "spr_ui_hud_phone_calling_intro",
        "spr_ui_hud_phone_calling_mom",
        "spr_ui_hud_phone_calling_success_dad",
        "spr_ui_hud_phone_calling_success_mom",
        "spr_ui_hud_right_durability_hover",
        "spr_ui_hud_right_gas_hover",
        "spr_ui_hud_right",
        "spr_ui_hud_skill_point_frame",
        "spr_ui_intro_charactercreation_background_mockup",
        "spr_ui_intro_charactercreation_background",
        "spr_ui_intro_charactercreation_portrait_bg",
        "spr_ui_intro_charactercreation_portrait_flash",
        "spr_ui_intro_charactercreation_portrait_overlay",
        "spr_ui_inventory_extra_metalrack",
        "spr_ui_inventory_extra_roofbox",
        "spr_ui_inventory_extra_shoppingcart",
        "spr_ui_inventory_extra_tirecarrier",
        "spr_ui_inventory_extra_woodrack",
        "spr_ui_inventory_muscle_backseats_down",
        "spr_ui_inventory_muscle_backseats_raise",
        "spr_ui_inventory_muscle_bg",
        "spr_ui_inventory_outsidespace",
        "spr_ui_inventory_truck_bg",
        "spr_ui_inventory_volvo_bg_2",
        "spr_ui_inventory_volvo_bg",
        "spr_ui_inventory_volvo_mockup",
        "spr_ui_left_close_button_bg",
        "spr_ui_left_close_button_calendar",
        "spr_ui_left_close_button_driver",
        "spr_ui_left_close_button_journal",
        "spr_ui_left_close_button_map",
        "spr_ui_left_close_button_trunk",
        "spr_ui_left_close_button",
        "spr_ui_load_icon",
        "spr_ui_menu_backgrounds_country",
        "spr_ui_menu_backgrounds_desert_overlay",
        "spr_ui_menu_backgrounds_desert",
        "spr_ui_menu_backgrounds_layout",
        "spr_ui_menu_backgrounds_night_overlay",
        "spr_ui_menu_junkyard_car_blocker",
        "spr_ui_menu_junkyard_car_interact",
        "spr_ui_menu_junkyard_car_outline_scrap",
        "spr_ui_menu_junkyard_car_outline",
        "spr_ui_menu_junkyard_cars_muscle",
        "spr_ui_menu_junkyard_cars_standard",
        "spr_ui_menu_junkyard_cars_truck",
        "spr_ui_menu_junkyard_cars_van",
        "spr_ui_menu_junkyard_cars_volvo",
        "spr_ui_menu_junkyard_cars00",
        "spr_ui_menu_junkyard_cars01",
        "spr_ui_menu_junkyard_cars02",
        "spr_ui_menu_junkyard_cars03",
        "spr_ui_menu_junkyard_cars04",
        "spr_ui_menu_junkyard_cars05",
        "spr_ui_menu_junkyard_cars06",
        "spr_ui_menu_junkyard_cars07",
        "spr_ui_menu_junkyard_cars08",
        "spr_ui_menu_junkyard_cars09",
        "spr_ui_menu_junkyard_cars10",
        "spr_ui_menu_junkyard_cars11",
        "spr_ui_menu_junkyard_cars12",
        "spr_ui_menu_junkyard_cars13",
        "spr_ui_menu_junkyard_cars14",
        "spr_ui_menu_junkyard_minigame_bar_easy",
        "spr_ui_menu_junkyard_minigame_bar_harder",
        "spr_ui_menu_junkyard_minigame_bar",
        "spr_ui_menu_junkyard_minigame_bg",
        "spr_ui_menu_junkyard_minigame_frame",
        "spr_ui_menu_junkyard_minigame_marker",
        "spr_ui_menu_junkyard_player_press",
        "spr_ui_menu_junkyard_scrap",
        "spr_ui_menu_jy_backgrounds_layout",
        "spr_ui_menu_music_background",
        "spr_ui_menu_music_button_back",
        "spr_ui_menu_music_button_boost_v2",
        "spr_ui_menu_music_button_boost",
        "spr_ui_menu_music_button_eject",
        "spr_ui_menu_music_button_next",
        "spr_ui_menu_music_button_pause",
        "spr_ui_menu_music_button_play",
        "spr_ui_menu_music_button_stop",
        "spr_ui_menu_music_button_temp",
        "spr_ui_menu_music_cd_centered",
        "spr_ui_menu_music_cd_playerBottom",
        "spr_ui_menu_music_cd_playerFront",
        "spr_ui_menu_music_cd_withLESSshine",
        "spr_ui_menu_music_cd",
        "spr_ui_menu_music_display_cd_small",
        "spr_ui_menu_music_display_cd",
        "spr_ui_menu_music_item_cd_big_frame_bigger",
        "spr_ui_menu_music_item_cd_big",
        "spr_ui_menu_music_item_cd_huge",
        "spr_ui_menu_music_loading_bg",
        "spr_ui_menu_music_screen_add",
        "spr_ui_menu_music_screen_folder",
        "spr_ui_menu_music_screen_line",
        "spr_ui_menu_music_screen_scrollbar",
        "spr_ui_menu_music_screen_totop",
        "spr_ui_menu_music_screen",
        "spr_ui_menu_music_topfade",
        "spr_ui_menu_options_arrow",
        "spr_ui_menu_options_bg",
        "spr_ui_menu_options_button",
        "spr_ui_menu_options_exit",
        "spr_ui_menu_options_icon_audio",
        "spr_ui_menu_options_icon_display",
        "spr_ui_menu_options_icon_key_bindings",
        "spr_ui_menu_options_icon_language",
        "spr_ui_menu_options_icon_main",
        "spr_ui_menu_options_selection_icons",
        "spr_ui_menu_options_selection_volume_gp_hover",
        "spr_ui_menu_options_selection_volume_minus",
        "spr_ui_menu_options_selection_volume_plus",
        "spr_ui_menu_options_selection_volume_plus3393",
        "spr_ui_menu_options_selection_volume",
        "spr_ui_menu_options_selection",
        "spr_ui_menu_player_skills_lock_light",
        "spr_ui_menu_player_skills_lock",
        "spr_ui_music_menu_shuffle",
        "spr_ui_passive_effect_text_bg",
        "spr_ui_passive_effect_text_smaller_bg",
        "spr_ui_passive_effect_title_bg",
        "spr_ui_passive_effect_title_smaller_bg",
        "spr_ui_rearviewmirror_muscle_seat_back",
        "spr_ui_rearviewmirror_muscle_seat_front_left",
        "spr_ui_rearviewmirror_muscle_seat_front_right",
        "spr_ui_rearviewmirror_TRUCK_seats_front",
        "spr_ui_rest_mockup2",
        "spr_ui_right_close_button_bg",
        "spr_ui_right_close_button_garage",
        "spr_ui_right_close_button_gas",
        "spr_ui_right_close_button_hh",
        "spr_ui_right_close_button_hostel",
        "spr_ui_right_close_button_map",
        "spr_ui_right_close_button_shop",
        "spr_ui_right_close_button_social",
        "spr_ui_right_close_button_work",
        "spr_ui_right_close_button",
        "spr_ui_save_icon",
        "spr_ui_shop_sell_overlay_nonono",
        "spr_ui_shop_sell_overlay",
        "spr_ui_skill_bride_passive_joyful",
        "spr_ui_skill_bride_passive_runnawaybride",
        "spr_ui_skill_bride_passive_sadness",
        "spr_ui_skill_bride_passive_uncomfortable",
        "spr_ui_skill_bride_polaroid_adventure",
        "spr_ui_skill_bride_polaroid_oldroutines",
        "spr_ui_skill_convict_passive_aidingandabetting",
        "spr_ui_skill_convict_passive_ontherun",
        "spr_ui_skill_convict_passive_scary",
        "spr_ui_skill_convict_passive_soupedup",
        "spr_ui_skill_convict_polaroid_getitdone",
        "spr_ui_skill_convict_skill_increasespeed",
        "spr_ui_skill_dog_polaroid_bark",
        "spr_ui_skill_dog_polaroid_fetch",
        "spr_ui_skill_dog_polaroid_pet",
        "spr_ui_skill_girl_active_backrub",
        "spr_ui_skill_girl_active_nirvana",
        "spr_ui_skill_girl_passive_badvibes",
        "spr_ui_skill_girl_passive_experience",
        "spr_ui_skill_girl_passive_pessimist",
        "spr_ui_skill_girl_polaroid_supercheer",
        "spr_ui_skill_hiker_active_freshair_alt",
        "spr_ui_skill_hiker_active_freshair",
        "spr_ui_skill_hiker_passive_citysucks",
        "spr_ui_skill_hiker_passive_comfortablynumb",
        "spr_ui_skill_hiker_passive_shortcut",
        "spr_ui_skill_hiker_passive_weather",
        "spr_ui_skill_hiker_polaroid_takeitin",
        "spr_ui_skill_hurricane_active_dontworry",
        "spr_ui_skill_hurricane_passive_demanding",
        "spr_ui_skill_hurricane_passive_drinkup",
        "spr_ui_skill_hurricane_passive_messy",
        "spr_ui_skill_hurricane_passive_shoplifting",
        "spr_ui_skill_hurricane_polaroid_yourefun",
        "spr_ui_skill_idiot_active_hmm",
        "spr_ui_skill_idiot_passive_beauty",
        "spr_ui_skill_idiot_passive_flowery",
        "spr_ui_skill_idiot_passive_oblivious",
        "spr_ui_skill_idiot_passive_ocd",
        "spr_ui_skill_idiot_polaroid_what",
        "spr_ui_skill_kid_active_kidgame_2",
        "spr_ui_skill_kid_active_kidgame_3",
        "spr_ui_skill_kid_active_treasure",
        "spr_ui_skill_kid_passive_goodinfluence",
        "spr_ui_skill_kid_passive_imagination",
        "spr_ui_skill_kid_passive_peebreak",
        "spr_ui_skill_kid_passive_sleepatnight",
        "spr_ui_skill_kid_polaroid_innocence",
        "spr_ui_skill_kid_polaroid_kidgame_1",
        "spr_ui_skill_mechanic_active_quickfix",
        "spr_ui_skill_mechanic_passive_autorepair",
        "spr_ui_skill_mechanic_passive_smoker",
        "spr_ui_skill_mechanic_passive_upgradeanywhere",
        "spr_ui_skill_mechanic_passive_upgradedependant",
        "spr_ui_skill_mechanic_polaroid_troubleshoot_b",
        "spr_ui_skill_punk_active_adhd",
        "spr_ui_skill_punk_active_bastardsofyoung",
        "spr_ui_skill_punk_active_greenhell",
        "spr_ui_skill_punk_passive_dog",
        "spr_ui_skill_punk_passive_friendofdog",
        "spr_ui_skill_punk_passive_straightedge",
        "spr_ui_skill_sleeper_active_alwaystired",
        "spr_ui_skill_sleeper_active_bolster",
        "spr_ui_skill_sleeper_passive_narcolepsy",
        "spr_ui_skill_sleeper_passive_smokesleep_alt",
        "spr_ui_skill_sleeper_passive_smokesleep",
        "spr_ui_skill_sleeper_passive_snore",
        "spr_ui_skill_sleeper_polaroid_tiredtry",
        "spr_ui_skill_songwriter_active_soothingblues",
        "spr_ui_skill_songwriter_active_streetmusic",
        "spr_ui_skill_songwriter_passive_attention",
        "spr_ui_skill_songwriter_passive_businesspartners",
        "spr_ui_skill_songwriter_passive_guitarcase",
        "spr_ui_skill_songwriter_polaroid_moodymelody",
        "spr_ui_skill_stranger_active_biggamble",
        "spr_ui_skill_stranger_active_bribe",
        "spr_ui_skill_stranger_passive_creepy",
        "spr_ui_skill_stranger_passive_gambler",
        "spr_ui_skill_stranger_passive_sharks",
        "spr_ui_skill_stranger_polaroid_problemsolving",
        "spr_ui_skill_suit_active_exploit",
        "spr_ui_skill_suit_active_goinghome",
        "spr_ui_skill_suit_passive_sadandboring",
        "spr_ui_skill_suit_passive_sloppywork",
        "spr_ui_skill_suit_passive_taxesdue",
        "spr_ui_skill_suit_polaroid_excuse",
        "spr_ui_social_bar_overlay",
        "spr_ui_social_board_b",
        "spr_ui_social_board_random1",
        "spr_ui_social_board_random2",
        "spr_ui_social_board_random3",
        "spr_ui_social_board_random4",
        "spr_ui_social_board_random5",
        "spr_ui_social_board_random6",
        "spr_ui_social_board_random7",
        "spr_ui_social_board_randompaper",
        "spr_ui_social_board_silhouette_sprite_cafe_1",
        "spr_ui_social_board_silhouette_sprite_cafe_loop",
        "spr_ui_social_board_silhouette_sprite_park_loop",
        "spr_ui_social_board_silhouette_sprite_pub_1",
        "spr_ui_social_board_silhouette_sprite_pub_2",
        "spr_ui_social_board",
        "spr_ui_social_cafe_overlay",
        "spr_ui_social_park_overlay",
        "spr_ui_top_close_button_close_gp_B",
        "spr_ui_top_close_button_close",
        "spr_ui_top_close_exit_hover",
        "spr_ui_top_menu_bg",
        "spr_ui_trait_list_segment",
        "spr_ui_trait_list_top",
        "spr_ui_tutorial_movingcar_gp",
        "spr_ui_tutorial_movingcar",
        "spr_upgrade_bg",
        "spr_upgrade_item_back_shitty_exhaustpipe_MUSCLE",
        "spr_upgrade_item_back_shitty_exhaustpipe_TRUCK",
        "spr_upgrade_item_back_shitty_exhaustpipe_VOLVO",
        "spr_upgrade_item_back_shittyexhaust",
        "spr_upgrade_item_engine_improvedbattery",
        "spr_upgrade_item_engine_jumpercables",
        "spr_upgrade_item_engine_redblock",
        "spr_upgrade_item_engine_usedcamshaft",
        "spr_upgrade_item_front_snowplow_MUSCLE",
        "spr_upgrade_item_front_snowplow_TRUCK",
        "spr_upgrade_item_front_snowplow_VOLVO",
        "spr_upgrade_item_front_snowplow",
        "spr_upgrade_item_interior_cupholders",
        "spr_upgrade_item_interior_dirtycushions",
        "spr_upgrade_item_interior_fuzz_VOLVO",
        "spr_upgrade_item_interior_fuzz",
        "spr_upgrade_item_interior_lock",
        "spr_upgrade_item_interior_oldseats",
        "spr_upgrade_item_utilityback_extratireholder_full_VOLVO",
        "spr_upgrade_item_utilityfront_flag1_TRUCK",
        "spr_upgrade_item_utilityfront_flag2_TRUCK",
        "spr_upgrade_item_utilityfront_flag3_TRUCK",
        "spr_upgrade_item_wheels_junky",
        "spr_upgrade_item_wheels_trashy",
        "spr_vague_lanes",
        "spr_vending_machine_blue_light",
        "spr_vending_machine_blue",
        "spr_vignette_nightfall_final",
        "spr_vignette_sunrise_final",
        "spr_water_drop",
        "spr_watermark",
        "spr_white_pixel",
        "spr_wine_glass",
        "spr_wishlist_button",
        "spr_work_computer_background_start",
        "spr_work_computer_background",
        "spr_work_computer_energybar",
        "spr_work_computer_joblisting_currency",
        "spr_work_computer_overlay_vignette",
        "spr_work_computer_power_on_light",
        "spr_work_computer_prompt_button_hl",
        "spr_work_computer_prompt",
        "spr_work_computer_screen_higlights",
        "spr_work_computer_screen_overlay",
        "spr_work_computer_screen_scanlines",
        "spr_work_computer_verticalscroller",
        "spr_work_listing_bg_selected",
        "spr_work_listing_bg",
        "sprite196",
        "sprPeopleWalk0Drunkman1",
        "sprPeopleWalk0Drunkman3",
        "sprPeopleWalk1BizLady1",
        "sprPeopleWalk1BizLady2",
        "sprPeopleWalk1BizLady3",
        "sprPeopleWalk1BizLady4",
        "sprPeopleWalk1BizLady5",
        "sprPeopleWalk1BizLady6",
        "sprPeopleWalk1BizLady7",
        "sprPeopleWalk1BizLady8",
        "sprPeopleWalk1Drunkman_full",
        "sprPeopleWalk1Drunkman2",
        "sprPeopleWalk1Drunkman4",
        "sprPeopleWalk1FreezingMan1",
        "sprPeopleWalk1OldLady1",
        "sprPeopleWalk1OldLady2",
        "sprPeopleWalk1OldMan1",
        "sprPeopleWalk1UmbrellaBizLady1",
        "sprPeopleWalk1UmbrellaBizLady2",
        "sprPeopleWalk1UmbrellaBizLady3",
        "sprPeopleWalk1UmbrellaBizLady4",
        "sprPeopleWalk1UmbrellaBizLady5",
        "sprPeopleWalk1UmbrellaBizLady6",
        "sprPeopleWalk1UmbrellaBizLady7",
        "sprPeopleWalk1UmbrellaBizLady8",
        "sprPeopleWalk1UmbrellaOldMan1",
        "sprPeopleWalk2BackpackTeen1",
        "sprPeopleWalk2BackpackTeen2",
        "sprPeopleWalk2BagGirl1",
        "sprPeopleWalk2BagGirl2",
        "sprPeopleWalk2Coolguy1",
        "sprPeopleWalk2Coolguy2",
        "sprPeopleWalk2HipHopDude1",
        "sprPeopleWalk2JacketGirl1",
        "sprPeopleWalk2SoccerMom1",
        "sprPeopleWalk2TrashPosh1",
        "sprPeopleWalk2TrashPosh2",
        "sprPeopleWalk2Twin1",
        "sprPeopleWalk2Twin2",
        "sprPeopleWalk2UmbrellaBagGirl1",
        "sprPeopleWalk2UmbrellaCoolguy2",
        "sprPeopleWalk2UmbrellaJacketGirl1",
        "sprPeopleWalk2UmbrellaSoccerMom1",
        "sprPeopleWalk2UmbrellaTwin1",
        "sprPeopleWalk2UmbrellaTwin2",
        "sprPeopleWalk3Baggyman1",
        "sprPeopleWalk3Baggyman2",
        "sprPeopleWalk3Baggyman3",
        "sprPeopleWalk3FreezingGirl1",
        "sprPeopleWalk3JacketDude1",
        "sprPeopleWalk3Salary1",
        "sprPeopleWalk3Salary10",
        "sprPeopleWalk3Salary2",
        "sprPeopleWalk3Salary3",
        "sprPeopleWalk3Salary4",
        "sprPeopleWalk3Salary5",
        "sprPeopleWalk3Salary6",
        "sprPeopleWalk3Salary7",
        "sprPeopleWalk3Salary8",
        "sprPeopleWalk3Salary9",
        "sprPeopleWalk3SalesMan1",
        "sprPeopleWalk3UmbrellaFrozenGirl1",
        "sprPeopleWalk3UmbrellaSalery1",
        "sprPeopleWalk3UmbrellaSalery2",
        "sprPeopleWalk3UmbrellaSalery4",
        "sprPeopleWalk3UmbrellaSalery7",
        "sprPeopleWalk3UmbrellaSalery8",
        "sprPeopleWalk3UmbrellaSalery9",
        "sprPeopleWalk3UmbrellaSalesMan1",
        "sprPeopleWalk6Runner1",
        "sprPeopleWalk6Runner2",
        "sprPeopleWalk6Runner24445",
        "wine_glass_spilled",
        "__input_axis_is_directional",
        "gml_Script___input_axis_is_directional",
        "__input_binding_get_label",
        "gml_Script___input_binding_get_label",
        "gml_Script___set_empty@anon@191@__input_class_binding@__input_class_binding",
        "gml_Script_toString@anon@902@__input_class_binding@__input_class_binding",
        "gml_Script___source_type_get@anon@1803@__input_class_binding@__input_class_binding",
        "gml_Script___gamepad_set@anon@2789@__input_class_binding@__input_class_binding",
        "gml_Script___gamepad_get@anon@3074@__input_class_binding@__input_class_binding",
        "gml_Script___threshold_set@anon@3208@__input_class_binding@__input_class_binding",
        "gml_Script____struct___0@__threshold_get@anon@3366@__input_class_binding@__input_class_binding",
        "gml_Script___threshold_get@anon@3366@__input_class_binding@__input_class_binding",
        "gml_Script____struct___1@__export@anon@3522@__input_class_binding@__input_class_binding",
        "gml_Script___export@anon@3522@__input_class_binding@__input_class_binding",
        "gml_Script____struct___2@__import@anon@4281@__input_class_binding@__input_class_binding",
        "gml_Script___import@anon@4281@__input_class_binding@__input_class_binding",
        "gml_Script___set_android_lowercase@anon@9283@__input_class_binding@__input_class_binding",
        "gml_Script___duplicate@anon@10218@__input_class_binding@__input_class_binding",
        "gml_Script___set_key@anon@10889@__input_class_binding@__input_class_binding",
        "gml_Script___set_gamepad_axis@anon@12831@__input_class_binding@__input_class_binding",
        "gml_Script___set_gamepad_button@anon@13108@__input_class_binding@__input_class_binding",
        "gml_Script___set_mouse_button@anon@13326@__input_class_binding@__input_class_binding",
        "gml_Script___set_mouse_wheel_down@anon@13739@__input_class_binding@__input_class_binding",
        "gml_Script___set_mouse_wheel_up@anon@13923@__input_class_binding@__input_class_binding",
        "gml_Script___set_virtual_button@anon@14105@__input_class_binding@__input_class_binding",
        "gml_Script___set_label@anon@14278@__input_class_binding@__input_class_binding",
        "gml_Script___get_source_type@anon@14586@__input_class_binding@__input_class_binding",
        "gml_Script___input_class_binding",
        "__input_class_chord_definition",
        "gml_Script___input_class_chord_definition",
        "__input_class_chord_state",
        "gml_Script___evaluate@anon@380@__input_class_chord_state@__input_class_chord_state",
        "gml_Script___input_class_chord_state",
        "__input_class_cursor",
        "gml_Script___set@anon@1205@__input_class_cursor@__input_class_cursor",
        "gml_Script___translate@anon@1569@__input_class_cursor@__input_class_cursor",
        "gml_Script___tick@anon@2303@__input_class_cursor@__input_class_cursor",
        "gml_Script___limit@anon@7317@__input_class_cursor@__input_class_cursor",
        "gml_Script___input_class_cursor",
        "__input_class_gamepad_mapping",
        "gml_Script___tick@anon@1434@__input_class_gamepad_mapping@__input_class_gamepad_mapping",
        "gml_Script___calibrate@anon@5008@__input_class_gamepad_mapping@__input_class_gamepad_mapping",
        "gml_Script___input_class_gamepad_mapping",
        "__input_class_gamepad_motion",
        "gml_Script____struct___3@__input_class_gamepad_motion@__input_class_gamepad_motion",
        "gml_Script___tick@anon@299@__input_class_gamepad_motion@__input_class_gamepad_motion",
        "gml_Script___clear@anon@4470@__input_class_gamepad_motion@__input_class_gamepad_motion",
        "gml_Script___get_data@anon@4689@__input_class_gamepad_motion@__input_class_gamepad_motion",
        "gml_Script___input_class_gamepad_motion",
        "__input_class_gamepad",
        "gml_Script____struct___6@__discover@anon@1671@__input_class_gamepad@__input_class_gamepad",
        "gml_Script____struct___7@__discover@anon@1671@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___discover@anon@1671@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___get_any_pressed@anon@2842@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___get_held@anon@3948@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___get_pressed@anon@4172@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___get_released@anon@4398@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___get_value@anon@4623@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___get_delta@anon@4844@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___is_axis@anon@5069@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___set_custom_mapping@anon@5299@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___set_mapping@anon@6641@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___set_face_button_mapping@anon@7809@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___set_dpad_and_thumbstick_mapping@anon@8158@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___set_dpad_hat_mapping@anon@8303@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___set_thumbstick_axis_mapping@anon@8863@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___tick@anon@9639@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___swap_ab@anon@17810@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___virtual_set@anon@18398@__input_class_gamepad@__input_class_gamepad",
        "gml_Script____struct___8@__led_set@anon@20357@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___led_set@anon@20357@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___color_set@anon@22507@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___vibration_initialize@anon@23444@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___vibration_set@anon@24298@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___trigger_effect_apply@anon@24509@__input_class_gamepad@__input_class_gamepad",
        "gml_Script____struct___4@__input_class_gamepad@__input_class_gamepad",
        "gml_Script____struct___5@__input_class_gamepad@__input_class_gamepad",
        "gml_Script___input_class_gamepad",
        "__input_class_icon_category",
        "gml_Script_add@anon@215@__input_class_icon_category@__input_class_icon_category",
        "gml_Script____struct___9@__input_class_icon_category@__input_class_icon_category",
        "gml_Script___input_class_icon_category",
        "__input_class_player",
        "gml_Script____struct___15@__profile_create@anon@1982@__input_class_player@__input_class_player",
        "gml_Script___profile_create@anon@1982@__input_class_player@__input_class_player",
        "gml_Script___profile_destroy@anon@3026@__input_class_player@__input_class_player",
        "gml_Script___profile_exists@anon@3668@__input_class_player@__input_class_player",
        "gml_Script___profile_get_array@anon@3872@__input_class_player@__input_class_player",
        "gml_Script___profile_set@anon@3991@__input_class_player@__input_class_player",
        "gml_Script___profile_get@anon@4679@__input_class_player@__input_class_player",
        "gml_Script___profile_get_auto@anon@5073@__input_class_player@__input_class_player",
        "gml_Script___profile_set_auto@anon@6374@__input_class_player@__input_class_player",
        "gml_Script____struct___16@__profile_ensure@anon@6586@__input_class_player@__input_class_player",
        "gml_Script___profile_ensure@anon@6586@__input_class_player@__input_class_player",
        "gml_Script___profile_reset_bindings@anon@7420@__input_class_player@__input_class_player",
        "gml_Script____struct___17@__profile_export@anon@7924@__input_class_player@__input_class_player",
        "gml_Script___profile_export@anon@7924@__input_class_player@__input_class_player",
        "gml_Script___profile_import@anon@9284@__input_class_player@__input_class_player",
        "gml_Script___sources_clear@anon@12299@__input_class_player@__input_class_player",
        "gml_Script___source_add@anon@13368@__input_class_player@__input_class_player",
        "gml_Script___source_remove@anon@14640@__input_class_player@__input_class_player",
        "gml_Script___source_contains@anon@16132@__input_class_player@__input_class_player",
        "gml_Script___source_get_gamepad@anon@17273@__input_class_player@__input_class_player",
        "gml_Script___sources_any_rebind_allowed_input@anon@17621@__input_class_player@__input_class_player",
        "gml_Script___sources_validate_binding@anon@17965@__input_class_player@__input_class_player",
        "gml_Script___binding_get@anon@18419@__input_class_player@__input_class_player",
        "gml_Script___binding_set@anon@24647@__input_class_player@__input_class_player",
        "gml_Script___binding_remove@anon@30353@__input_class_player@__input_class_player",
        "gml_Script___binding_reset@anon@31025@__input_class_player@__input_class_player",
        "gml_Script___verb_group_ensure@anon@32354@__input_class_player@__input_class_player",
        "gml_Script___verb_group_active@anon@32553@__input_class_player@__input_class_player",
        "gml_Script___verb_group_is_active@anon@34622@__input_class_player@__input_class_player",
        "gml_Script___verb_ensure@anon@34773@__input_class_player@__input_class_player",
        "gml_Script___add_complex_verb@anon@36288@__input_class_player@__input_class_player",
        "gml_Script___add_chord_state@anon@37281@__input_class_player@__input_class_player",
        "gml_Script____struct___18@__axis_threshold_set@anon@37888@__input_class_player@__input_class_player",
        "gml_Script___axis_threshold_set@anon@37888@__input_class_player@__input_class_player",
        "gml_Script___axis_threshold_get@anon@38486@__input_class_player@__input_class_player",
        "gml_Script___verb_set@anon@39231@__input_class_player@__input_class_player",
        "gml_Script___verb_set_from_virtual@anon@39589@__input_class_player@__input_class_player",
        "gml_Script____struct___19@__get_invalid_gamepad_bindings@anon@40105@__input_class_player@__input_class_player",
        "gml_Script___get_invalid_gamepad_bindings@anon@40105@__input_class_player@__input_class_player",
        "gml_Script____struct___20@__export@anon@42374@__input_class_player@__input_class_player",
        "gml_Script____struct___21@__export@anon@42374@__input_class_player@__input_class_player",
        "gml_Script____struct___22@__export@anon@42374@__input_class_player@__input_class_player",
        "gml_Script____struct___23@__export@anon@42374@__input_class_player@__input_class_player",
        "gml_Script____struct___24@__export@anon@42374@__input_class_player@__input_class_player",
        "gml_Script___export@anon@42374@__input_class_player@__input_class_player",
        "gml_Script____struct___25@__import@anon@44705@__input_class_player@__input_class_player",
        "gml_Script____struct___26@__import@anon@44705@__input_class_player@__input_class_player",
        "gml_Script___import@anon@44705@__input_class_player@__input_class_player",
        "gml_Script____struct___27@__reset@anon@52497@__input_class_player@__input_class_player",
        "gml_Script___reset@anon@52497@__input_class_player@__input_class_player",
        "gml_Script___vibration_add_event@anon@53693@__input_class_player@__input_class_player",
        "gml_Script___trigger_effect_set@anon@54063@__input_class_player@__input_class_player",
        "gml_Script___trigger_effect_pause@anon@55227@__input_class_player@__input_class_player",
        "gml_Script____struct___28@__motion_data_get@anon@55647@__input_class_player@__input_class_player",
        "gml_Script___motion_data_get@anon@55647@__input_class_player@__input_class_player",
        "gml_Script___gyro_enabled_set@anon@57604@__input_class_player@__input_class_player",
        "gml_Script___mouse_enabled_set@anon@59500@__input_class_player@__input_class_player",
        "gml_Script___tick@anon@59633@__input_class_player@__input_class_player",
        "gml_Script___tick_basic_verbs@anon@61397@__input_class_player@__input_class_player",
        "gml_Script___tick_chord_verbs@anon@61691@__input_class_player@__input_class_player",
        "gml_Script___tick_vibration@anon@62443@__input_class_player@__input_class_player",
        "gml_Script___color_set@anon@64004@__input_class_player@__input_class_player",
        "gml_Script___tick_binding_scan@anon@64440@__input_class_player@__input_class_player",
        "gml_Script___binding_scan_success@anon@68658@__input_class_player@__input_class_player",
        "gml_Script___binding_scan_failure@anon@69385@__input_class_player@__input_class_player",
        "gml_Script____struct___10@__input_class_player@__input_class_player",
        "gml_Script____struct___11@__input_class_player@__input_class_player",
        "gml_Script____struct___12@__input_class_player@__input_class_player",
        "gml_Script____struct___13@__input_class_player@__input_class_player",
        "gml_Script____struct___14@__input_class_player@__input_class_player",
        "gml_Script___input_class_player",
        "gml_Script_toString@anon@860@__input_class_source@__input_class_source",
        "gml_Script___is_connected@anon@944@__input_class_source@__input_class_source",
        "gml_Script___equal_to@anon@1465@__input_class_source@__input_class_source",
        "gml_Script___scan_for_binding@anon@2058@__input_class_source@__input_class_source",
        "gml_Script___validate_binding@anon@2993@__input_class_source@__input_class_source",
        "gml_Script___input_class_source",
        "gml_Script_anon@9012@__input_source_scan_for_binding@__input_class_source",
        "gml_Script___input_source_scan_for_binding",
        "__input_class_trigger_effect_feedback",
        "gml_Script___steam_get_state@anon@427@__input_class_trigger_effect_feedback@__input_class_trigger_effect_feedback",
        "gml_Script___apply_ps5@anon@756@__input_class_trigger_effect_feedback@__input_class_trigger_effect_feedback",
        "gml_Script____struct___29@__input_class_trigger_effect_feedback@__input_class_trigger_effect_feedback",
        "gml_Script___input_class_trigger_effect_feedback",
        "__input_class_trigger_effect_off",
        "gml_Script___steam_get_state@anon@237@__input_class_trigger_effect_off@__input_class_trigger_effect_off",
        "gml_Script___apply_ps5@anon@357@__input_class_trigger_effect_off@__input_class_trigger_effect_off",
        "gml_Script____struct___30@__input_class_trigger_effect_off@__input_class_trigger_effect_off",
        "gml_Script___input_class_trigger_effect_off",
        "__input_class_trigger_effect_vibration",
        "gml_Script___apply_ps5@anon@527@__input_class_trigger_effect_vibration@__input_class_trigger_effect_vibration",
        "gml_Script___steam_get_state@anon@843@__input_class_trigger_effect_vibration@__input_class_trigger_effect_vibration",
        "gml_Script____struct___31@__input_class_trigger_effect_vibration@__input_class_trigger_effect_vibration",
        "gml_Script___input_class_trigger_effect_vibration",
        "__input_class_trigger_effect_weapon",
        "gml_Script___apply_ps5@anon@542@__input_class_trigger_effect_weapon@__input_class_trigger_effect_weapon",
        "gml_Script___steam_get_state@anon@863@__input_class_trigger_effect_weapon@__input_class_trigger_effect_weapon",
        "gml_Script____struct___32@__input_class_trigger_effect_weapon@__input_class_trigger_effect_weapon",
        "gml_Script___input_class_trigger_effect_weapon",
        "__input_class_verb_state",
        "gml_Script___clear@anon@1823@__input_class_verb_state@__input_class_verb_state",
        "gml_Script___tick@anon@2463@__input_class_verb_state@__input_class_verb_state",
        "gml_Script___input_class_verb_state",
        "__input_class_vibration_adsr",
        "gml_Script___tick@anon@635@__input_class_vibration_adsr@__input_class_vibration_adsr",
        "gml_Script___input_class_vibration_adsr",
        "__input_class_vibration_constant",
        "gml_Script___tick@anon@339@__input_class_vibration_constant@__input_class_vibration_constant",
        "gml_Script___input_class_vibration_constant",
        "__input_class_vibration_curve",
        "gml_Script___tick@anon@436@__input_class_vibration_curve@__input_class_vibration_curve",
        "gml_Script___input_class_vibration_curve",
        "__input_class_vibration_pulse",
        "gml_Script___tick@anon@440@__input_class_vibration_pulse@__input_class_vibration_pulse",
        "gml_Script___input_class_vibration_pulse",
        "__input_class_virtual",
        "gml_Script_destroy@anon@2083@__input_class_virtual@__input_class_virtual",
        "gml_Script_debug_draw@anon@2253@__input_class_virtual@__input_class_virtual",
        "gml_Script_rectangle@anon@3519@__input_class_virtual@__input_class_virtual",
        "gml_Script_circle@anon@4312@__input_class_virtual@__input_class_virtual",
        "gml_Script____struct___33@get_position@anon@4865@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_position@anon@4865@__input_class_virtual@__input_class_virtual",
        "gml_Script_button@anon@5633@__input_class_virtual@__input_class_virtual",
        "gml_Script_hpad@anon@6038@__input_class_virtual@__input_class_virtual",
        "gml_Script_vpad@anon@6436@__input_class_virtual@__input_class_virtual",
        "gml_Script_dpad@anon@6797@__input_class_virtual@__input_class_virtual",
        "gml_Script_thumbstick@anon@7245@__input_class_virtual@__input_class_virtual",
        "gml_Script_touchpad@anon@7639@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_type@anon@8104@__input_class_virtual@__input_class_virtual",
        "gml_Script____struct___34@get_verbs@anon@8183@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_verbs@anon@8183@__input_class_virtual@__input_class_virtual",
        "gml_Script_threshold@anon@8688@__input_class_virtual@__input_class_virtual",
        "gml_Script____struct___35@get_threshold@anon@8904@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_threshold@anon@8904@__input_class_virtual@__input_class_virtual",
        "gml_Script_active@anon@9191@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_active@anon@9464@__input_class_virtual@__input_class_virtual",
        "gml_Script_priority@anon@9544@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_priority@anon@9841@__input_class_virtual@__input_class_virtual",
        "gml_Script_follow@anon@9921@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_follow@anon@10092@__input_class_virtual@__input_class_virtual",
        "gml_Script_release_behavior@anon@10180@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_release_behavior@anon@10324@__input_class_virtual@__input_class_virtual",
        "gml_Script_first_touch_only@anon@10422@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_first_touch_only@anon@10676@__input_class_virtual@__input_class_virtual",
        "gml_Script_reference_point@anon@10773@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_reference_point@anon@10909@__input_class_virtual@__input_class_virtual",
        "gml_Script_momentary@anon@10993@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_momentary@anon@11121@__input_class_virtual@__input_class_virtual",
        "gml_Script_pressed@anon@11264@__input_class_virtual@__input_class_virtual",
        "gml_Script_check@anon@11392@__input_class_virtual@__input_class_virtual",
        "gml_Script_released@anon@11520@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_x@anon@11649@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_y@anon@11778@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_touch_x@anon@11913@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_touch_y@anon@12043@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_touch_dx@anon@12174@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_touch_dy@anon@12362@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_touch_start_x@anon@12555@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_touch_start_y@anon@12697@__input_class_virtual@__input_class_virtual",
        "gml_Script____struct___36@record_history@anon@12897@__input_class_virtual@__input_class_virtual",
        "gml_Script_record_history@anon@12897@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_history@anon@14027@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_history_direction@anon@14181@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_history_distance@anon@15148@__input_class_virtual@__input_class_virtual",
        "gml_Script_get_history_speed@anon@16583@__input_class_virtual@__input_class_virtual",
        "gml_Script___set_as_background@anon@17067@__input_class_virtual@__input_class_virtual",
        "gml_Script___clear_state@anon@17333@__input_class_virtual@__input_class_virtual",
        "gml_Script___capture_touchpoint@anon@18945@__input_class_virtual@__input_class_virtual",
        "gml_Script___tick@anon@20183@__input_class_virtual@__input_class_virtual",
        "gml_Script___history_push@anon@31624@__input_class_virtual@__input_class_virtual",
        "gml_Script___input_class_virtual",
        "__input_clear_all",
        "gml_Script___input_clear_all",
        "__input_config_cursor",
        "__input_config_external_data",
        "__input_config_gamepads",
        "__input_config_general",
        "__input_config_hotswap",
        "__input_config_icons",
        "__input_config_keyboard",
        "__input_config_mouse",
        "__input_config_multiplayer",
        "__input_config_profiles",
        "__input_config_touch",
        "__input_config_verb_behaviour",
        "__input_config_verb_groups",
        "gml_Script____struct___37@__input_config_verb_groups@__input_config_verb_groups",
        "gml_Script___input_config_verb_groups",
        "__input_config_verbs",
        "gml_Script____struct___39@___struct___38@__input_config_verbs@__input_config_verbs",
        "gml_Script____struct___40@___struct___38@__input_config_verbs@__input_config_verbs",
        "gml_Script____struct___41@___struct___38@__input_config_verbs@__input_config_verbs",
        "gml_Script____struct___38@__input_config_verbs@__input_config_verbs",
        "gml_Script___input_config_verbs",
        "__input_config_vibration",
        "__input_csv_to_array",
        "gml_Script___input_csv_to_array",
        "__input_define_gamepad_types",
        "gml_Script____struct___42@__input_define_gamepad_types@__input_define_gamepad_types",
        "gml_Script___input_define_gamepad_types",
        "__input_ensure_unique_verb_name",
        "gml_Script___input_ensure_unique_verb_name",
        "__input_error",
        "gml_Script___input_error",
        "__input_exception_handler",
        "gml_Script___input_exception_handler",
        "__input_finalize_default_profiles",
        "gml_Script____struct___43@__input_finalize_default_profiles@__input_finalize_default_profiles",
        "gml_Script____struct___44@__input_finalize_default_profiles@__input_finalize_default_profiles",
        "gml_Script___input_finalize_default_profiles",
        "__input_finalize_verb_groups",
        "gml_Script___input_finalize_verb_groups",
        "__input_gamepad_find_in_sdl2_database",
        "gml_Script___input_gamepad_find_in_sdl2_database",
        "__input_gamepad_guid_parse",
        "gml_Script____struct___45@__input_gamepad_guid_parse@__input_gamepad_guid_parse",
        "gml_Script____struct___46@__input_gamepad_guid_parse@__input_gamepad_guid_parse",
        "gml_Script____struct___47@__input_gamepad_guid_parse@__input_gamepad_guid_parse",
        "gml_Script___input_gamepad_guid_parse",
        "__input_gamepad_reset_color",
        "gml_Script___input_gamepad_reset_color",
        "__input_gamepad_set_blacklist",
        "gml_Script___input_gamepad_set_blacklist",
        "__input_gamepad_set_description",
        "gml_Script___input_gamepad_set_description",
        "__input_gamepad_set_mapping",
        "gml_Script____struct___48@__input_gamepad_set_mapping@__input_gamepad_set_mapping",
        "gml_Script____struct___49@__input_gamepad_set_mapping@__input_gamepad_set_mapping",
        "gml_Script___input_gamepad_set_mapping",
        "__input_gamepad_set_type",
        "gml_Script___input_gamepad_set_type",
        "__input_gamepad_set_vid_pid",
        "gml_Script___input_gamepad_set_vid_pid",
        "__input_gamepad_stop_trigger_effects",
        "gml_Script___input_gamepad_stop_trigger_effects",
        "__input_gamepad_tester_build_gui",
        "gml_Script_anon@728@__input_gamepad_tester_build_gui@__input_gamepad_tester_build_gui",
        "gml_Script___input_gamepad_tester_build_gui",
        "__input_gamepad_tester_destroy_gui",
        "gml_Script___input_gamepad_tester_destroy_gui",
        "__input_gamepad_tester_init",
        "gml_Script____struct___50@__input_gamepad_tester_init@__input_gamepad_tester_init",
        "gml_Script____struct___51@__input_gamepad_tester_init@__input_gamepad_tester_init",
        "gml_Script____struct___52@__input_gamepad_tester_init@__input_gamepad_tester_init",
        "gml_Script___input_gamepad_tester_init",
        "__input_gamepad_tester_tick",
        "gml_Script___input_gamepad_tester_tick",
        "__input_gamepad_type_swap_ab",
        "gml_Script___input_gamepad_type_swap_ab",
        "__input_gamepad_value_internal",
        "gml_Script___input_gamepad_value_internal",
        "__input_get_previous_time",
        "gml_Script___input_get_previous_time",
        "__input_get_time",
        "gml_Script___input_get_time",
        "__input_global",
        "gml_Script____struct___53@__input_global@__input_global",
        "gml_Script___input_global",
        "__input_hotswap_tick",
        "gml_Script___input_hotswap_tick",
        "gml_Script___input_hotswap_tick_input",
        "gml_Script___input_hotswap_axis_delta",
        "__input_initialize",
        "gml_Script____struct___54@__input_initialize@__input_initialize",
        "gml_Script_anon@6662@__input_initialize@__input_initialize",
        "gml_Script____struct___55@__input_initialize@__input_initialize",
        "gml_Script____struct___56@__input_initialize@__input_initialize",
        "gml_Script____struct___57@__input_initialize@__input_initialize",
        "gml_Script____struct___58@__input_initialize@__input_initialize",
        "gml_Script____struct___59@__input_initialize@__input_initialize",
        "gml_Script____struct___60@__input_initialize@__input_initialize",
        "gml_Script____struct___61@__input_initialize@__input_initialize",
        "gml_Script____struct___62@__input_initialize@__input_initialize",
        "gml_Script____struct___63@__input_initialize@__input_initialize",
        "gml_Script____struct___64@__input_initialize@__input_initialize",
        "gml_Script____struct___66@___struct___65@__input_initialize@__input_initialize",
        "gml_Script____struct___67@___struct___65@__input_initialize@__input_initialize",
        "gml_Script____struct___68@___struct___65@__input_initialize@__input_initialize",
        "gml_Script____struct___65@__input_initialize@__input_initialize",
        "gml_Script____struct___69@__input_initialize@__input_initialize",
        "gml_Script____struct___70@__input_initialize@__input_initialize",
        "gml_Script____struct___71@__input_initialize@__input_initialize",
        "gml_Script____struct___72@__input_initialize@__input_initialize",
        "gml_Script____struct___73@__input_initialize@__input_initialize",
        "gml_Script____struct___74@__input_initialize@__input_initialize",
        "gml_Script____struct___75@__input_initialize@__input_initialize",
        "gml_Script____struct___77@__input_initialize@__input_initialize",
        "gml_Script____struct___78@__input_initialize@__input_initialize",
        "gml_Script____struct___79@__input_initialize@__input_initialize",
        "gml_Script___input_initialize",
        "__input_key_get_name",
        "gml_Script___input_key_get_name",
        "__input_key_is_ignored",
        "gml_Script___input_key_is_ignored",
        "__input_key_name_set",
        "gml_Script___input_key_name_set",
        "__input_keyboard_key",
        "gml_Script___input_keyboard_key",
        "__input_load_blacklist_csv",
        "gml_Script____struct___80@__input_load_blacklist_csv@__input_load_blacklist_csv",
        "gml_Script____struct___81@__input_load_blacklist_csv@__input_load_blacklist_csv",
        "gml_Script___input_load_blacklist_csv",
        "__input_load_sdl2_from_file",
        "gml_Script___input_load_sdl2_from_file",
        "__input_load_sdl2_from_string_internal",
        "gml_Script___input_load_sdl2_from_string_internal",
        "__input_load_sdl2_from_string",
        "gml_Script___input_load_sdl2_from_string",
        "__input_load_type_csv",
        "gml_Script___input_load_type_csv",
        "__input_macros",
        "__input_mouse_button",
        "gml_Script___input_mouse_button",
        "__input_multiplayer_assignment_tick",
        "gml_Script___input_multiplayer_assignment_tick",
        "__input_player_apply_trigger_effects",
        "gml_Script___input_player_apply_trigger_effects",
        "__input_player_tick_sources",
        "gml_Script___input_player_tick_sources",
        "__input_restart_get",
        "gml_Script___input_restart_get",
        "__input_restart",
        "gml_Script___input_restart",
        "__input_snap_to_json",
        "gml_Script___input_snap_to_json",
        "gml_Script___parse_struct@anon@1212@__input_snap_to_json_parser@__input_snap_to_json",
        "gml_Script___parse_array@anon@4922@__input_snap_to_json_parser@__input_snap_to_json",
        "gml_Script___write_value@anon@6508@__input_snap_to_json_parser@__input_snap_to_json",
        "gml_Script___input_snap_to_json_parser",
        "__input_source_relinquish",
        "gml_Script___input_source_relinquish",
        "__input_steam_apply_trigger_effect",
        "gml_Script____struct___82@__input_steam_apply_trigger_effect@__input_steam_apply_trigger_effect",
        "gml_Script____struct___83@__input_steam_apply_trigger_effect@__input_steam_apply_trigger_effect",
        "gml_Script____struct___84@__input_steam_apply_trigger_effect@__input_steam_apply_trigger_effect",
        "gml_Script____struct___85@__input_steam_apply_trigger_effect@__input_steam_apply_trigger_effect",
        "gml_Script____struct___86@__input_steam_apply_trigger_effect@__input_steam_apply_trigger_effect",
        "gml_Script___input_steam_apply_trigger_effect",
        "__input_steam_handles_changed",
        "gml_Script___input_steam_handles_changed",
        "__input_steam_type_set",
        "gml_Script___input_steam_type_set",
        "__input_string_contains",
        "gml_Script___input_string_contains",
        "__input_system_tick",
        "gml_Script_anon@24867@__input_system_tick@__input_system_tick",
        "gml_Script___input_system_tick",
        "__input_trace_loud",
        "gml_Script___input_trace_loud",
        "__input_trace",
        "gml_Script___input_trace",
        "__input_transform_coordinate",
        "gml_Script____struct___87@__input_transform_coordinate@__input_transform_coordinate",
        "gml_Script___input_transform_coordinate",
        "__input_validate_macros",
        "gml_Script___input_validate_macros",
        "__input_virtual_player_set",
        "gml_Script___input_virtual_player_set",
        "__input_window_changed",
        "gml_Script___input_window_changed",
        "__input_wrap_underflow",
        "gml_Script___input_wrap_underflow",
        "gml_Script_draw@anon@4974@__scribble_class_element@__scribble_class_element",
        "gml_Script_starting_format@anon@7463@__scribble_class_element@__scribble_class_element",
        "gml_Script_align@anon@8408@__scribble_class_element@__scribble_class_element",
        "gml_Script_blend@anon@9230@__scribble_class_element@__scribble_class_element",
        "gml_Script_gradient@anon@9870@__scribble_class_element@__scribble_class_element",
        "gml_Script_fog@anon@10404@__scribble_class_element@__scribble_class_element",
        "gml_Script_flash@anon@10567@__scribble_class_element@__scribble_class_element",
        "gml_Script_origin@anon@11206@__scribble_class_element@__scribble_class_element",
        "gml_Script_transform@anon@11603@__scribble_class_element@__scribble_class_element",
        "gml_Script_scale@anon@12066@__scribble_class_element@__scribble_class_element",
        "gml_Script_skew@anon@12307@__scribble_class_element@__scribble_class_element",
        "gml_Script_scale_to_box@anon@12555@__scribble_class_element@__scribble_class_element",
        "gml_Script_wrap@anon@13319@__scribble_class_element@__scribble_class_element",
        "gml_Script_fit_to_box@anon@14383@__scribble_class_element@__scribble_class_element",
        "gml_Script_pin_guide_width@anon@15557@__scribble_class_element@__scribble_class_element",
        "gml_Script_line_height@anon@16332@__scribble_class_element@__scribble_class_element",
        "gml_Script_line_spacing@anon@16760@__scribble_class_element@__scribble_class_element",
        "gml_Script_padding@anon@17002@__scribble_class_element@__scribble_class_element",
        "gml_Script_bezier@anon@17731@__scribble_class_element@__scribble_class_element",
        "gml_Script_right_to_left@anon@19219@__scribble_class_element@__scribble_class_element",
        "gml_Script_region_detect@anon@19764@__scribble_class_element@__scribble_class_element",
        "gml_Script_region_set_active@anon@21177@__scribble_class_element@__scribble_class_element",
        "gml_Script_region_get_active@anon@22345@__scribble_class_element@__scribble_class_element",
        "gml_Script___update_bbox_matrix@anon@22508@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_left@anon@26720@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_top@anon@26851@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_right@anon@26983@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_bottom@anon@27118@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_width@anon@27253@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_height@anon@27376@__scribble_class_element@__scribble_class_element",
        "gml_Script____struct___88@get_bbox@anon@27534@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_bbox@anon@27534@__scribble_class_element@__scribble_class_element",
        "gml_Script____struct___89@get_bbox_revealed@anon@28333@__scribble_class_element@__scribble_class_element",
        "gml_Script____struct___90@get_bbox_revealed@anon@28333@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_bbox_revealed@anon@28333@__scribble_class_element@__scribble_class_element",
        "gml_Script_page@anon@31674@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_page@anon@32574@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_pages@anon@32653@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_page_count@anon@32795@__scribble_class_element@__scribble_class_element",
        "gml_Script_on_last_page@anon@32980@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_wrapped@anon@33158@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_text@anon@33363@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_glyph_data@anon@33679@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_glyph_count@anon@34046@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_line_count@anon@34369@__scribble_class_element@__scribble_class_element",
        "gml_Script_pre_update_typist@anon@34735@__scribble_class_element@__scribble_class_element",
        "gml_Script_reveal@anon@35075@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_reveal@anon@35331@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_tick_speed@anon@35489@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_speed@anon@35644@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_animation_speed@anon@35784@__scribble_class_element@__scribble_class_element",
        "gml_Script_is_animated@anon@35876@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_sync@anon@36074@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_wave@anon@36266@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_shake@anon@36417@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_rainbow@anon@36571@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_wobble@anon@36729@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_pulse@anon@36884@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_wheel@anon@37037@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_cycle@anon@37190@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_jitter@anon@37344@__scribble_class_element@__scribble_class_element",
        "gml_Script_animation_blink@anon@37499@__scribble_class_element@__scribble_class_element",
        "gml_Script_msdf_shadow@anon@37706@__scribble_class_element@__scribble_class_element",
        "gml_Script_msdf_border@anon@38075@__scribble_class_element@__scribble_class_element",
        "gml_Script_msdf_feather@anon@38275@__scribble_class_element@__scribble_class_element",
        "gml_Script_build@anon@38510@__scribble_class_element@__scribble_class_element",
        "gml_Script_refresh@anon@38865@__scribble_class_element@__scribble_class_element",
        "gml_Script_flush@anon@39109@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_events@anon@40093@__scribble_class_element@__scribble_class_element",
        "gml_Script_template@anon@40720@__scribble_class_element@__scribble_class_element",
        "gml_Script_ignore_command_tags@anon@41849@__scribble_class_element@__scribble_class_element",
        "gml_Script_randomize_animation@anon@42111@__scribble_class_element@__scribble_class_element",
        "gml_Script_z@anon@42355@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_z@anon@42459@__scribble_class_element@__scribble_class_element",
        "gml_Script_overwrite@anon@42585@__scribble_class_element@__scribble_class_element",
        "gml_Script_debug_draw_bbox@anon@43759@__scribble_class_element@__scribble_class_element",
        "gml_Script___get_model@anon@44798@__scribble_class_element@__scribble_class_element",
        "gml_Script___set_standard_uniforms@anon@49372@__scribble_class_element@__scribble_class_element",
        "gml_Script___set_msdf_uniforms@anon@56556@__scribble_class_element@__scribble_class_element",
        "gml_Script___update_scale_to_box_scale@anon@65962@__scribble_class_element@__scribble_class_element",
        "gml_Script___update_matrix@anon@66871@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_off@anon@69484@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_reset@anon@69995@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_in@anon@70552@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_out@anon@71150@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_skip@anon@71699@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_sound@anon@72241@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_sound_per_char@anon@72861@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_function@anon@73387@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_pause@anon@73859@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_unpause@anon@74303@__scribble_class_element@__scribble_class_element",
        "gml_Script_typewriter_ease@anon@74912@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_typewriter_state@anon@75493@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_typewriter_paused@anon@75979@__scribble_class_element@__scribble_class_element",
        "gml_Script_get_typewriter_pos@anon@76465@__scribble_class_element@__scribble_class_element",
        "gml_Script___scribble_class_element",
        "__scribble_class_event",
        "gml_Script___scribble_class_event",
        "__scribble_class_font",
        "gml_Script___copy_to@anon@926@__scribble_class_font@__scribble_class_font",
        "gml_Script___calculate_font_height@anon@1828@__scribble_class_font@__scribble_class_font",
        "gml_Script___clear@anon@1991@__scribble_class_font@__scribble_class_font",
        "gml_Script___destroy@anon@2291@__scribble_class_font@__scribble_class_font",
        "gml_Script___scribble_class_font",
        "__scribble_class_model",
        "gml_Script___submit@anon@2085@__scribble_class_model@__scribble_class_model",
        "gml_Script___freeze@anon@2438@__scribble_class_model@__scribble_class_model",
        "gml_Script___flush@anon@2735@__scribble_class_model@__scribble_class_model",
        "gml_Script___reset@anon@3136@__scribble_class_model@__scribble_class_model",
        "gml_Script____struct___91@__get_bbox@anon@3903@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_bbox@anon@3903@__scribble_class_model@__scribble_class_model",
        "gml_Script____struct___92@__get_bbox_revealed@anon@5320@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_bbox_revealed@anon@5320@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_width@anon@7355@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_height@anon@7470@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_page_array@anon@7575@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_page_count@anon@7668@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_text@anon@7770@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_glyph_data@anon@8332@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_wrapped@anon@8708@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_line_count@anon@8818@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_glyph_count@anon@9199@__scribble_class_model@__scribble_class_model",
        "gml_Script___get_glyph_data_grid@anon@9673@__scribble_class_model@__scribble_class_model",
        "gml_Script___new_page@anon@10186@__scribble_class_model@__scribble_class_model",
        "gml_Script___finalize_vertex_buffers@anon@10418@__scribble_class_model@__scribble_class_model",
        "gml_Script___scribble_class_model",
        "__scribble_class_null_element",
        "gml_Script___error@anon@78@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_draw@anon@462@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_starting_format@anon@543@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_align@anon@614@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_blend@anon@685@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_gradient@anon@759@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_fog@anon@828@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_flash@anon@899@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_origin@anon@1031@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_transform@anon@1106@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_skew@anon@1176@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_scale_to_box@anon@1254@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_wrap@anon@1324@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_fit_to_box@anon@1400@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_pin_guide_width@anon@1481@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_line_height@anon@1558@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_line_spacing@anon@1636@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_padding@anon@1709@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_bezier@anon@1781@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_right_to_left@anon@1860@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_region_detect@anon@2000@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_region_set_active@anon@2063@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_region_get_active@anon@2126@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script___update_bbox_matrix@anon@2276@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_left@anon@2350@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_top@anon@2423@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_right@anon@2498@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_bottom@anon@2574@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_width@anon@2649@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_height@anon@2725@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_bbox@anon@2799@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_bbox_revealed@anon@2882@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_page@anon@3011@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_page@anon@3085@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_pages@anon@3160@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_page_count@anon@3240@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_on_last_page@anon@3318@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_wrapped@anon@3462@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_text@anon@3536@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_glyph_data@anon@3616@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_glyph_count@anon@3697@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_line_count@anon@3777@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_reveal@anon@3913@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_reveal@anon@3989@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_tick_speed@anon@4138@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_speed@anon@4219@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_animation_speed@anon@4304@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_is_animated@anon@4381@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_sync@anon@4461@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_wave@anon@4541@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_shake@anon@4622@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_rainbow@anon@4705@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_wobble@anon@4787@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_pulse@anon@4868@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_wheel@anon@4949@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_cycle@anon@5030@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_jitter@anon@5112@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_animation_blink@anon@5193@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_msdf_shadow@anon@5328@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_msdf_border@anon@5405@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_msdf_feather@anon@5483@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_build@anon@5648@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_flush@anon@5719@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_events@anon@5862@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_template@anon@6018@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_ignore_command_tags@anon@6125@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_z@anon@6192@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_z@anon@6263@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_overwrite@anon@6388@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_debug_draw_bbox@anon@6469@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_off@anon@6620@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_reset@anon@6702@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_in@anon@6781@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_out@anon@6861@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_skip@anon@6942@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_sound@anon@7024@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_sound_per_char@anon@7115@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_function@anon@7200@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_pause@anon@7282@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_unpause@anon@7366@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_typewriter_ease@anon@7447@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_typewriter_state@anon@7533@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_typewriter_paused@anon@7620@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script_get_typewriter_pos@anon@7704@__scribble_class_null_element@__scribble_class_null_element",
        "gml_Script___scribble_class_null_element",
        "__scribble_class_page",
        "gml_Script___submit@anon@1026@__scribble_class_page@__scribble_class_page",
        "gml_Script___freeze@anon@4127@__scribble_class_page@__scribble_class_page",
        "gml_Script____struct___96@__get_glyph_data@anon@4836@__scribble_class_page@__scribble_class_page",
        "gml_Script____struct___97@__get_glyph_data@anon@4836@__scribble_class_page@__scribble_class_page",
        "gml_Script___get_glyph_data@anon@4836@__scribble_class_page@__scribble_class_page",
        "gml_Script___get_vertex_buffer@anon@6112@__scribble_class_page@__scribble_class_page",
        "gml_Script___finalize_vertex_buffers@anon@9749@__scribble_class_page@__scribble_class_page",
        "gml_Script____struct___98@__flush@anon@10154@__scribble_class_page@__scribble_class_page",
        "gml_Script___flush@anon@10154@__scribble_class_page@__scribble_class_page",
        "gml_Script____struct___93@__scribble_class_page@__scribble_class_page",
        "gml_Script____struct___94@__scribble_class_page@__scribble_class_page",
        "gml_Script____struct___95@__scribble_class_page@__scribble_class_page",
        "gml_Script___scribble_class_page",
        "__scribble_class_typist",
        "gml_Script_reset@anon@1541@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_in@anon@2234@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_out@anon@2685@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_skip@anon@3079@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_skip_to_pause@anon@3277@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_ignore_delay@anon@3475@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_sound@anon@3731@__scribble_class_typist@__scribble_class_typist",
        "gml_Script____struct___100@sound_per_char@anon@4379@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_sound_per_char@anon@4379@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_function_per_char@anon@5551@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_function_on_complete@anon@5700@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_execution_scope@anon@5847@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_pause@anon@5972@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_unpause@anon@6083@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_ease@anon@6766@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_character_delay_add@anon@7232@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_character_delay_remove@anon@7938@__scribble_class_typist@__scribble_class_typist",
        "gml_Script____struct___101@character_delay_clear@anon@8452@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_character_delay_clear@anon@8452@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_skip@anon@8673@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_ignore_delay@anon@8759@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_state@anon@8846@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_paused@anon@10383@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_position@anon@10467@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_text_element@anon@10619@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_get_execution_scope@anon@10716@__scribble_class_typist@__scribble_class_typist",
        "gml_Script_sync_to_sound@anon@10867@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___sync_reset@anon@11538@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___associate@anon@11811@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___process_event_stack@anon@12951@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___play_sound@anon@18338@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___execute_function_per_character@anon@20285@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___execute_function_on_complete@anon@20767@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___tick@anon@21196@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___set_shader_uniforms@anon@31180@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___set_msdf_shader_uniforms@anon@34084@__scribble_class_typist@__scribble_class_typist",
        "gml_Script____struct___99@__scribble_class_typist@__scribble_class_typist",
        "gml_Script___scribble_class_typist",
        "__scribble_config_behaviours",
        "__scribble_config_colours",
        "gml_Script____struct___102@__scribble_config_colours@__scribble_config_colours",
        "gml_Script___scribble_config_colours",
        "__scribble_config_defaults",
        "__scribble_effects_maps_initialize",
        "gml_Script___scribble_effects_maps_initialize",
        "__scribble_font_add_all_from_project",
        "gml_Script___scribble_font_add_all_from_project",
        "__scribble_font_add_from_project",
        "gml_Script___scribble_font_add_from_project",
        "__scribble_font_add_msdf_from_project",
        "gml_Script___scribble_font_add_msdf_from_project",
        "__scribble_font_add_sprite",
        "gml_Script___scribble_font_add_sprite",
        "gml_Script___scribble_font_add_sprite_ext",
        "gml_Script___scribble_font_add_sprite_common",
        "__scribble_gen_1_model_limits_and_bezier_curves",
        "gml_Script___scribble_gen_1_model_limits_and_bezier_curves",
        "__scribble_gen_10_set_padding_flags",
        "gml_Script___scribble_gen_10_set_padding_flags",
        "__scribble_gen_2_parser",
        "gml_Script___scribble_gen_2_parser",
        "__scribble_gen_3_devanagari",
        "gml_Script___scribble_gen_3_devanagari",
        "gml_Script___scribble_debug_krutidev",
        "__scribble_gen_4_build_words",
        "gml_Script___scribble_gen_4_build_words",
        "__scribble_gen_5_finalize_bidi",
        "gml_Script___scribble_gen_5_finalize_bidi",
        "__scribble_gen_6_build_lines",
        "gml_Script___scribble_gen_6_build_lines",
        "__scribble_gen_7_build_pages",
        "gml_Script_anon@5080@__scribble_gen_7_build_pages@__scribble_gen_7_build_pages",
        "gml_Script_anon@5719@__scribble_gen_7_build_pages@__scribble_gen_7_build_pages",
        "gml_Script___scribble_gen_7_build_pages",
        "__scribble_gen_8_position_glyphs",
        "gml_Script___scribble_gen_8_position_glyphs",
        "__scribble_gen_9_write_vbuffs",
        "gml_Script____struct___105@__scribble_gen_9_write_vbuffs@__scribble_gen_9_write_vbuffs",
        "gml_Script____struct___103@__scribble_gen_9_write_vbuffs@__scribble_gen_9_write_vbuffs",
        "gml_Script____struct___104@__scribble_gen_9_write_vbuffs@__scribble_gen_9_write_vbuffs",
        "gml_Script____struct___106@__scribble_gen_9_write_vbuffs@__scribble_gen_9_write_vbuffs",
        "gml_Script____struct___107@__scribble_gen_9_write_vbuffs@__scribble_gen_9_write_vbuffs",
        "gml_Script____struct___108@__scribble_gen_9_write_vbuffs@__scribble_gen_9_write_vbuffs",
        "gml_Script___scribble_gen_9_write_vbuffs",
        "__scribble_get_anim_properties",
        "gml_Script___scribble_get_anim_properties",
        "__scribble_get_buffer_a",
        "gml_Script___scribble_get_buffer_a",
        "__scribble_get_buffer_b",
        "gml_Script___scribble_get_buffer_b",
        "__scribble_get_cache_state",
        "gml_Script____struct___110@___struct___109@__scribble_get_cache_state@__scribble_get_cache_state",
        "gml_Script____struct___111@___struct___109@__scribble_get_cache_state@__scribble_get_cache_state",
        "gml_Script____struct___109@__scribble_get_cache_state@__scribble_get_cache_state",
        "gml_Script___scribble_get_cache_state",
        "__scribble_get_effects_map",
        "gml_Script___scribble_get_effects_map",
        "__scribble_get_effects_slash_map",
        "gml_Script___scribble_get_effects_slash_map",
        "__scribble_get_external_sound_map",
        "gml_Script___scribble_get_external_sound_map",
        "__scribble_get_font_data_map",
        "gml_Script___scribble_get_font_data_map",
        "__scribble_get_generator_state",
        "gml_Script___scribble_get_generator_state",
        "gml_Script___Reset@anon@1002@__scribble_class_generator_state@__scribble_get_generator_state",
        "gml_Script___scribble_class_generator_state",
        "__scribble_get_glyph_data",
        "gml_Script____struct___112@__scribble_get_glyph_data@__scribble_get_glyph_data",
        "gml_Script___scribble_get_glyph_data",
        "gml_Script___scribble_glyph_data_initialize",
        "__scribble_get_krutidev_lookup_map",
        "gml_Script___scribble_get_krutidev_lookup_map",
        "gml_Script___scribble_krutidev_lookup_map_initialize",
        "__scribble_get_krutidev_matra_lookup_map",
        "gml_Script___scribble_get_krutidev_matra_lookup_map",
        "gml_Script___scribble_krutidev_matra_lookup_map_initialize",
        "__scribble_get_macros_map",
        "gml_Script___scribble_get_macros_map",
        "__scribble_get_state",
        "gml_Script____struct___114@___struct___113@__scribble_get_state@__scribble_get_state",
        "gml_Script____struct___113@__scribble_get_state@__scribble_get_state",
        "gml_Script___scribble_get_state",
        "__scribble_get_typewriter_events_map",
        "gml_Script___scribble_get_typewriter_events_map",
        "gml_Script___scribble_typewrite_events_map_initialize",
        "__scribble_system",
        "gml_Script_anon@950@__scribble_initialize@__scribble_system",
        "gml_Script___scribble_initialize",
        "gml_Script___scribble_trace",
        "gml_Script___scribble_loud",
        "gml_Script___scribble_error",
        "gml_Script___scribble_get_font_directory",
        "gml_Script___scribble_get_font_data",
        "gml_Script___scribble_process_colour",
        "gml_Script___scribble_random",
        "gml_Script___scribble_array_find_index",
        "gml_Script___scribble_asset_is_krutidev",
        "gml_Script___scribble_buffer_read_unicode",
        "gml_Script___scribble_buffer_peek_unicode",
        "gml_Script___scribble_buffer_write_unicode",
        "gml_Script___scribble_image_speed_get",
        "gml_Script___scribble_matrix_inverse",
        "__scribble_tick",
        "gml_Script___scribble_tick",
        "car_wear_scripts",
        "gml_Script_scr_car_wear_get_id",
        "gml_Script_scr_car_wear_add",
        "gml_Script_scr_car_wear_remove",
        "gml_Script_scr_car_wear_get_slot",
        "gml_Script_scr_car_wear_inc",
        "gml_Script_scr_car_wear_dec",
        "gml_Script_scr_car_wear_update_for_car",
        "draw_text_scribble_ext",
        "gml_Script_draw_text_scribble_ext",
        "draw_text_scribble",
        "gml_Script_draw_text_scribble",
        "input_accessibility_global_cooldown_get",
        "gml_Script_input_accessibility_global_cooldown_get",
        "input_accessibility_global_cooldown_set",
        "gml_Script_input_accessibility_global_cooldown_set",
        "input_accessibility_global_toggle_get",
        "gml_Script_input_accessibility_global_toggle_get",
        "input_accessibility_global_toggle_set",
        "gml_Script_input_accessibility_global_toggle_set",
        "input_accessibility_verb_cooldown_get",
        "gml_Script_input_accessibility_verb_cooldown_get",
        "input_accessibility_verb_cooldown_set",
        "gml_Script_input_accessibility_verb_cooldown_set",
        "input_accessibility_verb_toggle_get",
        "gml_Script_input_accessibility_verb_toggle_get",
        "input_accessibility_verb_toggle_set",
        "gml_Script_input_accessibility_verb_toggle_set",
        "input_any_pressed",
        "gml_Script_input_any_pressed",
        "input_axis_threshold_get",
        "gml_Script_input_axis_threshold_get",
        "input_axis_threshold_set",
        "gml_Script_input_axis_threshold_set",
        "input_binding_empty",
        "gml_Script_input_binding_empty",
        "input_binding_gamepad_axis",
        "gml_Script_input_binding_gamepad_axis",
        "input_binding_gamepad_button",
        "gml_Script_input_binding_gamepad_button",
        "input_binding_gamepad_get",
        "gml_Script_input_binding_gamepad_get",
        "input_binding_gamepad_set",
        "gml_Script_input_binding_gamepad_set",
        "input_binding_get_icon",
        "gml_Script____struct___115@input_binding_get_icon@input_binding_get_icon",
        "gml_Script_input_binding_get_icon",
        "input_binding_get_name",
        "gml_Script_input_binding_get_name",
        "input_binding_get_source_type",
        "gml_Script_input_binding_get_source_type",
        "input_binding_get_verbs",
        "gml_Script____struct___116@input_binding_get_verbs@input_binding_get_verbs",
        "gml_Script_input_binding_get_verbs",
        "input_binding_get",
        "gml_Script_input_binding_get",
        "input_binding_is_valid",
        "gml_Script_input_binding_is_valid",
        "input_binding_key",
        "gml_Script_input_binding_key",
        "input_binding_mouse_button",
        "gml_Script_input_binding_mouse_button",
        "input_binding_mouse_wheel_down",
        "gml_Script_input_binding_mouse_wheel_down",
        "input_binding_mouse_wheel_up",
        "gml_Script_input_binding_mouse_wheel_up",
        "input_binding_remove",
        "gml_Script_input_binding_remove",
        "input_binding_scan_abort",
        "gml_Script_input_binding_scan_abort",
        "input_binding_scan_in_progress",
        "gml_Script_input_binding_scan_in_progress",
        "input_binding_scan_params_clear",
        "gml_Script_input_binding_scan_params_clear",
        "input_binding_scan_params_get",
        "gml_Script____struct___117@input_binding_scan_params_get@input_binding_scan_params_get",
        "gml_Script_input_binding_scan_params_get",
        "input_binding_scan_params_set",
        "gml_Script____struct___118@input_binding_scan_params_set@input_binding_scan_params_set",
        "gml_Script____struct___119@input_binding_scan_params_set@input_binding_scan_params_set",
        "gml_Script_input_binding_scan_params_set",
        "input_binding_scan_start",
        "gml_Script_input_binding_scan_start",
        "input_binding_scan_time_remaining",
        "gml_Script_input_binding_scan_time_remaining",
        "input_binding_set_safe",
        "gml_Script_input_binding_set_safe",
        "input_binding_set",
        "gml_Script_input_binding_set",
        "input_binding_swap",
        "gml_Script_input_binding_swap",
        "input_binding_test_collisions",
        "gml_Script____struct___120@input_binding_test_collisions@input_binding_test_collisions",
        "gml_Script_input_binding_test_collisions",
        "input_binding_threshold_get",
        "gml_Script_input_binding_threshold_get",
        "input_binding_threshold_set",
        "gml_Script_input_binding_threshold_set",
        "input_binding_virtual_button",
        "gml_Script_input_binding_virtual_button",
        "input_check_double_pressed",
        "gml_Script_input_check_double_pressed",
        "input_check_double_released",
        "gml_Script_input_check_double_released",
        "input_check_double",
        "gml_Script_input_check_double",
        "input_check_long_pressed",
        "gml_Script_input_check_long_pressed",
        "input_check_long_released",
        "gml_Script_input_check_long_released",
        "input_check_long",
        "gml_Script_input_check_long",
        "input_check_opposing_pressed",
        "gml_Script_input_check_opposing_pressed",
        "input_check_opposing_repeat",
        "gml_Script_input_check_opposing_repeat",
        "input_check_opposing",
        "gml_Script_input_check_opposing",
        "input_check_press_most_recent",
        "gml_Script_input_check_press_most_recent",
        "input_check_pressed",
        "gml_Script_input_check_pressed",
        "input_check_quick_pressed_2d",
        "gml_Script_input_check_quick_pressed_2d",
        "input_check_quick_pressed",
        "gml_Script_input_check_quick_pressed",
        "input_check_released",
        "gml_Script_input_check_released",
        "input_check_repeat",
        "gml_Script_input_check_repeat",
        "input_check",
        "gml_Script_input_check",
        "input_chord_create",
        "gml_Script_input_chord_create",
        "input_clear_momentary",
        "gml_Script_input_clear_momentary",
        "input_color_get",
        "gml_Script_input_color_get",
        "input_color_reset",
        "gml_Script_input_color_reset",
        "input_color_set",
        "gml_Script_input_color_set",
        "input_cursor_coord_space_get",
        "gml_Script_input_cursor_coord_space_get",
        "input_cursor_coord_space_set",
        "gml_Script_input_cursor_coord_space_set",
        "input_cursor_dx",
        "gml_Script_input_cursor_dx",
        "input_cursor_dy",
        "gml_Script_input_cursor_dy",
        "input_cursor_elastic_get",
        "gml_Script____struct___121@input_cursor_elastic_get@input_cursor_elastic_get",
        "gml_Script_input_cursor_elastic_get",
        "input_cursor_elastic_remove",
        "gml_Script_input_cursor_elastic_remove",
        "input_cursor_elastic_set",
        "gml_Script_input_cursor_elastic_set",
        "input_cursor_gyro_enabled_get",
        "gml_Script_input_cursor_gyro_enabled_get",
        "input_cursor_gyro_enabled_set",
        "gml_Script_input_cursor_gyro_enabled_set",
        "input_cursor_gyro_params_get",
        "gml_Script____struct___122@input_cursor_gyro_params_get@input_cursor_gyro_params_get",
        "gml_Script_input_cursor_gyro_params_get",
        "input_cursor_gyro_params_set",
        "gml_Script_input_cursor_gyro_params_set",
        "input_cursor_inverted_get",
        "gml_Script_input_cursor_inverted_get",
        "input_cursor_inverted_set",
        "gml_Script_input_cursor_inverted_set",
        "input_cursor_limit_aabb",
        "gml_Script_input_cursor_limit_aabb",
        "input_cursor_limit_boundary",
        "gml_Script_input_cursor_limit_boundary",
        "input_cursor_limit_circle",
        "gml_Script_input_cursor_limit_circle",
        "input_cursor_limit_get",
        "gml_Script____struct___123@input_cursor_limit_get@input_cursor_limit_get",
        "gml_Script_input_cursor_limit_get",
        "input_cursor_limit_remove",
        "gml_Script_input_cursor_limit_remove",
        "input_cursor_mouse_enabled_get",
        "gml_Script_input_cursor_mouse_enabled_get",
        "input_cursor_mouse_enabled_set",
        "gml_Script_input_cursor_mouse_enabled_set",
        "input_cursor_set",
        "gml_Script_input_cursor_set",
        "input_cursor_speed_get",
        "gml_Script_input_cursor_speed_get",
        "input_cursor_speed_set",
        "gml_Script_input_cursor_speed_set",
        "input_cursor_translate",
        "gml_Script_input_cursor_translate",
        "input_cursor_x",
        "gml_Script_input_cursor_x",
        "input_cursor_y",
        "gml_Script_input_cursor_y",
        "input_debug_all_input",
        "gml_Script____struct___124@input_debug_all_input@input_debug_all_input",
        "gml_Script____struct___125@input_debug_all_input@input_debug_all_input",
        "gml_Script_anon@1926@input_debug_all_input@input_debug_all_input",
        "gml_Script_input_debug_all_input",
        "input_debug_player_input",
        "gml_Script_anon@709@input_debug_player_input@input_debug_player_input",
        "gml_Script_input_debug_player_input",
        "input_direction",
        "gml_Script_input_direction",
        "input_distance",
        "gml_Script_input_distance",
        "input_game_has_focus",
        "gml_Script_input_game_has_focus",
        "input_gamepad_any_pressed",
        "gml_Script_input_gamepad_any_pressed",
        "input_gamepad_check_pressed",
        "gml_Script_input_gamepad_check_pressed",
        "input_gamepad_check_released",
        "gml_Script_input_gamepad_check_released",
        "input_gamepad_check",
        "gml_Script_input_gamepad_check",
        "input_gamepad_constant_get_name",
        "gml_Script_input_gamepad_constant_get_name",
        "input_gamepad_delta",
        "gml_Script_input_gamepad_delta",
        "input_gamepad_get_description",
        "gml_Script_input_gamepad_get_description",
        "input_gamepad_get_map",
        "gml_Script_input_gamepad_get_map",
        "input_gamepad_get_type",
        "gml_Script_input_gamepad_get_type",
        "input_gamepad_is_any_connected",
        "gml_Script_input_gamepad_is_any_connected",
        "input_gamepad_is_axis",
        "gml_Script_input_gamepad_is_axis",
        "input_gamepad_is_connected",
        "gml_Script_input_gamepad_is_connected",
        "input_gamepad_map_contains",
        "gml_Script_input_gamepad_map_contains",
        "input_gamepad_tester_get",
        "gml_Script_input_gamepad_tester_get",
        "input_gamepad_tester_set",
        "gml_Script_input_gamepad_tester_set",
        "input_gamepad_value",
        "gml_Script_input_gamepad_value",
        "input_gamepads_get_status",
        "gml_Script_input_gamepads_get_status",
        "input_held_time_released",
        "gml_Script_input_held_time_released",
        "input_held_time",
        "gml_Script_input_held_time",
        "input_hotswap_params_get",
        "gml_Script____struct___126@input_hotswap_params_get@input_hotswap_params_get",
        "gml_Script_input_hotswap_params_get",
        "input_hotswap_params_set",
        "gml_Script_input_hotswap_params_set",
        "input_icon_empty",
        "gml_Script_input_icon_empty",
        "input_icon_not_a_binding",
        "gml_Script_input_icon_not_a_binding",
        "input_icon_touch",
        "gml_Script_input_icon_touch",
        "input_icons_gamepad",
        "gml_Script_input_icons_gamepad",
        "input_icons_keyboard_and_mouse",
        "gml_Script_input_icons_keyboard_and_mouse",
        "input_icons",
        "gml_Script_input_icons",
        "input_ignore_key_add",
        "gml_Script_input_ignore_key_add",
        "input_ignore_key_remove",
        "gml_Script_input_ignore_key_remove",
        "input_is_analogue",
        "gml_Script_input_is_analogue",
        "input_is_virtual",
        "gml_Script_input_is_virtual",
        "input_join_is_finished",
        "gml_Script_input_join_is_finished",
        "input_join_params_get",
        "gml_Script____struct___127@input_join_params_get@input_join_params_get",
        "gml_Script_input_join_params_get",
        "input_join_params_set",
        "gml_Script_input_join_params_set",
        "input_keyboard_check_pressed",
        "gml_Script_input_keyboard_check_pressed",
        "input_keyboard_check_released",
        "gml_Script_input_keyboard_check_released",
        "input_keyboard_check",
        "gml_Script_input_keyboard_check",
        "input_keyboard_virtual_hide",
        "gml_Script_input_keyboard_virtual_hide",
        "input_keyboard_virtual_show",
        "gml_Script_input_keyboard_virtual_show",
        "input_led_pattern_get",
        "gml_Script____struct___128@input_led_pattern_get@input_led_pattern_get",
        "gml_Script_input_led_pattern_get",
        "input_max_value",
        "gml_Script_input_max_value",
        "input_motion_data_get",
        "gml_Script_input_motion_data_get",
        "input_mouse_capture_get",
        "gml_Script____struct___129@input_mouse_capture_get@input_mouse_capture_get",
        "gml_Script_input_mouse_capture_get",
        "input_mouse_capture_set",
        "gml_Script_input_mouse_capture_set",
        "input_mouse_check_pressed",
        "gml_Script_input_mouse_check_pressed",
        "input_mouse_check_released",
        "gml_Script_input_mouse_check_released",
        "input_mouse_check",
        "gml_Script_input_mouse_check",
        "input_mouse_coord_space_get",
        "gml_Script_input_mouse_coord_space_get",
        "input_mouse_coord_space_set",
        "gml_Script_input_mouse_coord_space_set",
        "input_mouse_dx",
        "gml_Script_input_mouse_dx",
        "input_mouse_dy",
        "gml_Script_input_mouse_dy",
        "input_mouse_in_bounds",
        "gml_Script_input_mouse_in_bounds",
        "input_mouse_moved",
        "gml_Script_input_mouse_moved",
        "input_mouse_wheel_down",
        "gml_Script_input_mouse_wheel_down",
        "input_mouse_wheel_up",
        "gml_Script_input_mouse_wheel_up",
        "input_mouse_x",
        "gml_Script_input_mouse_x",
        "input_mouse_y",
        "gml_Script_input_mouse_y",
        "input_player_active_get",
        "gml_Script_input_player_active_get",
        "input_player_active_set",
        "gml_Script_input_player_active_set",
        "input_player_connected_count",
        "gml_Script_input_player_connected_count",
        "input_player_connected",
        "gml_Script_input_player_connected",
        "input_player_copy",
        "gml_Script_input_player_copy",
        "input_player_disconnect",
        "gml_Script_input_player_disconnect",
        "input_player_export",
        "gml_Script_input_player_export",
        "input_player_gamepad_type_override_get",
        "gml_Script_input_player_gamepad_type_override_get",
        "input_player_gamepad_type_override_set",
        "gml_Script_input_player_gamepad_type_override_set",
        "input_player_get_gamepad_type",
        "gml_Script_input_player_get_gamepad_type",
        "input_player_get_gamepad",
        "gml_Script_input_player_get_gamepad",
        "input_player_get_invalid_gamepad_bindings",
        "gml_Script_input_player_get_invalid_gamepad_bindings",
        "input_player_ghost_get",
        "gml_Script_input_player_ghost_get",
        "input_player_ghost_set",
        "gml_Script_input_player_ghost_set",
        "input_player_import",
        "gml_Script_input_player_import",
        "input_player_reset",
        "gml_Script_input_player_reset",
        "input_player_swap",
        "gml_Script_input_player_swap",
        "input_player_using_gamepad",
        "gml_Script_input_player_using_gamepad",
        "input_player_using_keyboard",
        "gml_Script_input_player_using_keyboard",
        "input_player_using_mouse",
        "gml_Script_input_player_using_mouse",
        "input_player_using_touch",
        "gml_Script_input_player_using_touch",
        "input_player_verify",
        "gml_Script_input_player_verify",
        "input_players_get_status",
        "gml_Script_input_players_get_status",
        "input_players_using_source",
        "gml_Script_input_players_using_source",
        "input_profile_auto",
        "gml_Script_input_profile_auto",
        "input_profile_copy",
        "gml_Script_input_profile_copy",
        "input_profile_create",
        "gml_Script_input_profile_create",
        "input_profile_destroy",
        "gml_Script_input_profile_destroy",
        "input_profile_exists",
        "gml_Script_input_profile_exists",
        "input_profile_export",
        "gml_Script_input_profile_export",
        "input_profile_get_array",
        "gml_Script_input_profile_get_array",
        "input_profile_get",
        "gml_Script_input_profile_get",
        "input_profile_import",
        "gml_Script_input_profile_import",
        "input_profile_reset_bindings",
        "gml_Script_input_profile_reset_bindings",
        "input_profile_set",
        "gml_Script_input_profile_set",
        "input_profile_verify",
        "gml_Script_input_profile_verify",
        "input_radial_sector",
        "gml_Script_input_radial_sector",
        "input_scripts",
        "gml_Script_scr_input_down",
        "gml_Script_scr_input_up",
        "gml_Script_scr_input_left",
        "gml_Script_scr_input_right",
        "gml_Script_scr_input_gp_interact",
        "gml_Script_scr_input_gp_back",
        "gml_Script_scr_input_car_menu",
        "input_source_add",
        "gml_Script_input_source_add",
        "input_source_clear",
        "gml_Script_input_source_clear",
        "input_source_detect_input",
        "gml_Script_input_source_detect_input",
        "input_source_detect_new",
        "gml_Script_input_source_detect_new",
        "input_source_get_array",
        "gml_Script_input_source_get_array",
        "input_source_is_available",
        "gml_Script_input_source_is_available",
        "input_source_mode_get",
        "gml_Script_input_source_mode_get",
        "input_source_mode_set",
        "gml_Script_input_source_mode_set",
        "input_source_set",
        "gml_Script_input_source_set",
        "input_source_share",
        "gml_Script_input_source_share",
        "input_source_using",
        "gml_Script_input_source_using",
        "input_system_export",
        "gml_Script____struct___131@___struct___130@input_system_export@input_system_export",
        "gml_Script____struct___132@___struct___130@input_system_export@input_system_export",
        "gml_Script____struct___130@input_system_export@input_system_export",
        "gml_Script_input_system_export",
        "input_system_import",
        "gml_Script____struct___133@input_system_import@input_system_import",
        "gml_Script____struct___134@input_system_import@input_system_import",
        "gml_Script_input_system_import",
        "input_system_reset",
        "gml_Script_input_system_reset",
        "input_system_verify",
        "gml_Script_input_system_verify",
        "input_trigger_effect_feedback",
        "gml_Script_input_trigger_effect_feedback",
        "input_trigger_effect_get_pause",
        "gml_Script_input_trigger_effect_get_pause",
        "input_trigger_effect_get_state",
        "gml_Script_input_trigger_effect_get_state",
        "input_trigger_effect_get_strength",
        "gml_Script_input_trigger_effect_get_strength",
        "input_trigger_effect_off",
        "gml_Script_input_trigger_effect_off",
        "input_trigger_effect_set_pause",
        "gml_Script_input_trigger_effect_set_pause",
        "input_trigger_effect_set_strength",
        "gml_Script_input_trigger_effect_set_strength",
        "input_trigger_effect_vibration",
        "gml_Script_input_trigger_effect_vibration",
        "input_trigger_effect_weapon",
        "gml_Script_input_trigger_effect_weapon",
        "input_value_is_binding",
        "gml_Script_input_value_is_binding",
        "input_value",
        "gml_Script_input_value",
        "input_verb_consume",
        "gml_Script_input_verb_consume",
        "input_verb_get_group",
        "gml_Script_input_verb_get_group",
        "input_verb_get_icon",
        "gml_Script_input_verb_get_icon",
        "input_verb_group_active",
        "gml_Script_input_verb_group_active",
        "input_verb_group_get_verbs",
        "gml_Script_input_verb_group_get_verbs",
        "input_verb_group_is_active",
        "gml_Script_input_verb_group_is_active",
        "input_verb_groups_get",
        "gml_Script_input_verb_groups_get",
        "input_verb_set",
        "gml_Script_input_verb_set",
        "input_vibrate_adsr",
        "gml_Script_input_vibrate_adsr",
        "input_vibrate_constant",
        "gml_Script_input_vibrate_constant",
        "input_vibrate_curve",
        "gml_Script_input_vibrate_curve",
        "input_vibrate_get_pause",
        "gml_Script_input_vibrate_get_pause",
        "input_vibrate_get_strength",
        "gml_Script_input_vibrate_get_strength",
        "input_vibrate_pulse",
        "gml_Script_input_vibrate_pulse",
        "input_vibrate_set_pause",
        "gml_Script_input_vibrate_set_pause",
        "input_vibrate_set_strength",
        "gml_Script_input_vibrate_set_strength",
        "input_vibrate_stop",
        "gml_Script_input_vibrate_stop",
        "input_virtual_create",
        "gml_Script_input_virtual_create",
        "input_virtual_debug_draw",
        "gml_Script_input_virtual_debug_draw",
        "input_virtual_destroy_all",
        "gml_Script_input_virtual_destroy_all",
        "input_window_has_focus",
        "gml_Script_input_window_has_focus",
        "input_x",
        "gml_Script_input_x",
        "input_xy",
        "gml_Script____struct___135@input_xy@input_xy",
        "gml_Script_input_xy",
        "input_y",
        "gml_Script_input_y",
        "introspection_deck_structs",
        "gml_Script_struct_introspection_card",
        "gml_Script_discard_pile_setup@anon@660@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_check_card@anon@739@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_add@anon@1056@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_remove@anon@1679@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_add_from_tag@anon@1969@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_remove_from_tag@anon@2481@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_shuffle@anon@3508@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_draw@anon@4605@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_create_new_deck@anon@5100@struct_introspection_deck@introspection_deck_structs",
        "gml_Script_struct_introspection_deck",
        "introspection_get_scripts",
        "gml_Script_scr_introspection_get_id",
        "gml_Script_scr_introspection_get_title",
        "gml_Script_scr_introspection_get_name",
        "gml_Script_scr_introspection_get_text",
        "gml_Script_scr_introspection_get_choices",
        "gml_Script_scr_introspection_get_choice",
        "gml_Script_scr_introspection_get_reward",
        "gml_Script_scr_introspection_get_resolution",
        "music_get_scripts",
        "gml_Script_scr_music_get_title",
        "gml_Script_scr_music_get_devname",
        "gml_Script_scr_music_get_artist",
        "gml_Script_scr_music_get_track",
        "gml_Script_scr_music_get_track_length",
        "gml_Script_scr_music_get_track_length_string",
        "gml_Script_scr_music_get_title_scroll_a",
        "gml_Script_scr_music_get_title_scroll_b",
        "gml_Script_scr_music_get_artist_scroll_a",
        "gml_Script_scr_music_get_artist_scroll_b",
        "gml_Script_scr_music_get_title_width",
        "gml_Script_scr_music_get_id",
        "particle_structs",
        "gml_Script_move@anon@509@struct_leaf@particle_structs",
        "gml_Script_draw@anon@798@struct_leaf@particle_structs",
        "gml_Script_struct_leaf",
        "road_controller_controlled_cars",
        "gml_Script_scr_road_controller_add_c_car",
        "gml_Script_scr_road_controller_clear_cars",
        "road_log_scripts",
        "gml_Script_scr_road_log_stat_change",
        "gml_Script_scr_road_log_reset",
        "gml_Script_scr_road_summary_store_log",
        "gml_Script_scr_road_log_get_stat_number",
        "gml_Script_scr_road_log_get_stat",
        "scr_add_quest",
        "gml_Script_scr_add_quest",
        "scr_ailment_add",
        "gml_Script_scr_ailment_add",
        "scr_ailment_cure_random_negative",
        "gml_Script_scr_ailment_cure_random_negative",
        "scr_ailment_cure_random_positive",
        "gml_Script_scr_ailment_cure_random_positive",
        "scr_ailment_cure",
        "gml_Script_scr_ailment_cure",
        "gml_Script_scr_ailment_cure_all",
        "scr_ailment_get_dev_name",
        "gml_Script_scr_ailment_get_dev_name",
        "scr_ailment_get_expire_time",
        "gml_Script_scr_ailment_get_expire_time",
        "scr_ailment_get_id",
        "gml_Script_scr_ailment_get_id",
        "scr_ailment_get_name",
        "gml_Script_scr_ailment_get_name",
        "scr_ailment_get_random",
        "gml_Script_scr_ailment_get_random",
        "scr_ailment_get_sprite",
        "gml_Script_scr_ailment_get_sprite",
        "scr_ailment_get_type",
        "gml_Script_scr_ailment_get_type",
        "scr_ailment_got",
        "gml_Script_scr_ailment_got",
        "scr_ailments_time_inc",
        "gml_Script_scr_ailments_time_inc",
        "scr_banter_check_req",
        "gml_Script_scr_banter_check_req",
        "scr_banter_deck_draw",
        "gml_Script_scr_banter_deck_draw",
        "scr_banter_deck_shuffle",
        "gml_Script_scr_banter_deck_shuffle",
        "scr_banter_get_id",
        "gml_Script_scr_banter_get_id",
        "scr_bg_calc_parallax_y",
        "gml_Script_scr_bg_calc_parallax_y",
        "scr_bg_draw_water_surfs",
        "gml_Script_scr_bg_draw_water_surfs",
        "scr_bg_find_closest_part",
        "gml_Script_scr_bg_find_closest_part",
        "scr_bg_get_env_id",
        "gml_Script_scr_bg_get_env_id",
        "scr_bg_get_from_bgset",
        "gml_Script_scr_bg_get_from_bgset",
        "gml_Script_scr_env_get_from_bgset",
        "scr_bg_get_from_biome",
        "gml_Script_scr_bg_get_from_biome",
        "scr_bg_get_id",
        "gml_Script_scr_bg_get_id",
        "scr_bg_got_tag",
        "gml_Script_scr_bg_got_tag",
        "scr_bg_is_sidewalk",
        "gml_Script_scr_bg_is_sidewalk",
        "scr_bg_is_water",
        "gml_Script_scr_bg_is_water",
        "scr_bg_layer_part_update",
        "gml_Script_scr_bg_layer_part_update",
        "scr_bg_queue_env",
        "gml_Script_scr_bg_queue_env",
        "gml_Script_scr_bg_queue_specific",
        "gml_Script_scr_bg_queue_bgset",
        "gml_Script_scr_bg_get_rural_bg",
        "scr_bg_railing_change",
        "gml_Script_scr_bg_railing_change",
        "scr_bg_railing_start",
        "gml_Script_scr_bg_railing_start",
        "gml_Script_scr_bg_railing_end",
        "gml_Script_scr_bg_railing_end_forest_fence",
        "scr_bg_set_env",
        "gml_Script_scr_bg_set_env",
        "scr_bg_set_setup_layers",
        "gml_Script_scr_bg_set_setup_layers",
        "scr_bg_sidewalk_start",
        "gml_Script_scr_bg_sidewalk_start",
        "gml_Script_scr_bg_sidewalk_set",
        "scr_bg_sidewalk_stop",
        "gml_Script_scr_bg_sidewalk_stop",
        "scr_bg_strip_create",
        "gml_Script_scr_bg_strip_create",
        "gml_Script_scr_bg_strip_add_part",
        "gml_Script_scr_bg_strip_remove_left",
        "gml_Script_scr_bg_strip_part_add_structs",
        "scr_bg_strip_destroy_all",
        "gml_Script_scr_bg_strip_destroy_all",
        "scr_bg_strip_exists",
        "gml_Script_scr_bg_strip_exists",
        "scr_bg_strips_kill",
        "gml_Script_scr_bg_strips_kill",
        "scr_bg_strips_set_for_env",
        "gml_Script_scr_bg_strips_set_for_env",
        "gml_Script_scr_bg_strips_set_from_bgset",
        "gml_Script_scr_bg_strips_set_from_dest",
        "scr_bg_structs",
        "gml_Script_move@anon@1915@struct_bg_sprite@scr_bg_structs",
        "gml_Script_draw@anon@2094@struct_bg_sprite@scr_bg_structs",
        "gml_Script_struct_bg_sprite",
        "gml_Script_draw@anon@3199@struct_bg_sprites@scr_bg_structs",
        "gml_Script_move@anon@3618@struct_bg_sprites@scr_bg_structs",
        "gml_Script_teleport@anon@3965@struct_bg_sprites@scr_bg_structs",
        "gml_Script_kill@anon@4182@struct_bg_sprites@scr_bg_structs",
        "gml_Script_resurrect@anon@4610@struct_bg_sprites@scr_bg_structs",
        "gml_Script_add@anon@4729@struct_bg_sprites@scr_bg_structs",
        "gml_Script_sort@anon@4982@struct_bg_sprites@scr_bg_structs",
        "gml_Script_readme@anon@6860@struct_bg_sprites@scr_bg_structs",
        "gml_Script_clear@anon@6928@struct_bg_sprites@scr_bg_structs",
        "gml_Script_struct_bg_sprites",
        "gml_Script_draw@anon@7327@struct_bg_part@scr_bg_structs",
        "gml_Script_move@anon@7816@struct_bg_part@scr_bg_structs",
        "gml_Script_struct_bg_part",
        "gml_Script_add@anon@8404@struct_sprite_list@scr_bg_structs",
        "gml_Script_remove@anon@9047@struct_sprite_list@scr_bg_structs",
        "gml_Script_get@anon@9203@struct_sprite_list@scr_bg_structs",
        "gml_Script_get_from_rarity@anon@9524@struct_sprite_list@scr_bg_structs",
        "gml_Script_change_offset@anon@10090@struct_sprite_list@scr_bg_structs",
        "gml_Script_change_offset_from_sprite@anon@10354@struct_sprite_list@scr_bg_structs",
        "gml_Script_add_from_tag@anon@10739@struct_sprite_list@scr_bg_structs",
        "gml_Script_struct_sprite_list",
        "gml_Script_add@anon@11349@struct_env@scr_bg_structs",
        "gml_Script_add_bgset@anon@11511@struct_env@scr_bg_structs",
        "gml_Script_get@anon@11600@struct_env@scr_bg_structs",
        "gml_Script_get_bgset@anon@11788@struct_env@scr_bg_structs",
        "gml_Script_struct_env",
        "scr_bgset_get_id",
        "gml_Script_scr_bgset_get_id",
        "gml_Script_scr_bgset_get_env",
        "scr_black_out_select_option",
        "gml_Script_scr_black_out_select_option",
        "scr_black_out",
        "gml_Script_scr_black_out",
        "scr_blueprint_draw_upgrades",
        "gml_Script_scr_blueprint_draw_upgrades",
        "scr_bottom_ui_tween",
        "gml_Script_scr_bottom_ui_tween_in",
        "gml_Script_scr_bottom_ui_tween_in_fast",
        "gml_Script_scr_bottom_ui_tween_out",
        "scr_break_glasses",
        "gml_Script_scr_break_glasses",
        "scr_button_get_active",
        "gml_Script_scr_button_get_active",
        "scr_button_set_colors",
        "gml_Script_scr_button_set_colors",
        "scr_button_unhover_all",
        "gml_Script_scr_button_unhover_all",
        "scr_calendar_close",
        "gml_Script_scr_calendar_close",
        "scr_calendar_day_view_set_plans",
        "gml_Script_scr_calendar_day_view_set_plans",
        "scr_calendar_get_cell_coords",
        "gml_Script_scr_calendar_get_cell_coords",
        "scr_calendar_get_quest_coords",
        "gml_Script_scr_calendar_get_quest_coords",
        "scr_calendar_get_quest_n",
        "gml_Script_scr_calendar_get_quest_n",
        "scr_calendar_get_quest_number",
        "gml_Script_scr_calendar_get_quest_number",
        "scr_calendar_open",
        "gml_Script_scr_calendar_open",
        "scr_calendar_quest_expand",
        "gml_Script_scr_calendar_quest_expand",
        "scr_calendar_set_active_quests",
        "gml_Script_scr_calendar_set_active_quests",
        "scr_camera_zoom_scripts",
        "gml_Script_scr_camera_zoom",
        "gml_Script_scr_camera_zoom_time",
        "gml_Script_scr_camera_zoom_out",
        "scr_can_move_car",
        "gml_Script_scr_can_move_car",
        "scr_can_open_car_menu",
        "gml_Script_scr_can_open_car_menu",
        "scr_car_cam_control",
        "gml_Script_scr_car_cam_control",
        "scr_car_cam_start_tween",
        "gml_Script_scr_car_cam_start_tween",
        "gml_Script_scr_car_cam_start_tween_lock",
        "scr_car_clicked",
        "gml_Script_scr_car_clicked",
        "gml_Script_scr_car_hovered",
        "scr_car_collision",
        "gml_Script_scr_car_collision",
        "scr_car_driver_set_offset",
        "gml_Script_scr_car_driver_set_offset",
        "gml_Script_scr_car_hh_incar_set_offset",
        "scr_car_get_height",
        "gml_Script_scr_car_get_height",
        "scr_car_get_wheel_collision",
        "gml_Script_scr_car_get_wheel_collision",
        "scr_car_get_wheel_extra_height",
        "gml_Script_scr_car_get_wheel_extra_height",
        "scr_car_get_width",
        "gml_Script_scr_car_get_width",
        "scr_car_get_y_offset",
        "gml_Script_scr_car_get_y_offset",
        "gml_Script_scr_car_get_x_offset",
        "scr_car_menu_sound_select",
        "gml_Script_scr_car_menu_sound_select",
        "scr_car_slow_down",
        "gml_Script_scr_car_slow_down",
        "scr_car_slowing_down_and_starting_up",
        "gml_Script_scr_car_slowing_down_and_starting_up",
        "scr_car_start_up",
        "gml_Script_scr_car_start_up",
        "scr_car_stats_update",
        "gml_Script_scr_car_stats_update",
        "scr_car_stop",
        "gml_Script_scr_car_stop",
        "scr_car_window_close",
        "gml_Script_scr_car_window_open",
        "gml_Script_scr_car_window_close",
        "scr_casino_check_win",
        "gml_Script_scr_casino_check_win",
        "scr_casino_open",
        "gml_Script_scr_casino_open",
        "scr_casino_start_spin",
        "gml_Script_scr_casino_start_spin",
        "scr_cc_car_set_upgrades",
        "gml_Script_scr_cc_car_set_upgrades",
        "scr_cc_cars_start_tween",
        "gml_Script_scr_cc_cars_start_tween",
        "scr_cc_loadout_get_id",
        "gml_Script_scr_cc_loadout_get_id",
        "scr_change_all_haze",
        "gml_Script_scr_change_all_haze",
        "scr_change_car_id",
        "gml_Script_scr_change_car_id",
        "scr_change_env_lut",
        "gml_Script_scr_change_env_lut",
        "scr_change_haze",
        "gml_Script_scr_change_haze",
        "scr_check_prompt_block",
        "gml_Script_scr_check_prompt_block",
        "scr_check_spartan",
        "gml_Script_scr_check_spartan",
        "scr_check_top_close_button_hovering",
        "gml_Script_scr_check_top_close_button_hovering",
        "scr_city_spawn_initial_pedestrians",
        "gml_Script_scr_city_spawn_initial_pedestrians",
        "scr_clean_bg_strip",
        "gml_Script_scr_clean_bg_strip",
        "scr_close_car_menu",
        "gml_Script_scr_close_car_menu",
        "scr_close_explore",
        "gml_Script_scr_close_explore",
        "scr_cloud_structs",
        "gml_Script_update@anon@272@struct_cloud@scr_cloud_structs",
        "gml_Script_draw@anon@697@struct_cloud@scr_cloud_structs",
        "gml_Script_struct_cloud",
        "gml_Script_update@anon@1622@struct_big_cloud@scr_cloud_structs",
        "gml_Script_draw@anon@2056@struct_big_cloud@scr_cloud_structs",
        "gml_Script_struct_big_cloud",
        "scr_count_negative_ailments",
        "gml_Script_scr_count_negative_ailments",
        "scr_count_positive_ailments",
        "gml_Script_scr_count_positive_ailments",
        "scr_create_3d_plane",
        "gml_Script_scr_create_3d_plane",
        "scr_create_banter",
        "gml_Script_scr_create_banter",
        "scr_create_blur_mask",
        "gml_Script_scr_create_blur_mask",
        "gml_Script_scr_remove_all_blur_masks",
        "scr_create_button_text",
        "gml_Script_scr_create_button_text",
        "scr_create_button",
        "gml_Script_scr_create_button",
        "scr_create_clouds_small",
        "gml_Script_scr_create_clouds_small",
        "gml_Script_scr_create_cloud_big",
        "gml_Script_scr_clear_clouds",
        "scr_create_day_change_vignette",
        "gml_Script_scr_create_day_change_vignette",
        "scr_create_dest_dot",
        "gml_Script_scr_create_dest_dot",
        "scr_create_destination_car_pos_trigger",
        "gml_Script_scr_create_destination_car_pos_trigger",
        "scr_create_dialogue",
        "gml_Script_scr_create_dialogue",
        "scr_create_ending_unlock",
        "gml_Script_scr_create_ending_unlock",
        "scr_create_ending",
        "gml_Script_scr_create_ending",
        "gml_Script_scr_ending_set_text_variables",
        "scr_create_event",
        "gml_Script_scr_create_event",
        "scr_create_explore",
        "gml_Script_scr_create_explore",
        "scr_create_gui_effect",
        "gml_Script_scr_create_gui_effect",
        "scr_create_hh_exp_delay",
        "gml_Script_scr_create_hh_exp_delay",
        "scr_create_introspection",
        "gml_Script_scr_create_introspection",
        "scr_create_menu",
        "scr_create_passive_effect_flash_passive_skill",
        "gml_Script_scr_create_passive_effect_flash_passive_skill",
        "scr_create_passive_effect_flash_trait",
        "gml_Script_scr_create_passive_effect_flash_trait",
        "scr_create_passive_effect_flash_upgrade",
        "gml_Script_scr_create_passive_effect_flash_upgrade",
        "scr_create_passive_effect_flash",
        "gml_Script_scr_create_passive_effect_flash",
        "scr_create_passive_tutorial_message",
        "gml_Script_scr_create_passive_tutorial_message",
        "scr_create_pedestrian",
        "gml_Script_scr_create_pedestrian",
        "gml_Script_scr_pedestrian_generate_type",
        "scr_create_person",
        "gml_Script_scr_create_person",
        "scr_create_prompt_empty",
        "gml_Script_scr_create_prompt_empty",
        "scr_create_prompt",
        "gml_Script_scr_create_prompt",
        "scr_create_quest_notification",
        "gml_Script_scr_create_quest_notification",
        "gml_Script_scr_create_quest_notification_new_quest",
        "scr_create_quest_window",
        "gml_Script_scr_create_quest_window",
        "scr_create_road_event",
        "gml_Script_scr_create_road_event",
        "scr_create_road_info",
        "gml_Script_scr_create_road_info",
        "scr_create_road_temp_object",
        "gml_Script_scr_create_road_temp_object",
        "gml_Script_scr_create_temp_bg_object",
        "scr_create_shop",
        "gml_Script_scr_create_shop",
        "scr_create_side_stop_sign",
        "gml_Script_scr_create_side_stop_sign",
        "scr_create_skill_check",
        "gml_Script_scr_create_skill_check",
        "scr_create_stat_change_effect",
        "gml_Script_scr_create_stat_change_effect",
        "gml_Script_scr_create_ailment_effect",
        "gml_Script_scr_create_skill_point_effect",
        "gml_Script_scr_create_floating_text_effect",
        "gml_Script_scr_create_hh_exp_effect",
        "scr_create_work_ui",
        "gml_Script_scr_create_work_ui",
        "scr_dark_screen_left",
        "gml_Script_scr_dark_screen_left",
        "scr_dark_screen_right",
        "gml_Script_scr_dark_screen_right",
        "scr_dashboard_bobble_head_change_sprite",
        "gml_Script_scr_dashboard_bobble_head_change_sprite",
        "scr_dashboard_set_text",
        "gml_Script_scr_dashboard_set_text",
        "scr_dashboard_start_copy_fade",
        "gml_Script_scr_dashboard_start_copy_fade",
        "scr_dashboard_tween_in",
        "gml_Script_scr_dashboard_tween_in",
        "scr_dashboard_tween_out",
        "gml_Script_scr_dashboard_tween_out",
        "scr_definition_get_name",
        "gml_Script_scr_definition_get_name",
        "scr_delete_road_info",
        "gml_Script_scr_delete_road_info",
        "scr_delete_shop",
        "gml_Script_scr_delete_shop",
        "scr_delete_work_ui",
        "gml_Script_scr_delete_work_ui",
        "scr_dest_activate_world_sounds",
        "gml_Script_scr_dest_activate_world_sounds",
        "gml_Script_scr_dest_deactivate_world_sounds",
        "scr_dest_add_bg_sprite",
        "gml_Script_scr_dest_add_bg_sprite",
        "scr_dest_add_building",
        "gml_Script_scr_dest_add_building",
        "scr_dest_add_hh",
        "gml_Script_scr_dest_add_hh",
        "scr_dest_add_person",
        "gml_Script_scr_dest_add_person",
        "scr_dest_add_street_lights",
        "gml_Script_scr_dest_add_street_lights",
        "gml_Script_scr_dest_add_birds",
        "gml_Script_scr_dest_add_butterflies",
        "gml_Script_scr_dest_add_forest_critters",
        "scr_dest_bg_structs",
        "gml_Script_add@anon@329@struct_dest_sprite_list@scr_dest_bg_structs",
        "gml_Script_remove@anon@449@struct_dest_sprite_list@scr_dest_bg_structs",
        "gml_Script_get@anon@605@struct_dest_sprite_list@scr_dest_bg_structs",
        "gml_Script_change_offset@anon@771@struct_dest_sprite_list@scr_dest_bg_structs",
        "gml_Script_add_from_tag@anon@1019@struct_dest_sprite_list@scr_dest_bg_structs",
        "gml_Script_struct_dest_sprite_list",
        "scr_dest_building_save_asset",
        "gml_Script_scr_dest_building_save_asset",
        "gml_Script_scr_dest_building_load_asset",
        "gml_Script_scr_save_explore",
        "gml_Script_scr_load_explore",
        "gml_Script_scr_save_work",
        "gml_Script_scr_load_work",
        "gml_Script_scr_save_quest_board",
        "gml_Script_scr_load_quest_board",
        "gml_Script_scr_save_shop",
        "gml_Script_scr_load_shop",
        "gml_Script_scr_save_junkyard",
        "gml_Script_scr_load_junkyard",
        "scr_dest_dot_pressed",
        "gml_Script_scr_dest_dot_pressed",
        "scr_dest_dot_select",
        "gml_Script_scr_dest_dot_select",
        "scr_dest_find_unoccupied_building",
        "gml_Script_scr_dest_find_unoccupied_building",
        "scr_dest_get_bg_group",
        "gml_Script_scr_dest_get_bg_group",
        "scr_dest_get_devname",
        "gml_Script_scr_dest_get_devname",
        "scr_dest_get_icons_arr",
        "gml_Script_scr_dest_get_icons_arr",
        "gml_Script_scr_dest_get_options_arr",
        "scr_dest_get_id",
        "gml_Script_scr_dest_get_id",
        "scr_dest_hhs_check_for_quest_completion",
        "gml_Script_scr_dest_hhs_check_for_quest_completion",
        "scr_dest_hhs_check_for_talks",
        "gml_Script_scr_dest_hhs_check_for_talks",
        "scr_dest_option_base_values",
        "gml_Script_scr_dest_option_base_values",
        "scr_dest_option_get_world_x",
        "gml_Script_scr_dest_option_get_world_x",
        "scr_destination_create_option_asset",
        "gml_Script_scr_destination_create_option_asset",
        "scr_destination_find_option",
        "gml_Script_scr_destination_find_option",
        "gml_Script_scr_destination_find_option_person",
        "scr_destination_generate_name",
        "gml_Script_scr_destination_generate_name",
        "scr_destination_get_env_from_type",
        "gml_Script_scr_destination_get_env_from_type",
        "scr_destination_get_from_type",
        "gml_Script_scr_destination_get_from_type",
        "scr_destination_get_options",
        "gml_Script_scr_destination_get_options",
        "scr_destination_load_next",
        "gml_Script_scr_destination_load_next",
        "scr_destination_option_get_cost",
        "gml_Script_scr_destination_option_get_cost",
        "scr_destination_option_get_id",
        "gml_Script_scr_destination_option_get_id",
        "gml_Script_scr_destination_option_type_get_id",
        "scr_destination_option_get_name",
        "gml_Script_scr_destination_option_get_name",
        "gml_Script_scr_destination_option_get_dev_name",
        "scr_destination_option_get_sprite",
        "gml_Script_scr_destination_option_get_sprite",
        "scr_destination_option_get_type",
        "gml_Script_scr_destination_option_get_type",
        "scr_destination_set_env_and_type",
        "gml_Script_scr_destination_set_env_and_type",
        "scr_destination_set_prev",
        "gml_Script_scr_destination_set_prev",
        "scr_destroy_all_dest_dots",
        "gml_Script_scr_destroy_all_dest_dots",
        "scr_destroy_all_pedestrians",
        "gml_Script_scr_destroy_all_pedestrians",
        "scr_dialogue_get_from_tag",
        "gml_Script_scr_dialogue_get_from_tag",
        "scr_dialogue_get_id",
        "gml_Script_scr_dialogue_get_id",
        "scr_draw_button",
        "gml_Script_scr_draw_button",
        "scr_draw_car_menu",
        "gml_Script_scr_draw_car_menu",
        "scr_draw_car_only_upgrades",
        "gml_Script_scr_draw_car_only_upgrades",
        "scr_draw_car",
        "gml_Script_scr_draw_car",
        "scr_draw_dest",
        "gml_Script_scr_draw_dest",
        "gml_Script_scr_draw_dest_front_sprites",
        "scr_draw_energy_bars",
        "gml_Script_scr_draw_energy_bars",
        "scr_draw_glovebox_items",
        "gml_Script_scr_draw_glovebox_items",
        "gml_Script_scr_draw_glovebox_items_only_pattern",
        "scr_draw_glovebox",
        "gml_Script_scr_draw_glovebox",
        "scr_draw_gui_begin",
        "gml_Script_scr_draw_gui_begin",
        "gml_Script_scr_draw_gui_begin_unblurred",
        "scr_draw_gui_end",
        "gml_Script_scr_draw_gui_end",
        "scr_draw_hh_exp_gain",
        "gml_Script_scr_draw_hh_exp_gain",
        "scr_draw_inventory_extra_space",
        "gml_Script_scr_draw_inventory_extra_space",
        "scr_draw_inventory",
        "gml_Script_scr_draw_inventory",
        "scr_draw_item",
        "gml_Script_scr_draw_item",
        "scr_draw_items",
        "gml_Script_scr_draw_items",
        "gml_Script_scr_draw_items_only_patterns",
        "scr_draw_job_listing",
        "gml_Script_scr_draw_job_listing",
        "scr_draw_line",
        "gml_Script_scr_draw_line",
        "scr_draw_pedestrians",
        "gml_Script_scr_draw_pedestrians",
        "scr_draw_person",
        "gml_Script_scr_draw_person",
        "scr_draw_road_temp_objects",
        "gml_Script_scr_draw_road_temp_object_actual",
        "gml_Script_scr_draw_road_temp_objects_back",
        "gml_Script_scr_draw_road_temp_objects_front",
        "gml_Script_scr_draw_road_temp_objects_way_back",
        "gml_Script_scr_draw_bg_temp_object_actual",
        "gml_Script_scr_draw_bg_temp_objects",
        "scr_draw_skill_cost_summary",
        "gml_Script_scr_draw_skill_cost_summary",
        "scr_draw_skill_cost",
        "gml_Script_scr_draw_skill_cost",
        "scr_draw_skill_hanger",
        "gml_Script_scr_draw_skill_hanger",
        "scr_draw_skill_miniature",
        "gml_Script_scr_draw_skill_miniature",
        "scr_draw_skill_old_newer",
        "gml_Script_scr_draw_skill_old_newer",
        "scr_draw_skill_old",
        "gml_Script_scr_draw_skill_old",
        "scr_draw_skill_passive",
        "gml_Script_scr_draw_skill_passive",
        "scr_draw_skill_summary",
        "gml_Script_scr_draw_skill_summary",
        "scr_draw_skill",
        "gml_Script_scr_draw_skill",
        "scr_draw_text_outline",
        "gml_Script_scr_draw_text_outline",
        "gml_Script_scr_draw_text_ext_outline",
        "gml_Script_scr_draw_text_transformed_outline",
        "scr_draw_text_plastique",
        "gml_Script_scr_draw_text_plastique",
        "scr_draw_text_script",
        "gml_Script_scr_draw_text_script",
        "scr_draw_threat_pattern_tooltip",
        "gml_Script_scr_draw_threat_pattern_tooltip",
        "gml_Script_scr_get_threat_pattern_sprite_string",
        "scr_draw_threat_pattern",
        "gml_Script_scr_draw_threat_pattern",
        "gml_Script_scr_hoverable_threat_pattern",
        "scr_draw_tooltip",
        "gml_Script_scr_draw_tooltip",
        "scr_draw_ui_bottom_left",
        "gml_Script_scr_draw_ui_bottom_left",
        "scr_draw_ui_bottom_right",
        "gml_Script_scr_draw_ui_bottom_right",
        "scr_draw_ui_bottom",
        "gml_Script_scr_draw_ui_bottom",
        "scr_drive_ui_drunk",
        "gml_Script_scr_drive_ui_drunk",
        "scr_driver_change_sprite",
        "gml_Script_scr_driver_change_sprite",
        "scr_ending_get_id",
        "gml_Script_scr_ending_get_id",
        "gml_Script_scr_ending_get_devname",
        "gml_Script_scr_ending_get_title",
        "scr_ending_get_text",
        "gml_Script_scr_ending_get_text",
        "scr_ending_get_unlock",
        "gml_Script_scr_ending_get_unlock",
        "scr_ending_got",
        "gml_Script_scr_ending_got",
        "gml_Script_scr_ending_get_meta_number",
        "scr_ending_queue_unlocks",
        "gml_Script_scr_ending_queue_unlocks",
        "scr_ending_unlock_get_id",
        "gml_Script_scr_ending_unlock_get_id",
        "scr_ending_unlock_got",
        "gml_Script_scr_ending_unlock_got",
        "scr_env_change",
        "gml_Script_scr_env_change",
        "scr_env_get_lut",
        "gml_Script_scr_env_get_lut",
        "scr_event_contain_shop",
        "gml_Script_scr_event_contain_shop",
        "scr_event_deactivate_buttons",
        "gml_Script_scr_event_deactivate_buttons",
        "scr_event_get_from_tags",
        "gml_Script_scr_event_get_from_tags",
        "scr_event_get_id",
        "gml_Script_scr_event_get_id",
        "scr_exploration_create_path",
        "gml_Script_scr_exploration_create_path_y",
        "gml_Script_scr_exploration_create_path_x",
        "scr_explore_check_door",
        "gml_Script_scr_explore_check_door",
        "scr_explore_claim_items",
        "gml_Script_scr_explore_claim_items",
        "scr_explore_collect_item",
        "gml_Script_scr_explore_collect_item",
        "scr_explore_create_cross_plane",
        "gml_Script_scr_explore_create_cross_plane",
        "gml_Script_scr_explore_create_single_plane",
        "scr_explore_create_special_object",
        "gml_Script_scr_explore_create_special_object",
        "gml_Script_scr_explore_create_door_object",
        "scr_explore_create_text_box",
        "gml_Script_scr_explore_create_text_box",
        "scr_explore_draw_object",
        "gml_Script_scr_explore_draw_object",
        "scr_explore_get_scripts",
        "gml_Script_scr_explore_place_get_id",
        "gml_Script_scr_explore_place_get_sprite",
        "gml_Script_scr_explore_place_get_key_item_id",
        "gml_Script_scr_explore_place_get_text_success",
        "gml_Script_scr_explore_place_get_text_fail",
        "gml_Script_scr_explore_place_get_reward_item_string",
        "gml_Script_scr_explore_place_get_from_env",
        "scr_festival_create_temp_objects",
        "gml_Script_scr_festival_create_temp_objects",
        "scr_font_get_id",
        "gml_Script_scr_font_get_id",
        "scr_font_get_xspacing",
        "gml_Script_scr_font_get_xspacing",
        "scr_font_get_yspacing",
        "gml_Script_scr_font_get_yspacing",
        "scr_force_top_close_button_click",
        "gml_Script_scr_force_top_close_button_click",
        "scr_full_screen_blur",
        "gml_Script_scr_full_screen_blur",
        "scr_gain_skill_point",
        "gml_Script_scr_gain_skill_point",
        "scr_game_restart",
        "gml_Script_scr_game_restart",
        "scr_garage_calc_repair_cost",
        "gml_Script_scr_garage_calc_repair_cost",
        "scr_garage_close",
        "gml_Script_scr_garage_close",
        "scr_garage_open",
        "gml_Script_scr_garage_open",
        "scr_garage_unequip_upgrade",
        "gml_Script_scr_garage_unequip_upgrade",
        "scr_gas_interface_calc_money",
        "gml_Script_scr_gas_interface_calc_money",
        "scr_gas_interface_calc_perc",
        "gml_Script_scr_gas_interface_calc_perc",
        "scr_gas_interface_open",
        "gml_Script_scr_gas_interface_open",
        "scr_gas_meter_angle",
        "gml_Script_scr_gas_meter_angle",
        "scr_gas_meter_hl_off",
        "gml_Script_scr_gas_meter_hl_off",
        "scr_gas_meter_hl_on",
        "gml_Script_scr_gas_meter_hl_on",
        "scr_gb_add_item",
        "gml_Script_scr_gb_add_item",
        "scr_gb_close",
        "gml_Script_scr_gb_close",
        "scr_gb_gp_can_open",
        "gml_Script_scr_gb_gp_can_open",
        "scr_gb_open",
        "gml_Script_scr_gb_open",
        "scr_get_active_shop",
        "gml_Script_scr_get_active_shop",
        "scr_get_crafty_pattern",
        "gml_Script_scr_get_crafty_pattern",
        "scr_get_random_asset_from_tag",
        "gml_Script_scr_get_random_asset_from_tag",
        "scr_get_time_string",
        "gml_Script_scr_get_time_string",
        "scr_get_trait_text_color",
        "gml_Script_scr_get_trait_text_color",
        "scr_give_reward",
        "gml_Script_scr_give_reward",
        "scr_glovebox_free_item",
        "gml_Script_scr_glovebox_free_item",
        "scr_got_trait",
        "gml_Script_scr_got_trait",
        "scr_hh_add_perk",
        "gml_Script_scr_hh_add_perk",
        "scr_hh_add_slot",
        "gml_Script_scr_hh_add_slot",
        "scr_hh_add",
        "gml_Script_scr_hh_add",
        "scr_hh_bride_change_portraits",
        "gml_Script_scr_hh_bride_change_portraits",
        "scr_hh_create_level_up_window",
        "gml_Script_scr_hh_create_level_up_window",
        "scr_hh_gain_exp",
        "gml_Script_scr_hh_gain_exp",
        "scr_hh_gain_skill",
        "gml_Script_scr_hh_gain_skill",
        "scr_hh_get_button_sprite",
        "gml_Script_scr_hh_get_button_sprite",
        "scr_hh_get_desc",
        "gml_Script_scr_hh_get_desc",
        "scr_hh_get_id",
        "gml_Script_scr_hh_get_id",
        "scr_hh_get_impression",
        "gml_Script_scr_hh_get_impression",
        "scr_hh_get_level",
        "gml_Script_scr_hh_get_level",
        "gml_Script_scr_hh_get_exp",
        "scr_hh_get_max_exp",
        "gml_Script_scr_hh_get_max_exp",
        "scr_hh_get_menu_portrait",
        "gml_Script_scr_hh_get_menu_portrait",
        "scr_hh_get_n_perk",
        "gml_Script_scr_hh_get_n_perk",
        "scr_hh_get_name",
        "gml_Script_scr_hh_get_name",
        "gml_Script_scr_hh_get_dev_name",
        "gml_Script_scr_hh_get_pick_up_quest",
        "gml_Script_scr_hh_get_sex",
        "gml_Script_scr_hh_get_age",
        "gml_Script_scr_hh_get_occupation",
        "scr_hh_get_new",
        "gml_Script_scr_hh_get_new",
        "scr_hh_get_perk_dialogue",
        "gml_Script_scr_hh_get_perk_dialogue",
        "scr_hh_get_perk_name",
        "gml_Script_scr_hh_get_perk_name",
        "scr_hh_get_perk_type",
        "gml_Script_scr_hh_get_perk_type",
        "scr_hh_get_perk",
        "gml_Script_scr_hh_get_perk",
        "scr_hh_get_person_id",
        "gml_Script_scr_hh_get_person_id",
        "scr_hh_get_portrait",
        "gml_Script_scr_hh_get_portrait",
        "scr_hh_get_skill",
        "gml_Script_scr_hh_get_skill",
        "scr_hh_get_sleep_sprite",
        "gml_Script_scr_hh_get_sleep_sprite",
        "scr_hh_get_slot",
        "gml_Script_scr_hh_get_slot",
        "scr_hh_get_sprite",
        "gml_Script_scr_hh_get_sprite",
        "gml_Script_scr_hh_get_car_sprite",
        "scr_hh_get_trait",
        "gml_Script_scr_hh_get_trait",
        "scr_hh_got_perk",
        "gml_Script_scr_hh_got_perk",
        "scr_hh_got",
        "gml_Script_scr_hh_got",
        "scr_hh_kick",
        "gml_Script_scr_hh_kick",
        "scr_hh_list_reset_talks",
        "gml_Script_scr_hh_list_reset_talks",
        "gml_Script_scr_hh_list_reset_pickedup_status",
        "gml_Script_scr_hh_enable_talk",
        "scr_hh_n_perk_get_desc",
        "gml_Script_scr_hh_n_perk_get_desc",
        "scr_hh_n_perk_get_dev_name",
        "gml_Script_scr_hh_n_perk_get_dev_name",
        "scr_hh_n_perk_get_id",
        "gml_Script_scr_hh_n_perk_get_id",
        "scr_hh_n_perk_get_name",
        "gml_Script_scr_hh_n_perk_get_name",
        "scr_hh_perk_do_messy",
        "gml_Script_scr_hh_perk_do_messy",
        "scr_hh_perk_get_desc",
        "gml_Script_scr_hh_perk_get_desc",
        "scr_hh_perk_get_id",
        "gml_Script_scr_hh_perk_get_id",
        "gml_Script_scr_hh_perk_get_id_from_devname",
        "scr_hh_perk_get_name",
        "gml_Script_scr_hh_perk_get_name",
        "gml_Script_scr_hh_perk_get_name_from_id",
        "scr_hh_preview",
        "gml_Script_scr_hh_preview",
        "scr_hh_slot_get_seat",
        "gml_Script_scr_hh_slot_get_seat",
        "scr_hh_slot_inventory_update",
        "gml_Script_scr_hh_slot_inventory_update",
        "scr_hh_swap_slots",
        "gml_Script_scr_hh_swap_slots",
        "scr_hh_trigger_cigarette_share",
        "gml_Script_scr_hh_trigger_cigarette_share",
        "scr_hh_trigger_gambler_end",
        "gml_Script_scr_hh_trigger_gambler_end",
        "scr_hh_trigger_gambler_start",
        "gml_Script_scr_hh_trigger_gambler_start",
        "scr_hh_trigger_street_musician",
        "gml_Script_scr_hh_trigger_street_musician",
        "scr_hhs_in_car_update",
        "gml_Script_scr_hhs_in_car_update",
        "scr_hide_shop",
        "gml_Script_scr_hide_shop",
        "scr_hostel_open",
        "gml_Script_scr_hostel_open",
        "scr_inc_time",
        "gml_Script_scr_inc_time",
        "scr_increase_day",
        "gml_Script_scr_increase_day",
        "scr_input_deactivate_mouse",
        "gml_Script_scr_input_deactivate_mouse",
        "scr_input_draw_gp_screen_blocker",
        "gml_Script_scr_input_draw_gp_screen_blocker",
        "scr_input_ignore_all_keyboard_keys",
        "gml_Script_scr_input_ignore_all_keyboard_keys",
        "scr_input_lclick_pressed",
        "gml_Script_scr_input_lclick_pressed",
        "scr_input_lclick_released",
        "gml_Script_scr_input_lclick_released",
        "scr_input_lclick",
        "gml_Script_scr_input_lclick",
        "scr_input_rclick_pressed",
        "gml_Script_scr_input_rclick_pressed",
        "scr_input_rclick_released",
        "gml_Script_scr_input_rclick_released",
        "scr_input_rclick",
        "gml_Script_scr_input_rclick",
        "scr_instance_nth_nearest",
        "gml_Script_scr_instance_nth_nearest",
        "scr_introspection_check_req",
        "gml_Script_scr_introspection_check_req",
        "scr_introspection_deck_draw",
        "gml_Script_scr_introspection_deck_draw",
        "scr_introspection_deck_update",
        "gml_Script_scr_introspection_deck_update",
        "scr_inventory_add_item_random_position",
        "gml_Script_scr_inventory_add_item_random_position",
        "scr_inventory_add_item",
        "gml_Script_scr_inventory_add_item",
        "scr_inventory_block_adjacent_seats",
        "gml_Script_scr_inventory_block_adjacent_seats",
        "gml_Script_scr_inventory_unblock_adjacent_seats",
        "scr_inventory_check_empty",
        "gml_Script_scr_inventory_check_empty",
        "gml_Script_scr_inventory_extra_space_check_empty",
        "scr_inventory_check_if_can_close",
        "gml_Script_scr_inventory_close_action",
        "scr_inventory_check_mouse",
        "gml_Script_scr_inventory_check_mouse",
        "scr_inventory_close",
        "gml_Script_scr_inventory_close",
        "scr_inventory_extra_space_empty",
        "gml_Script_scr_inventory_extra_space_empty",
        "scr_inventory_extra_space_enable_space",
        "gml_Script_scr_inventory_extra_space_enable_space",
        "scr_inventory_extra_space_get_id",
        "gml_Script_scr_inventory_extra_space_get_id",
        "scr_inventory_free_item",
        "gml_Script_scr_inventory_free_item",
        "scr_inventory_item_hover_rotated",
        "gml_Script_scr_inventory_item_hover_rotated",
        "scr_inventory_item_hover",
        "gml_Script_scr_inventory_item_hover",
        "scr_inventory_item_snap_back",
        "gml_Script_scr_inventory_item_snap_back",
        "scr_inventory_items_take_space",
        "gml_Script_scr_inventory_items_take_space",
        "scr_inventory_open",
        "gml_Script_scr_inventory_open",
        "scr_inventory_outside_grid_check_available",
        "gml_Script_scr_inventory_outside_grid_check_available",
        "scr_inventory_outside_grid_empty",
        "gml_Script_scr_inventory_outside_grid_empty",
        "scr_inventory_outside_space_items_sort",
        "gml_Script_scr_inventory_outside_space_items_sort",
        "scr_inventory_pos_get_item",
        "gml_Script_scr_inventory_pos_get_item",
        "gml_Script_scr_inventory_pos_get_item_extra_space",
        "scr_inventory_set_for_car",
        "gml_Script_scr_inventory_set_for_car",
        "scr_inventory_sounds",
        "gml_Script_scr_inventory_sound_pickup",
        "gml_Script_scr_inventory_sound_pickdown",
        "gml_Script_scr_inventory_sound_car_seat_down",
        "gml_Script_scr_inventory_sound_car_seat_up",
        "scr_inventory_try_to_swap_items",
        "gml_Script_scr_inventory_try_to_swap_items",
        "scr_inventory_unhover_grid",
        "gml_Script_scr_inventory_unhover_grid",
        "scr_inventory_update_glovebox",
        "gml_Script_scr_inventory_update_glovebox",
        "scr_inventory_update_items",
        "gml_Script_scr_inventory_update_items",
        "scr_inventory_update_marker",
        "gml_Script_scr_inventory_update_marker",
        "scr_is_night",
        "gml_Script_scr_is_night",
        "scr_item_award",
        "gml_Script_scr_item_award",
        "scr_item_consume",
        "gml_Script_scr_item_consume",
        "scr_item_discard",
        "gml_Script_scr_item_discard",
        "scr_item_event_use",
        "gml_Script_scr_item_event_use",
        "scr_item_get_charges",
        "gml_Script_scr_item_get_charges",
        "scr_item_get_desc",
        "gml_Script_scr_item_get_desc",
        "scr_item_get_dev_name",
        "gml_Script_scr_item_get_dev_name",
        "scr_item_get_from_pool",
        "gml_Script_scr_item_get_from_pool",
        "scr_item_get_from_tag_string",
        "gml_Script_scr_item_get_from_tag_string",
        "gml_Script_scr_item_array_get_from_tag_string",
        "scr_item_get_h",
        "gml_Script_scr_item_get_h",
        "scr_item_get_id",
        "gml_Script_scr_item_get_id",
        "scr_item_get_name",
        "gml_Script_scr_item_get_name",
        "gml_Script_scr_item_get_devname",
        "scr_item_get_pattern",
        "gml_Script_scr_item_get_pattern",
        "scr_item_get_price",
        "gml_Script_scr_item_get_price",
        "scr_item_get_type",
        "gml_Script_scr_item_get_type",
        "gml_Script_scr_item_get_upg_slot",
        "scr_item_get_upgrade",
        "gml_Script_scr_item_get_upgrade",
        "scr_item_get_w",
        "gml_Script_scr_item_get_w",
        "scr_item_got_tag",
        "gml_Script_scr_item_got_tag",
        "scr_item_got",
        "gml_Script_scr_item_got",
        "gml_Script_scr_item_get_slot",
        "scr_item_is_in_outside_space",
        "gml_Script_scr_item_is_in_outside_space",
        "scr_item_is_small",
        "gml_Script_scr_item_is_small",
        "scr_item_transform_all",
        "gml_Script_scr_item_transform_all",
        "scr_item_transform",
        "gml_Script_scr_item_transform",
        "scr_item_trunk_remove",
        "gml_Script_scr_item_trunk_remove",
        "scr_items_add_max_charges",
        "gml_Script_scr_items_add_max_charges",
        "scr_journal_close",
        "gml_Script_scr_journal_close",
        "scr_journal_open",
        "gml_Script_scr_journal_open",
        "scr_journal_set_active_skill_tree",
        "gml_Script_scr_journal_set_active_skill_tree",
        "scr_journal_set_trait_text",
        "gml_Script_scr_journal_set_trait_text",
        "scr_journal_skill_focus",
        "gml_Script_scr_journal_skill_focus",
        "scr_junkyard_close",
        "gml_Script_scr_junkyard_close",
        "scr_junkyard_create",
        "gml_Script_scr_junkyard_create",
        "scr_junkyard_open",
        "gml_Script_scr_junkyard_open",
        "scr_junkyard_salvage_close",
        "gml_Script_scr_junkyard_salvage_close",
        "scr_keyboard_update_buttons",
        "gml_Script_scr_keyboard_update_buttons",
        "scr_layer_draw_bg_strips",
        "gml_Script_scr_layer_draw_bg_strips",
        "gml_Script_scr_bg_strip_draw",
        "scr_leave_dest",
        "gml_Script_scr_leave_dest",
        "scr_load_calendar",
        "gml_Script_scr_load_calendar",
        "scr_load_destination",
        "gml_Script_scr_load_destination",
        "scr_load_game",
        "gml_Script_scr_load_game",
        "scr_load_hhs",
        "gml_Script_scr_load_hhs",
        "scr_load_inventory",
        "gml_Script_scr_load_inventory",
        "scr_load_journal",
        "gml_Script_scr_load_journal",
        "scr_load_map",
        "gml_Script_scr_load_map",
        "gml_Script_scr_load_map_iterative",
        "scr_load_music",
        "gml_Script_scr_load_music",
        "scr_load_road_from_save",
        "gml_Script_scr_load_road_from_save",
        "scr_load_settings",
        "gml_Script_scr_load_settings",
        "scr_load_side_stop_icons",
        "gml_Script_scr_load_side_stop_icons",
        "scr_load_side_stop",
        "gml_Script_scr_load_side_stop",
        "scr_load_special_objects",
        "gml_Script_scr_load_special_objects",
        "scr_load_stats",
        "gml_Script_scr_load_stats",
        "scr_load_world",
        "gml_Script_scr_load_world",
        "scr_make_3d_centered_plane",
        "gml_Script_scr_make_3d_centered_plane",
        "scr_make_3d_cube_ext",
        "gml_Script_scr_make_3d_cube_ext",
        "scr_make_3d_cube",
        "gml_Script_scr_make_3d_cube",
        "scr_make_plane",
        "gml_Script_scr_make_plane",
        "scr_map_3d_fold",
        "gml_Script_scr_map_3d_fold",
        "scr_map_add_dest_in_game",
        "gml_Script_scr_map_add_dest_in_game",
        "scr_map_add_dest",
        "gml_Script_scr_map_add_dest",
        "scr_map_add_gen_travellers_to_grid",
        "gml_Script_scr_map_add_gen_travellers_to_grid",
        "gml_Script_scr_map_remove_gen_travellers_for_road",
        "scr_map_add_hiker_paths",
        "gml_Script_scr_map_add_hiker_paths",
        "scr_map_add_main_path",
        "gml_Script_scr_map_add_main_path",
        "scr_map_add_path",
        "gml_Script_scr_map_add_path",
        "gml_Script_scr_bug_check_road",
        "scr_map_add_river",
        "gml_Script_scr_map_add_river",
        "scr_map_add_temp_dest_blockers",
        "gml_Script_scr_map_add_temp_dest_blockers",
        "gml_Script_scr_map_remove_temp_blockers",
        "scr_map_adjust_dest_pos_with_grid",
        "gml_Script_scr_map_adjust_dest_pos_with_grid",
        "scr_map_clamp_grid_pos",
        "gml_Script_scr_map_clamp_grid_pos",
        "scr_map_close",
        "gml_Script_scr_map_close",
        "scr_map_closest_city",
        "gml_Script_scr_map_closest_city",
        "gml_Script_scr_map_closest_side_stop",
        "scr_map_closest_dest_no_path",
        "gml_Script_scr_map_closest_dest_no_path",
        "scr_map_create_forest",
        "gml_Script_scr_map_create_forest",
        "gml_Script_scr_map_create_desert",
        "scr_map_delete_path_runners",
        "gml_Script_scr_map_delete_path_runners",
        "scr_map_dest_find_nearest",
        "gml_Script_scr_map_dest_find_nearest",
        "gml_Script_scr_map_dest_find_nearest_forward",
        "gml_Script_scr_map_dest_find_nearest_pos",
        "gml_Script_scr_map_dest_find_nearest_non_connected",
        "scr_map_dest_get_icon_string",
        "gml_Script_scr_map_dest_get_icon_string",
        "scr_map_dest_get_paths_arr",
        "gml_Script_scr_map_dest_get_paths_arr",
        "gml_Script_scr_map_dest_get_adj_dests_arr",
        "scr_map_dest_hide",
        "gml_Script_scr_map_dest_hide",
        "gml_Script_scr_map_fade_path",
        "scr_map_dest_is_isolated",
        "gml_Script_scr_map_dest_is_isolated",
        "gml_Script_scr_map_dest_get_connections",
        "gml_Script_scr_dest_is_connected",
        "scr_map_dest_is_special",
        "gml_Script_scr_map_dest_is_special",
        "scr_map_dest_update_icon_string",
        "gml_Script_scr_map_dests_update_icon_string",
        "gml_Script_scr_map_dest_update_icon_string",
        "scr_map_dist_calc",
        "gml_Script_scr_map_dist_calc_km",
        "gml_Script_scr_map_dist_calc_time",
        "scr_map_draw_bonuses",
        "gml_Script_scr_map_draw_bonuses",
        "scr_map_draw_dest",
        "gml_Script_scr_map_draw_dest",
        "scr_map_draw_legend",
        "gml_Script_scr_map_draw_legend",
        "scr_map_draw_path",
        "gml_Script_scr_map_draw_path",
        "gml_Script_scr_map_draw_path_with_sprites",
        "scr_map_draw_road_legend",
        "gml_Script_scr_map_draw_road_legend",
        "scr_map_draw_road_sign",
        "gml_Script_scr_map_draw_road_sign",
        "scr_map_find_dest_x_stops_from_dest",
        "gml_Script_scr_map_find_dest_x_stops_from_dest",
        "scr_map_generate_finalize",
        "gml_Script_scr_map_generate_finalize",
        "scr_map_generate_main_paths",
        "gml_Script_scr_map_generate_main_paths",
        "scr_map_generate_nature",
        "gml_Script_scr_map_generate_nature",
        "scr_map_generate_new_roads",
        "gml_Script_scr_map_generate_new_roads",
        "gml_Script_scr_map_generate_new_roads_iterative",
        "scr_map_generate_random_dests",
        "gml_Script_scr_map_generate_random_dests",
        "gml_Script_scr_map_generate_random_dests_iterative",
        "scr_map_generate_start_dests",
        "gml_Script_scr_map_generate_start_dests",
        "scr_map_generate",
        "gml_Script_scr_map_generate",
        "scr_map_get_dest_array",
        "gml_Script_scr_map_get_dest_array",
        "gml_Script_scr_map_get_dest_array_from_option",
        "scr_map_get_dest_with_name",
        "gml_Script_scr_map_get_dest_with_name",
        "gml_Script_scr_map_get_dest_with_id",
        "scr_map_get_road_type_id",
        "gml_Script_scr_map_get_road_type_id",
        "scr_map_grid_add_surrounding_cells",
        "gml_Script_scr_map_grid_add_surrounding_cells",
        "scr_map_highlight_all_roads_of_type",
        "gml_Script_scr_map_highlight_all_roads_of_type",
        "scr_map_make_mountain_path",
        "gml_Script_scr_map_make_mountain_path",
        "gml_Script_scr_mountains_add_to_grid",
        "gml_Script_scr_map_add_mountain_road_to_grid",
        "gml_Script_scr_map_add_mountain_road_to_big_grid",
        "scr_map_make_path_runners",
        "gml_Script_scr_map_make_path_runners",
        "scr_map_open",
        "gml_Script_scr_map_open",
        "scr_map_part_is_city",
        "gml_Script_scr_map_part_is_city",
        "scr_map_path_delete_some_points",
        "gml_Script_scr_map_path_delete_some_points",
        "scr_map_path_exists",
        "gml_Script_scr_map_path_exists",
        "scr_map_path_get_road",
        "gml_Script_scr_map_path_get_road",
        "scr_map_path_get_sprite",
        "gml_Script_scr_map_path_get_sprite",
        "gml_Script_scr_map_path_get_color",
        "scr_map_path_move_some_points",
        "gml_Script_scr_map_path_move_some_points",
        "scr_map_remove_path",
        "gml_Script_scr_map_remove_path",
        "scr_map_reset_pins",
        "gml_Script_scr_map_reset_pins",
        "gml_Script_scr_map_add_pin",
        "gml_Script_scr_map_remove_pin",
        "gml_Script_scr_map_add_pins_from_quest_obj",
        "gml_Script_scr_map_remove_pins_from_quest_obj",
        "scr_map_rl_set_dest",
        "gml_Script_scr_map_rl_set_dest",
        "scr_map_road_add_sub_path",
        "gml_Script_scr_map_road_add_sub_path",
        "scr_map_road_create_travellers",
        "gml_Script_scr_map_road_create_travellers",
        "gml_Script_scr_map_road_create_travellers_pos",
        "scr_map_road_get_info_string",
        "gml_Script_scr_map_road_get_info_string",
        "scr_map_save_pen_marker_sprite",
        "gml_Script_scr_map_save_pen_marker_sprite",
        "scr_map_select_road",
        "gml_Script_scr_map_select_road",
        "scr_map_set_connected_dests",
        "gml_Script_scr_map_set_connected_dests",
        "scr_map_set_paths_to_draw",
        "gml_Script_scr_map_set_paths_to_draw",
        "scr_map_set_road_bonuses",
        "gml_Script_scr_map_set_road_bonuses",
        "gml_Script_scr_map_add_road_bonus",
        "scr_map_setup",
        "gml_Script_scr_map_setup",
        "scr_map_show_rt_bonus",
        "gml_Script_scr_map_show_rt_bonus",
        "scr_map_split_path_and_add_sidestop",
        "gml_Script_scr_map_split_path_and_add_sidestop",
        "scr_map_start_focus_tween",
        "gml_Script_scr_map_start_focus_tween",
        "scr_map_store_exrra_location",
        "gml_Script_scr_map_store_exrra_location",
        "scr_map_update_legend",
        "gml_Script_scr_map_update_legend",
        "scr_memory_add",
        "gml_Script_scr_memory_add",
        "scr_memory_get_id",
        "gml_Script_scr_memory_get_id",
        "scr_memory_got",
        "gml_Script_scr_memory_got",
        "scr_menu_text_get",
        "gml_Script_scr_menu_text_get",
        "scr_move_bg_strips",
        "gml_Script_scr_move_bg_strips",
        "scr_move_to_dest",
        "gml_Script_scr_move_to_dest",
        "scr_move_to_last_dest",
        "gml_Script_scr_move_to_last_dest",
        "scr_music_controls",
        "gml_Script_scr_music_resume",
        "gml_Script_scr_music_pause",
        "gml_Script_scr_music_fade_in_lowpass",
        "gml_Script_scr_music_fade_out_lowpass",
        "gml_Script_scr_music_toggle_play",
        "gml_Script_scr_music_shuffle",
        "scr_music_disable_cds",
        "gml_Script_scr_music_disable_cds",
        "scr_music_gain_song",
        "gml_Script_scr_music_gain_song",
        "scr_music_group_got",
        "gml_Script_scr_music_group_got",
        "scr_music_menu_activate_buttons",
        "gml_Script_scr_music_menu_activate_buttons",
        "gml_Script_scr_music_menu_deactivate_buttons",
        "scr_music_menu_cd_enter",
        "gml_Script_scr_music_menu_cd_enter",
        "scr_music_menu_close",
        "gml_Script_scr_music_menu_close",
        "scr_music_menu_display_scripts",
        "gml_Script_scr_music_menu_draw_display_a",
        "gml_Script_scr_music_menu_draw_display_b",
        "gml_Script_scr_music_menu_draw_display_c",
        "gml_Script_scr_music_menu_draw_display_d",
        "scr_music_menu_hover_button_tooltips",
        "gml_Script_scr_music_menu_hover_button_tooltips",
        "scr_music_menu_open",
        "gml_Script_scr_music_menu_open",
        "scr_music_menu_play_next",
        "gml_Script_scr_music_menu_play_next",
        "scr_music_menu_update_scroll_bar",
        "gml_Script_scr_music_menu_update_scroll_bar",
        "scr_music_unlock",
        "gml_Script_scr_music_unlock",
        "gml_Script_scr_music_song_group_get_id",
        "scr_open_explore",
        "gml_Script_scr_open_explore",
        "scr_open_hh_menu_pickup",
        "gml_Script_scr_open_hh_menu_pickup",
        "scr_open_hh_menu",
        "gml_Script_scr_open_hh_menu",
        "scr_open_options",
        "gml_Script_scr_open_options",
        "scr_open_quest_board",
        "gml_Script_scr_create_quest_board",
        "gml_Script_scr_open_quest_board",
        "scr_option_mode_default",
        "gml_Script_scr_option_mode_default",
        "scr_options_close",
        "gml_Script_scr_options_close",
        "scr_options_set_volume",
        "gml_Script_scr_options_set_volume",
        "scr_pass_time",
        "gml_Script_scr_pass_time",
        "scr_passive_skill_gain",
        "gml_Script_scr_passive_skill_gain",
        "scr_pedestrian_controller_activate",
        "gml_Script_scr_pedestrian_controller_activate",
        "scr_pedestrian_set_base_stats",
        "gml_Script_scr_pedestrian_set_base_stats",
        "scr_pedestrian_set_umbrella",
        "gml_Script_scr_pedestrian_set_umbrella",
        "scr_percent_chance",
        "gml_Script_scr_percent_chance",
        "scr_person_done",
        "gml_Script_scr_person_done",
        "scr_person_get_dest_index",
        "gml_Script_scr_person_get_dest_index",
        "scr_person_get_draw_x",
        "gml_Script_scr_person_get_draw_x",
        "scr_person_get_from_env",
        "gml_Script_scr_person_get_from_env",
        "scr_person_get_id",
        "gml_Script_scr_person_get_id",
        "gml_Script_scr_person_get_id_devname",
        "scr_person_greeting_done",
        "gml_Script_scr_person_greeting_done",
        "scr_person_interact",
        "gml_Script_scr_person_interact",
        "scr_person_set_base_stats",
        "gml_Script_scr_person_set_base_stats",
        "scr_play_race_yelp",
        "gml_Script_scr_play_race_yelp",
        "scr_pre_draw_rain",
        "gml_Script_scr_pre_draw_rain",
        "scr_quest_add",
        "gml_Script_scr_quest_add",
        "scr_quest_all_objectives_done",
        "gml_Script_scr_quest_all_objectives_done",
        "scr_quest_board_get_available_quests",
        "gml_Script_scr_quest_board_get_available_quests",
        "scr_quest_complete_old",
        "gml_Script_scr_quest_complete_old",
        "scr_quest_complete",
        "gml_Script_scr_quest_complete",
        "gml_Script_scr_quest_objective_complete",
        "gml_Script_scr_quest_objective_uncomplete",
        "gml_Script_scr_quest_objective_progress",
        "scr_quest_fail",
        "gml_Script_scr_quest_fail",
        "scr_quest_get_color",
        "gml_Script_scr_quest_get_color",
        "scr_quest_get_id",
        "gml_Script_scr_quest_get_id",
        "gml_Script_scr_quest_get_type",
        "gml_Script_scr_quest_get_title",
        "gml_Script_scr_quest_get_desc",
        "gml_Script_scr_quest_get_pc_desc",
        "gml_Script_scr_quest_get_dev_name",
        "gml_Script_scr_quest_get_objectives",
        "scr_quest_get_turn_in_person_id",
        "gml_Script_scr_quest_get_turn_in_person_id",
        "scr_quest_got",
        "gml_Script_scr_quest_got",
        "gml_Script_scr_quest_get_calendar_number",
        "scr_quest_objective_set_dest",
        "gml_Script_scr_quest_objective_set_dest",
        "scr_quest_remove",
        "gml_Script_scr_quest_remove",
        "scr_quest_set_dest",
        "gml_Script_scr_quest_set_dest",
        "scr_queue_add_entry",
        "gml_Script_scr_queue_add_entry",
        "scr_race_complete",
        "gml_Script_scr_race_complete",
        "scr_race_create_temp_objects",
        "gml_Script_scr_race_create_temp_objects",
        "scr_race_start_countdown",
        "gml_Script_scr_race_start_countdown",
        "scr_race_take_off",
        "gml_Script_scr_race_take_off",
        "scr_rc_calc_money",
        "gml_Script_scr_rc_calc_money",
        "scr_repair_set_budget_texts",
        "gml_Script_scr_repair_set_budget_texts",
        "scr_rm_draw_backseat_hh",
        "gml_Script_scr_rm_draw_backseat_hh",
        "scr_road_add_env_change",
        "gml_Script_scr_road_add_env_change",
        "scr_road_add_env",
        "gml_Script_scr_road_add_env",
        "scr_road_bg_setup",
        "gml_Script_scr_road_bg_setup",
        "scr_road_bg_update_layer",
        "gml_Script_scr_road_bg_update_layer",
        "scr_road_buffs_get_cost_mod",
        "gml_Script_scr_road_buffs_get_cost_mod",
        "scr_road_buffs_update",
        "gml_Script_scr_road_buffs_update",
        "scr_road_calc_est_time_of_arrival",
        "gml_Script_scr_road_calc_est_time_of_arrival",
        "gml_Script_scr_road_get_time_string",
        "scr_road_calc_gas_cost",
        "gml_Script_scr_road_calc_gas_cost",
        "scr_road_calc_time",
        "gml_Script_scr_road_calc_time",
        "scr_road_controller_draw_interact_glow",
        "gml_Script_scr_road_controller_draw_interact_glow",
        "scr_road_controller_draw_rain",
        "gml_Script_scr_road_controller_draw_rain",
        "scr_road_controller_start_road_event",
        "gml_Script_scr_road_controller_start_road_event",
        "scr_road_dest_back_to_normal",
        "gml_Script_scr_road_dest_back_to_normal",
        "scr_road_event_add_armor",
        "gml_Script_scr_road_event_add_armor",
        "scr_road_event_add_threat",
        "gml_Script_scr_road_event_add_threat",
        "gml_Script_scr_road_event_add_threat_mid_attack",
        "scr_road_event_armor_set_positions",
        "gml_Script_scr_road_event_armor_set_positions",
        "scr_road_event_attack_card_get_id",
        "gml_Script_scr_road_event_attack_card_get_id",
        "scr_road_event_attack",
        "gml_Script_scr_road_event_attack",
        "scr_road_event_check_death",
        "gml_Script_scr_road_event_check_death",
        "scr_road_event_clear",
        "gml_Script_scr_road_event_clear",
        "scr_road_event_create_attack_card",
        "gml_Script_scr_road_event_create_attack_card",
        "scr_road_event_create_attack_deck",
        "gml_Script_scr_road_event_create_attack_deck",
        "gml_Script_scr_road_event_draw_attack_card",
        "scr_road_event_create_attack_effect",
        "gml_Script_scr_road_event_create_attack_effect",
        "scr_road_event_damage",
        "gml_Script_scr_road_event_damage",
        "scr_road_event_deck_check_tag",
        "gml_Script_scr_road_event_deck_check_tag",
        "scr_road_event_deck_setup",
        "gml_Script_scr_road_event_deck_setup",
        "gml_Script_scr_road_event_deck_draw",
        "scr_road_event_do_item_effect",
        "gml_Script_scr_road_event_do_item_effect",
        "scr_road_event_do_trait_effect",
        "gml_Script_scr_road_event_do_trait_effect",
        "scr_road_event_do_upgrade_effect",
        "gml_Script_scr_road_event_do_upgrade_effect",
        "scr_road_event_do_wheel_effect",
        "gml_Script_scr_road_event_do_wheel_effect",
        "scr_road_event_enemy_get_from_road_type",
        "gml_Script_scr_road_event_enemy_get_from_road_type",
        "scr_road_event_enemy_get_id",
        "gml_Script_scr_road_event_enemy_get_id",
        "scr_road_event_enemy_is_type",
        "gml_Script_scr_road_event_enemy_is_type",
        "scr_road_event_fetch",
        "gml_Script_scr_road_event_fetch",
        "scr_road_event_get_target",
        "gml_Script_scr_road_event_get_target",
        "scr_road_event_remove_dead_threat",
        "gml_Script_scr_road_event_remove_dead_threat",
        "scr_road_event_select_attackers",
        "gml_Script_scr_road_event_select_attackers",
        "scr_road_event_set_enemy",
        "gml_Script_scr_road_event_set_enemy",
        "scr_road_event_shuffle_threat",
        "gml_Script_scr_road_event_shuffle_threat",
        "gml_Script_scr_road_event_order_threat",
        "scr_road_event_skill_wait",
        "gml_Script_scr_road_event_skill_wait",
        "scr_road_event_sounds",
        "gml_Script_scr_re_sound_hit_durability",
        "gml_Script_scr_re_sound_hit_energy",
        "gml_Script_scr_re_sound_hit_gas",
        "gml_Script_scr_re_sound_hit_money",
        "gml_Script_scr_re_sound_threat_disappear",
        "gml_Script_scr_re_sound_threat_perfect",
        "gml_Script_scr_re_sound_threat_warning",
        "gml_Script_scr_re_sound_threat_attack",
        "scr_road_event_start_phase",
        "gml_Script_scr_road_event_start_phase",
        "scr_road_event_threat_death_effect",
        "gml_Script_scr_road_event_threat_death_effect",
        "scr_road_event_threat_exists",
        "gml_Script_scr_road_event_threat_exists",
        "scr_road_event_threat_get_x",
        "gml_Script_scr_road_event_threat_get_x",
        "scr_road_event_threat_hit_effect",
        "gml_Script_scr_road_event_threat_hit_effect",
        "scr_road_get_threat",
        "gml_Script_scr_road_get_threat",
        "scr_road_hh_calc_x_start",
        "gml_Script_scr_road_hh_calc_x_start",
        "scr_road_info_update_dest_icons",
        "gml_Script_scr_road_info_update_dest_icons",
        "scr_road_initialize",
        "gml_Script_scr_road_initialize",
        "scr_road_load",
        "gml_Script_scr_road_load",
        "scr_road_parts_clean_up",
        "gml_Script_scr_road_parts_clean_up",
        "scr_road_start",
        "gml_Script_scr_road_start",
        "scr_road_stop_instance_calc_x",
        "gml_Script_scr_road_stop_instance_calc_x",
        "scr_road_type_change_add",
        "gml_Script_scr_road_type_change_add",
        "scr_road_type_change",
        "gml_Script_scr_road_type_change",
        "scr_road_type_get_icon",
        "gml_Script_scr_road_type_get_icon",
        "scr_road_type_get_id",
        "gml_Script_scr_road_type_get_id",
        "scr_road_type_get_threat_string",
        "gml_Script_scr_road_type_get_threat_string",
        "scr_road_warning_start",
        "gml_Script_scr_road_warning_start",
        "scr_road_y_tween",
        "gml_Script_scr_road_y_tween",
        "gml_Script_scr_road_y_tween_time",
        "scr_save_calendar",
        "gml_Script_scr_save_calendar",
        "scr_save_game",
        "gml_Script_scr_save_game",
        "gml_Script_scr_save_game_start",
        "gml_Script_scr_save_game_end",
        "gml_Script_scr_actually_save_game",
        "scr_save_hhs",
        "gml_Script_scr_save_hhs",
        "scr_save_inventory",
        "gml_Script_scr_save_inventory",
        "scr_save_journal",
        "gml_Script_scr_save_journal",
        "scr_save_map",
        "gml_Script_scr_save_map",
        "gml_Script_scr_save_map_iterative",
        "scr_save_meta_stuff",
        "gml_Script_scr_save_meta_stuff",
        "scr_save_music",
        "gml_Script_scr_save_music",
        "scr_save_road",
        "gml_Script_scr_save_road",
        "scr_save_settings",
        "gml_Script_scr_save_settings",
        "scr_save_stats",
        "gml_Script_scr_save_stats",
        "gml_Script_scr_save_last_car",
        "scr_save_world",
        "gml_Script_scr_save_world",
        "scr_screen_shake_add",
        "gml_Script_scr_screen_shake_add",
        "scr_screen_shake_set",
        "gml_Script_scr_screen_shake_set",
        "scr_scrib_outline",
        "gml_Script_scr_scrib_outline",
        "scr_sell_item",
        "gml_Script_scr_sell_item",
        "gml_Script_scr_sell_item_gb",
        "scr_set_interact_icon",
        "gml_Script_scr_set_interact_icon",
        "scr_set_target_skill",
        "gml_Script_scr_set_target_skill",
        "scr_setup_road_controller",
        "gml_Script_scr_setup_road_controller",
        "scr_sfx_play",
        "gml_Script_scr_sfx_play",
        "scr_shop_insta_buy",
        "gml_Script_scr_shop_insta_buy",
        "gml_Script_scr_item_move_inside_trunk",
        "scr_shop_set_ambience",
        "gml_Script_scr_shop_set_ambience",
        "scr_shop_set_bg",
        "gml_Script_scr_shop_set_bg",
        "scr_shop_set_items",
        "gml_Script_scr_shop_set_items",
        "scr_show_shop",
        "gml_Script_scr_show_shop",
        "scr_side_stop_add_building",
        "gml_Script_scr_side_stop_add_building",
        "scr_side_stop_exit",
        "gml_Script_scr_side_stop_exit",
        "scr_skill_add_old",
        "gml_Script_scr_skill_add_old",
        "scr_skill_add",
        "gml_Script_scr_skill_add",
        "scr_skill_bars_set_positions",
        "gml_Script_scr_skill_bars_set_positions",
        "gml_Script_scr_skill_bars_reset",
        "scr_skill_bars_update",
        "gml_Script_scr_skill_bars_update",
        "scr_skill_basic_played",
        "gml_Script_scr_skill_basic_played",
        "scr_skill_do_costs",
        "gml_Script_scr_skill_do_costs",
        "scr_skill_end_turn",
        "gml_Script_scr_skill_end_turn",
        "scr_skill_focus",
        "gml_Script_scr_skill_focus",
        "scr_skill_gain",
        "gml_Script_scr_skill_gain",
        "scr_skill_get_hh",
        "gml_Script_scr_skill_get_hh",
        "scr_skill_get_script",
        "gml_Script_scr_skill_get_id",
        "gml_Script_scr_passive_skill_get_id",
        "gml_Script_scr_skill_get_devname",
        "gml_Script_scr_skill_get_name",
        "gml_Script_scr_passive_skill_get_name",
        "gml_Script_scr_passive_skill_get_devname",
        "gml_Script_scr_skill_get_desc",
        "gml_Script_scr_passive_skill_get_desc",
        "gml_Script_scr_skill_get_sprite",
        "gml_Script_scr_skill_get_uses",
        "gml_Script_scr_skill_get_type",
        "gml_Script_scr_skill_get_pattern",
        "scr_skill_get_stat_modifier",
        "gml_Script_scr_skill_get_stat_modifier",
        "scr_skill_get_text",
        "gml_Script_scr_skill_get_text",
        "scr_skill_get_threat_solution_icon",
        "gml_Script_scr_skill_get_threat_solution_icon",
        "scr_skill_got",
        "gml_Script_scr_skill_got",
        "scr_skill_id_get_player_slot",
        "gml_Script_scr_skill_id_get_player_slot",
        "scr_skill_list_update",
        "gml_Script_scr_skill_list_update",
        "scr_skill_play_special",
        "gml_Script_scr_skill_play_special",
        "scr_skill_play",
        "gml_Script_scr_skill_play",
        "scr_skill_player_swap",
        "gml_Script_scr_skill_player_swap",
        "scr_skill_point_frame_tween",
        "gml_Script_scr_skill_point_frame_tween_in",
        "gml_Script_scr_skill_point_frame_tween_out",
        "scr_skill_rm_mirror_set_hl_position",
        "gml_Script_scr_skill_rm_mirror_set_hl_position",
        "scr_skill_sounds",
        "gml_Script_scr_skill_sound_hanger",
        "gml_Script_scr_skill_sound_equip",
        "gml_Script_scr_skill_sound_remove",
        "gml_Script_scr_skill_sound_select",
        "scr_skill_threat_get_color",
        "gml_Script_scr_skill_threat_get_color",
        "gml_Script_scr_skill_threat_get_note_sprite",
        "gml_Script_scr_skill_threat_get_note_icon_sprite",
        "scr_skill_tree_add",
        "gml_Script_scr_skill_tree_add",
        "scr_skill_tree_check_completion",
        "gml_Script_scr_skill_tree_check_completion",
        "scr_skill_tree_get_icon",
        "gml_Script_scr_skill_tree_get_icon",
        "gml_Script_scr_skill_tree_get_icon_big",
        "gml_Script_scr_skill_tree_get_tab_sprite",
        "scr_skill_tree_get_id",
        "gml_Script_scr_skill_tree_get_id",
        "scr_skill_tree_get_name",
        "gml_Script_scr_skill_tree_get_name",
        "gml_Script_scr_skill_tree_get_dev_name",
        "gml_Script_scr_skill_tree_get_letter",
        "scr_skill_tree_get_skill_number",
        "gml_Script_scr_skill_tree_get_skill_number",
        "scr_skill_tree_got",
        "gml_Script_scr_skill_tree_got",
        "scr_skill_ui_calc_wheel_w",
        "gml_Script_scr_skill_ui_calc_wheel_w",
        "scr_skill_ui_draw_skill_wheel",
        "gml_Script_scr_skill_ui_draw_skill_wheel",
        "scr_skill_ui_draw_targeting_stuff",
        "gml_Script_scr_skill_ui_draw_targeting_stuff",
        "scr_skill_ui_holding_skill",
        "gml_Script_scr_skill_ui_holding_skill",
        "scr_skill_ui_open_manage",
        "gml_Script_scr_skill_ui_open_manage",
        "scr_skill_ui_play_skill_instant",
        "gml_Script_scr_skill_ui_play_skill_instant",
        "scr_skill_ui_reload_skills",
        "gml_Script_scr_skill_ui_reload_skills",
        "scr_skill_ui_set_for_car",
        "gml_Script_scr_skill_ui_set_for_car",
        "scr_skill_ui_set_skill_bar",
        "gml_Script_scr_skill_ui_set_skill_bar",
        "scr_skill_ui_set_target_pattern_item",
        "gml_Script_scr_skill_ui_set_target_pattern_item",
        "scr_skill_ui_set_target_pattern",
        "gml_Script_scr_skill_ui_set_target_pattern",
        "scr_skill_ui_wobble_skills",
        "gml_Script_scr_skill_ui_wobble_skills",
        "scr_skills_refresh",
        "gml_Script_scr_skills_refresh",
        "scr_skills_remove_empty",
        "gml_Script_scr_skills_remove_empty",
        "scr_skills_reset_usability",
        "gml_Script_scr_skills_reset_usability",
        "scr_skills_restore_uses",
        "gml_Script_scr_skills_restore_uses",
        "scr_sleep_in_car",
        "gml_Script_scr_sleep_in_car",
        "scr_social_ui_set_for_car",
        "gml_Script_scr_social_ui_set_for_car",
        "scr_sort_skills",
        "gml_Script_scr_sort_skills",
        "scr_sound_ambience_change_back_to_outside",
        "gml_Script_scr_sound_ambience_change_back_to_outside",
        "scr_sound_ambience_change",
        "gml_Script_scr_sound_ambience_change",
        "gml_Script_scr_sound_weather_ambience_change",
        "scr_sound_ambience_get_asset",
        "gml_Script_scr_sound_ambience_get_asset",
        "scr_sound_ambience_get_id",
        "gml_Script_scr_sound_ambience_get_id",
        "gml_Script_scr_sound_ambience_asset_get_id",
        "scr_sound_building_enter_sound",
        "gml_Script_scr_sound_building_enter_sound",
        "scr_sound_fade_out",
        "gml_Script_scr_sound_fade_out",
        "scr_sound_get_bus_id",
        "gml_Script_scr_sound_get_bus_id",
        "scr_sound_pc_accelerate",
        "gml_Script_scr_sound_pc_accelerate",
        "gml_Script_scr_sound_pc_deaccelerate",
        "scr_sound_pc_change_mode",
        "gml_Script_scr_sound_pc_change_mode",
        "scr_sound_play_on_ambient",
        "gml_Script_scr_sound_play_on_ambient",
        "scr_sound_tire_conditions",
        "gml_Script_scr_sound_tire_condition_change",
        "scr_sound_upgrade_install",
        "gml_Script_scr_sound_upgrade_install",
        "scr_sss_icon_get_small",
        "gml_Script_scr_sss_icon_get_small",
        "scr_stat_adjust_cost",
        "gml_Script_scr_skill_stat_adjust_cost",
        "gml_Script_scr_skill_stat_adjust_cost_multipliers",
        "scr_stat_change",
        "gml_Script_scr_stat_change",
        "scr_stat_check",
        "gml_Script_scr_stat_check",
        "scr_stat_durability_hl",
        "gml_Script_scr_stat_durability_hl",
        "scr_stat_strings_update",
        "gml_Script_scr_stat_strings_update",
        "scr_stat_window_close",
        "gml_Script_scr_stat_menu_close",
        "scr_stat_window_show",
        "gml_Script_scr_stat_window_show",
        "scr_stats_controller_update_stats",
        "gml_Script_scr_stats_controller_update_stats",
        "scr_stats_copy_from_meta",
        "gml_Script_scr_stats_copy_from_meta",
        "scr_stats_set_for_car",
        "gml_Script_scr_stats_set_for_car",
        "scr_steam_achievement_unlock",
        "gml_Script_scr_steam_achievement_unlock",
        "gml_Script_scr_steam_stat_inc",
        "gml_Script_scr_steam_stat_set",
        "scr_string_get_tag",
        "gml_Script_scr_string_get_tag",
        "scr_string_get_tags_arr",
        "gml_Script_scr_string_get_tags_arr",
        "scr_string_remove_color",
        "gml_Script_scr_string_remove_color",
        "scr_string_replace_definitions",
        "gml_Script_scr_string_replace_definitions",
        "scr_struct_water_drops",
        "gml_Script_draw@anon@553@struct_water_drop@scr_struct_water_drops",
        "gml_Script_update@anon@655@struct_water_drop@scr_struct_water_drops",
        "gml_Script_struct_water_drop",
        "gml_Script_draw@anon@1554@struct_water_drop_trail@scr_struct_water_drops",
        "gml_Script_update@anon@1656@struct_water_drop_trail@scr_struct_water_drops",
        "gml_Script_struct_water_drop_trail",
        "scr_threat_get_fade_icon",
        "gml_Script_scr_threat_get_fade_icon",
        "scr_threat_get_icon",
        "gml_Script_scr_threat_get_icon",
        "gml_Script_scr_threat_get_icon_status",
        "scr_threat_get_name",
        "gml_Script_scr_threat_get_name",
        "gml_Script_scr_threat_get_desc",
        "scr_threat_get_solution_icon",
        "gml_Script_scr_threat_get_solution_icon",
        "scr_threat_shatter_start",
        "gml_Script_scr_threat_shatter_start",
        "scr_threat_shatter",
        "gml_Script_scr_threat_shatter",
        "scr_title_screen_start_new_game",
        "gml_Script_scr_title_screen_start_new_game",
        "scr_toggle_streamer_mode",
        "gml_Script_scr_toggle_streamer_mode",
        "scr_tooltip_deactivate_buttons",
        "gml_Script_scr_tooltip_deactivate_buttons",
        "scr_tooltip_hide",
        "gml_Script_scr_tooltip_hide",
        "scr_tooltip_show",
        "gml_Script_scr_tooltip_show",
        "scr_top_close_button_active",
        "gml_Script_scr_top_close_button_active",
        "scr_top_close_button_left_activate",
        "gml_Script_scr_top_close_button_left_activate",
        "scr_top_close_button_left_clicked",
        "gml_Script_scr_top_close_button_left_clicked",
        "scr_top_close_button_left_deactivate",
        "gml_Script_scr_top_close_button_left_deactivate",
        "scr_top_close_button_right_activate",
        "gml_Script_scr_top_close_button_right_activate",
        "scr_top_close_button_right_clicked",
        "gml_Script_scr_top_close_button_right_clicked",
        "scr_top_close_button_right_deactivate",
        "gml_Script_scr_top_close_button_right_deactivate",
        "scr_top_close_button_set_hh_buttons",
        "gml_Script_scr_top_close_button_set_hh_buttons",
        "scr_top_sub_menu_button_clicked",
        "gml_Script_scr_top_sub_menu_button_clicked",
        "scr_traffic_car_get_from_env",
        "gml_Script_scr_traffic_car_get_from_env",
        "scr_traffic_get_car_id",
        "gml_Script_scr_traffic_get_car_id",
        "scr_traffic_list_set_default_values",
        "gml_Script_scr_traffic_list_set_default_values",
        "gml_Script_scr_traffic_env_get_id",
        "scr_traffic_pause",
        "gml_Script_scr_traffic_pause",
        "scr_trait_gain_do_instant_effect",
        "gml_Script_scr_trait_gain_do_instant_effect",
        "scr_trait_gain",
        "gml_Script_scr_trait_gain",
        "scr_trait_get_current_slot",
        "gml_Script_scr_trait_get_current_slot",
        "scr_trait_get_desc",
        "gml_Script_scr_trait_get_desc",
        "gml_Script_scr_trait_get_unlock_desc",
        "scr_trait_get_dev_name",
        "gml_Script_scr_trait_get_dev_name",
        "scr_trait_get_id",
        "gml_Script_scr_trait_get_id",
        "scr_trait_get_name",
        "gml_Script_scr_trait_get_name",
        "scr_trait_get_unlock",
        "gml_Script_scr_trait_get_unlock",
        "scr_trait_list_update",
        "gml_Script_scr_trait_list_update",
        "scr_trait_lose",
        "gml_Script_scr_trait_lose",
        "scr_trigger_ailment_rotate",
        "gml_Script_scr_trigger_ailment_rotate",
        "scr_trigger_any_top_button_activate",
        "gml_Script_scr_trigger_any_top_button_activate",
        "scr_trigger_car_repair",
        "gml_Script_scr_trigger_car_repair",
        "scr_trigger_day_status_change",
        "gml_Script_scr_trigger_day_status_change",
        "scr_trigger_dest_arrive",
        "gml_Script_scr_trigger_dest_arrive",
        "scr_trigger_dest_arrived",
        "gml_Script_scr_trigger_dest_arrived",
        "scr_trigger_dest_arriving",
        "gml_Script_scr_trigger_dest_arriving",
        "scr_trigger_env_change",
        "gml_Script_scr_trigger_env_change",
        "scr_trigger_hh_level_up",
        "gml_Script_scr_trigger_hh_level_up",
        "scr_trigger_hh_pick_up",
        "gml_Script_scr_trigger_hh_pick_up",
        "scr_trigger_item_buy",
        "gml_Script_scr_trigger_item_buy",
        "scr_trigger_item_fully_consumed",
        "gml_Script_scr_trigger_item_fully_consumed",
        "scr_trigger_item_sold",
        "gml_Script_scr_trigger_item_sold",
        "scr_trigger_load_screen_done",
        "gml_Script_scr_trigger_load_screen_done",
        "scr_trigger_new_day",
        "gml_Script_scr_trigger_new_day",
        "scr_trigger_perfect_attack",
        "gml_Script_scr_trigger_perfect_attack",
        "scr_trigger_read_book",
        "gml_Script_scr_trigger_read_book",
        "scr_trigger_road_event_clear",
        "gml_Script_scr_trigger_road_event_clear",
        "scr_trigger_road_event_flee",
        "gml_Script_scr_trigger_road_event_flee",
        "scr_trigger_road_event_golden_clear",
        "gml_Script_scr_trigger_road_event_golden_clear",
        "scr_trigger_road_event_player_turn_end",
        "gml_Script_scr_trigger_road_event_player_turn_end",
        "scr_trigger_road_event_start",
        "gml_Script_scr_trigger_road_event_start",
        "scr_trigger_road_event_turn_end",
        "gml_Script_scr_trigger_road_event_turn_end",
        "scr_trigger_road_start",
        "gml_Script_scr_trigger_road_start",
        "scr_trigger_road_summary_done",
        "gml_Script_scr_trigger_road_summary_done",
        "scr_trigger_side_stop_leave",
        "gml_Script_scr_trigger_side_stop_leave",
        "scr_trigger_side_stop_slow_down",
        "gml_Script_scr_trigger_side_stop_slow_down",
        "scr_trigger_side_stop",
        "gml_Script_scr_trigger_side_stop",
        "scr_trigger_skill_played",
        "gml_Script_scr_trigger_skill_played",
        "scr_trigger_sleep_start",
        "gml_Script_scr_trigger_sleep_start",
        "scr_trigger_sleep",
        "gml_Script_scr_trigger_sleep",
        "scr_trigger_threat_damage",
        "gml_Script_scr_trigger_threat_damage",
        "scr_trigger_work",
        "gml_Script_scr_trigger_work",
        "scr_trunk_get_random_item_tag",
        "gml_Script_scr_trunk_get_random_item_tag",
        "scr_trunk_got_tag",
        "gml_Script_scr_trunk_got_tag",
        "scr_trunk_remove_random_item_tag",
        "gml_Script_scr_trunk_remove_random_item_tag",
        "scr_tutorial_action_done",
        "gml_Script_scr_tutorial_action_done",
        "scr_tutorial_current_action",
        "gml_Script_scr_tutorial_current_action",
        "scr_tween_ease_in_bounce",
        "gml_Script_scr_tween_ease_in_bounce",
        "scr_tween_ease_in_circ",
        "gml_Script_scr_tween_ease_in_circ",
        "scr_tween_ease_in_out_back",
        "gml_Script_scr_tween_ease_in_out_back",
        "scr_tween_ease_in_out_bounce",
        "gml_Script_scr_tween_ease_in_out_bounce",
        "scr_tween_ease_out_back",
        "gml_Script_scr_tween_ease_out_back",
        "scr_tween_ease_out_bounce",
        "gml_Script_scr_tween_ease_out_bounce",
        "scr_tween_ease_out_circ",
        "gml_Script_scr_tween_ease_out_circ",
        "scr_tween_in_exp",
        "gml_Script_scr_tween_in_exp",
        "scr_tween_in_lin",
        "gml_Script_scr_tween_in_lin",
        "scr_tween_in_out_exp",
        "gml_Script_scr_tween_in_out_exp",
        "scr_tween_in_out_sin",
        "gml_Script_scr_tween_in_out_sin",
        "scr_tween_out_exp",
        "gml_Script_scr_tween_out_exp",
        "scr_tween_out_sin",
        "gml_Script_scr_tween_out_sin",
        "scr_ui_draw_divider",
        "gml_Script_scr_ui_draw_divider",
        "scr_update_music_list",
        "gml_Script_scr_update_music_list",
        "scr_upgrade_get_scripts",
        "gml_Script_scr_upgrade_get_id",
        "gml_Script_scr_upgrade_get_title",
        "gml_Script_scr_upgrade_get_desc",
        "gml_Script_scr_upgrade_get_type",
        "gml_Script_scr_upgrade_get_road",
        "gml_Script_scr_upgrade_get_item",
        "gml_Script_scr_upgrade_get_stat",
        "gml_Script_scr_upgrade_get_amount",
        "gml_Script_scr_upgrade_get_text",
        "gml_Script_scr_upgrade_get_tier",
        "gml_Script_scr_upgrade_get_pos",
        "gml_Script_scr_upgrade_get_name",
        "gml_Script_scr_upgrade_get_dev_name",
        "gml_Script_scr_upgrade_get_reqs",
        "gml_Script_scr_upgrade_unlock",
        "gml_Script_scr_upgrade_got",
        "gml_Script_scr_upgrade_slot_get_id",
        "gml_Script_scr_upgrade_in_slot",
        "gml_Script_scr_upgrade_get_car_sprite",
        "gml_Script_scr_upgrade_get_item_sprite",
        "scr_upgrade_install",
        "gml_Script_scr_upgrade_install",
        "scr_upgrade_uninstall",
        "gml_Script_scr_upgrade_uninstall",
        "scr_upgrades_disable_items",
        "gml_Script_scr_upgrades_disable_items",
        "scr_upgrades_set_for_car",
        "gml_Script_scr_upgrades_set_for_car",
        "scr_waiting_for_tutorial",
        "gml_Script_scr_waiting_for_tutorial",
        "scr_weather_change",
        "gml_Script_scr_weather_change",
        "scr_work_draw_prompt",
        "gml_Script_scr_work_draw_prompt",
        "scr_work_get_cost",
        "gml_Script_scr_work_get_cost",
        "scr_work_get_desc",
        "gml_Script_scr_work_get_desc",
        "scr_work_get_id",
        "gml_Script_scr_work_get_id",
        "scr_work_get_pay",
        "gml_Script_scr_work_get_pay",
        "scr_work_get_reqs_arr",
        "gml_Script_scr_work_get_reqs_arr",
        "scr_work_get_time",
        "gml_Script_scr_work_get_time",
        "scr_work_get_title",
        "gml_Script_scr_work_get_title",
        "scr_work_ui_show",
        "gml_Script_scr_work_ui_show",
        "scr_write_ending_to_meta_save_controller",
        "gml_Script_scr_write_ending_to_meta_save_controller",
        "scribble_add_macro",
        "gml_Script_scribble_add_macro",
        "scribble_anim_blink",
        "gml_Script_scribble_anim_blink",
        "scribble_anim_cycle",
        "gml_Script_scribble_anim_cycle",
        "scribble_anim_jitter",
        "gml_Script_scribble_anim_jitter",
        "scribble_anim_pulse",
        "gml_Script_scribble_anim_pulse",
        "scribble_anim_rainbow",
        "gml_Script_scribble_anim_rainbow",
        "scribble_anim_reset",
        "gml_Script_scribble_anim_reset",
        "scribble_anim_shake",
        "gml_Script_scribble_anim_shake",
        "scribble_anim_wave",
        "gml_Script_scribble_anim_wave",
        "scribble_anim_wheel",
        "gml_Script_scribble_anim_wheel",
        "scribble_anim_wobble",
        "gml_Script_scribble_anim_wobble",
        "scribble_color_get",
        "gml_Script_scribble_color_get",
        "scribble_color_set",
        "gml_Script_scribble_color_set",
        "scribble_external_sound_add",
        "gml_Script_scribble_external_sound_add",
        "scribble_external_sound_exists",
        "gml_Script_scribble_external_sound_remove",
        "scribble_external_sound_remove",
        "gml_Script_scribble_external_sound_exists",
        "scribble_flush_everything",
        "gml_Script_scribble_flush_everything",
        "scribble_font_add_all",
        "gml_Script_scribble_font_add_all",
        "scribble_font_add_from_sprite",
        "gml_Script_scribble_font_add_from_sprite",
        "scribble_font_add_msdf",
        "gml_Script_scribble_font_add_msdf",
        "scribble_font_add",
        "gml_Script_scribble_font_add",
        "scribble_font_bake_outline_4dir",
        "gml_Script_scribble_font_bake_outline_4dir",
        "scribble_font_bake_outline_8dir_2px",
        "gml_Script_scribble_font_bake_outline_8dir_2px",
        "scribble_font_bake_outline_8dir",
        "gml_Script_scribble_font_bake_outline_8dir",
        "scribble_font_bake_outline",
        "gml_Script_scribble_font_bake_outline",
        "scribble_font_bake_shader",
        "gml_Script____struct___136@scribble_font_bake_shader@scribble_font_bake_shader",
        "gml_Script_scribble_font_bake_shader",
        "scribble_font_bake_shadow",
        "gml_Script_scribble_font_bake_shadow",
        "scribble_font_combine",
        "gml_Script_scribble_font_combine",
        "scribble_font_delete",
        "gml_Script_scribble_font_delete",
        "scribble_font_duplicate",
        "gml_Script_scribble_font_duplicate",
        "scribble_font_exists",
        "gml_Script_scribble_font_exists",
        "scribble_font_force_bilinear_filtering",
        "gml_Script_scribble_font_force_bilinear_filtering",
        "scribble_font_get_default",
        "gml_Script_scribble_font_get_default",
        "scribble_font_get_glyph_ranges",
        "gml_Script_scribble_font_get_glyph_ranges",
        "scribble_font_has_character",
        "gml_Script_scribble_font_has_character",
        "scribble_font_rename",
        "gml_Script_scribble_font_rename",
        "scribble_font_scale",
        "gml_Script_scribble_font_scale",
        "scribble_font_set_default",
        "gml_Script_scribble_font_set_default",
        "scribble_font_set_style_family",
        "gml_Script_scribble_font_set_style_family",
        "scribble_glyph_get",
        "gml_Script_scribble_glyph_get",
        "scribble_glyph_set",
        "gml_Script_scribble_glyph_set",
        "scribble_is_text_element",
        "gml_Script_scribble_is_text_element",
        "scribble_kerning_pair_get",
        "gml_Script_scribble_kerning_pair_get",
        "scribble_kerning_pair_set",
        "gml_Script_scribble_kerning_pair_set",
        "scribble_markdown_format",
        "gml_Script__func_delete_buffer@anon@7261@scribble_markdown_format@scribble_markdown_format",
        "gml_Script__func_insert_buffer@anon@7815@scribble_markdown_format@scribble_markdown_format",
        "gml_Script__func_delete_and_insert_buffer@anon@8611@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___137@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___139@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___140@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___141@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___142@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___143@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___144@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___145@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___146@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___147@___struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script____struct___138@scribble_markdown_format@scribble_markdown_format",
        "gml_Script_scribble_markdown_format",
        "scribble_markdown_set_styles",
        "gml_Script_scribble_markdown_set_styles",
        "scribble_msdf_thickness_offset",
        "gml_Script_scribble_msdf_thickness_offset",
        "scribble_refresh_everything",
        "gml_Script_scribble_refresh_everything",
        "scribble_rgb_to_bgr",
        "gml_Script_scribble_rgb_to_bgr",
        "scribble_super_clear",
        "gml_Script_scribble_super_clear",
        "scribble_super_create",
        "gml_Script_scribble_super_create",
        "scribble_super_glyph_copy_all",
        "gml_Script_scribble_super_glyph_copy_all",
        "scribble_super_glyph_copy",
        "gml_Script_scribble_super_glyph_copy",
        "gml_Script___scribble_super_glyph_copy_common",
        "gml_Script___scribble_prepare_super_work_array",
        "gml_Script___scribble_glyph_duplicate",
        "scribble_super_glyph_delete",
        "gml_Script_scribble_super_glyph_delete",
        "scribble_typewriter_add_character_delay",
        "gml_Script_scribble_typewriter_add_character_delay",
        "scribble_typewriter_add_event",
        "gml_Script_scribble_typewriter_add_event",
        "scribble_typist",
        "gml_Script_scribble_typist",
        "scribble_typists_add_event",
        "gml_Script_scribble_typists_add_event",
        "scribble",
        "gml_Script_scribble",
        "string_height_scribble_ext",
        "gml_Script_string_height_scribble_ext",
        "string_height_scribble",
        "gml_Script_string_height_scribble",
        "string_length_scribble",
        "gml_Script_string_length_scribble",
        "string_width_scribble_ext",
        "gml_Script_string_width_scribble_ext",
        "string_width_scribble",
        "gml_Script_string_width_scribble",
        "traffic_structs",
        "gml_Script_destroy@anon@5194@struct_traffic_car@traffic_structs",
        "gml_Script_update@anon@5340@struct_traffic_car@traffic_structs",
        "gml_Script_draw@anon@8691@struct_traffic_car@traffic_structs",
        "gml_Script_struct_traffic_car",
        "gml_Script_change_spawn_freq@anon@13893@struct_traffic_line@traffic_structs",
        "gml_Script_add_car@anon@14030@struct_traffic_line@traffic_structs",
        "gml_Script_update@anon@15359@struct_traffic_line@traffic_structs",
        "gml_Script_clear@anon@17707@struct_traffic_line@traffic_structs",
        "gml_Script_draw@anon@18019@struct_traffic_line@traffic_structs",
        "gml_Script_struct_traffic_line",
        "__shd_scribble_bake_outline_4dir",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nattribute vec3 in_Position;\r\nattribute vec4 in_Colour;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColor = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec3 u_vOutlineColor;\r\n\r\nconst int u_iOutlineSamples = 4;\r\nconst int u_iOutlineSize    = 1;\r\n\r\nvoid main()\r\n{\r\n    vec4 outlineColor = vec4(u_vOutlineColor, 1.0);\r\n    vec4 newColor = vec4(u_vOutlineColor, 0.0);\r\n    \r\n    for(int iAngle = 0; iAngle < u_iOutlineSamples; iAngle++)\r\n    {\r\n        float fAngle = 2.0*PI*float(iAngle) / float(u_iOutlineSamples);\r\n        for(int radius = 1; radius <= u_iOutlineSize; radius++)\r\n        {\r\n            newColor = mix(newColor, outlineColor, texture2D(gm_BaseTexture, v_vTexcoord + u_vTexel*(float(radius)*vec2(cos(fAngle), sin(fAngle)))).a);\r\n        }\r\n    }\r\n    \r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nattribute vec3 in_Position;\r\nattribute vec4 in_Colour;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColor = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec3 u_vOutlineColor;\r\n\r\nconst int u_iOutlineSamples = 4;\r\nconst int u_iOutlineSize    = 1;\r\n\r\nvoid main()\r\n{\r\n    vec4 outlineColor = vec4(u_vOutlineColor, 1.0);\r\n    vec4 newColor = vec4(u_vOutlineColor, 0.0);\r\n    \r\n    for(int iAngle = 0; iAngle < u_iOutlineSamples; iAngle++)\r\n    {\r\n        float fAngle = 2.0*PI*float(iAngle) / float(u_iOutlineSamples);\r\n        for(int radius = 1; radius <= u_iOutlineSize; radius++)\r\n        {\r\n            newColor = mix(newColor, outlineColor, texture2D(gm_BaseTexture, v_vTexcoord + u_vTexel*(float(radius)*vec2(cos(fAngle), sin(fAngle)))).a);\r\n        }\r\n    }\r\n    \r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nfloat4x4 \tgm_Matrices[MATRICES_MAX] : register(c0);\n\nbool \tgm_LightingEnabled;\nbool \tgm_VS_FogEnabled;\nfloat \tgm_FogStart;\nfloat \tgm_RcpFogRange;\n\n#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nfloat4 gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nfloat4 gm_Lights_Direction[MAX_VS_LIGHTS];\t\t\t// normalised direction, W is 1 if directional light is active or 0 otherwise\nfloat4 gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nfloat4 gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t\t// rgb=colour, a=1\n\n",
        "// GameMaker reserved and common types/inputs\n\nsampler2D gm_BaseTexture : register(S0);\n\nbool \tgm_PS_FogEnabled;\nfloat4 \tgm_FogColour;\nbool \tgm_AlphaTestEnabled;\nfloat4\tgm_AlphaRefValue;\n",
        "in_Position",
        "in_Colour",
        "in_TextureCoord",
        "__shd_scribble_bake_outline_8dir_2px",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec3 u_vOutlineColor;\r\n\r\nconst int  u_iOutlineSamples = 8;\r\nconst int  u_iOutlineSize    = 2;\r\n\r\nvoid main()\r\n{\r\n    vec4 outlineColor = vec4(u_vOutlineColor, 1.0);\r\n    vec4 newColor = vec4(u_vOutlineColor, 0.0);\r\n    \r\n    for(int iAngle = 0; iAngle < u_iOutlineSamples; iAngle++)\r\n    {\r\n        float fAngle = 2.0*PI*float(iAngle) / float(u_iOutlineSamples);\r\n        for(int radius = 1; radius <= u_iOutlineSize; radius++)\r\n        {\r\n            newColor = mix(newColor, outlineColor, texture2D(gm_BaseTexture, v_vTexcoord + u_vTexel*(float(radius)*vec2(cos(fAngle), sin(fAngle)))).a);\r\n        }\r\n    }\r\n    \r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec3 u_vOutlineColor;\r\n\r\nconst int  u_iOutlineSamples = 8;\r\nconst int  u_iOutlineSize    = 2;\r\n\r\nvoid main()\r\n{\r\n    vec4 outlineColor = vec4(u_vOutlineColor, 1.0);\r\n    vec4 newColor = vec4(u_vOutlineColor, 0.0);\r\n    \r\n    for(int iAngle = 0; iAngle < u_iOutlineSamples; iAngle++)\r\n    {\r\n        float fAngle = 2.0*PI*float(iAngle) / float(u_iOutlineSamples);\r\n        for(int radius = 1; radius <= u_iOutlineSize; radius++)\r\n        {\r\n            newColor = mix(newColor, outlineColor, texture2D(gm_BaseTexture, v_vTexcoord + u_vTexel*(float(radius)*vec2(cos(fAngle), sin(fAngle)))).a);\r\n        }\r\n    }\r\n    \r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "__shd_scribble_bake_outline_8dir",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec3 u_vOutlineColor;\r\n\r\nconst int  u_iOutlineSamples = 8;\r\nconst int  u_iOutlineSize    = 1;\r\n\r\nvoid main()\r\n{\r\n    vec4 outlineColor = vec4(u_vOutlineColor, 1.0);\r\n    vec4 newColor = vec4(u_vOutlineColor, 0.0);\r\n    \r\n    for(int iAngle = 0; iAngle < u_iOutlineSamples; iAngle++)\r\n    {\r\n        float fAngle = 2.0*PI*float(iAngle) / float(u_iOutlineSamples);\r\n        for(int radius = 1; radius <= u_iOutlineSize; radius++)\r\n        {\r\n            newColor = mix(newColor, outlineColor, texture2D(gm_BaseTexture, v_vTexcoord + u_vTexel*(float(radius)*vec2(cos(fAngle), sin(fAngle)))).a);\r\n        }\r\n    }\r\n    \r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec3 u_vOutlineColor;\r\n\r\nconst int  u_iOutlineSamples = 8;\r\nconst int  u_iOutlineSize    = 1;\r\n\r\nvoid main()\r\n{\r\n    vec4 outlineColor = vec4(u_vOutlineColor, 1.0);\r\n    vec4 newColor = vec4(u_vOutlineColor, 0.0);\r\n    \r\n    for(int iAngle = 0; iAngle < u_iOutlineSamples; iAngle++)\r\n    {\r\n        float fAngle = 2.0*PI*float(iAngle) / float(u_iOutlineSamples);\r\n        for(int radius = 1; radius <= u_iOutlineSize; radius++)\r\n        {\r\n            newColor = mix(newColor, outlineColor, texture2D(gm_BaseTexture, v_vTexcoord + u_vTexel*(float(radius)*vec2(cos(fAngle), sin(fAngle)))).a);\r\n        }\r\n    }\r\n    \r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "__shd_scribble_bake_shadow",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec4 u_vShadowColor;\r\nuniform vec2 u_vShadowDelta;\r\n\r\nvoid main()\r\n{\r\n    vec4 newColor = vec4(u_vShadowColor.rgb, u_vShadowColor.a*texture2D(gm_BaseTexture, v_vTexcoord - u_vTexel*u_vShadowDelta).a);\r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColor;\r\n\r\nuniform vec2 u_vTexel;\r\nuniform vec4 u_vShadowColor;\r\nuniform vec2 u_vShadowDelta;\r\n\r\nvoid main()\r\n{\r\n    vec4 newColor = vec4(u_vShadowColor.rgb, u_vShadowColor.a*texture2D(gm_BaseTexture, v_vTexcoord - u_vTexel*u_vShadowDelta).a);\r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor = v_vColor*mix(newColor, sample, sample.a);\r\n}\r\n",
        "__shd_scribble_msdf",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\n#define BLEND_SPRITES true\r\n\r\nconst int MAX_EFFECTS = 11;\r\n#define SPRITE_FLAG   flagArray[ 0]\r\n#define WAVE_FLAG     flagArray[ 1]\r\n#define SHAKE_FLAG    flagArray[ 2]\r\n#define RAINBOW_FLAG  flagArray[ 3]\r\n#define WOBBLE_FLAG   flagArray[ 4]\r\n#define PULSE_FLAG    flagArray[ 5]\r\n#define WHEEL_FLAG    flagArray[ 6]\r\n#define CYCLE_FLAG    flagArray[ 7]\r\n#define JITTER_FLAG   flagArray[ 8]\r\n#define BLINK_FLAG    flagArray[ 9]\r\n#define SLANT_FLAG    flagArray[10]\r\n\r\nconst int MAX_ANIM_FIELDS = 21;\r\n#define WAVE_AMPLITUDE    u_aDataFields[ 0]\r\n#define WAVE_FREQUENCY    u_aDataFields[ 1]\r\n#define WAVE_SPEED        u_aDataFields[ 2]\r\n#define SHAKE_AMPLITUDE   u_aDataFields[ 3]\r\n#define SHAKE_SPEED       u_aDataFields[ 4]\r\n#define RAINBOW_WEIGHT    u_aDataFields[ 5]\r\n#define RAINBOW_SPEED     u_aDataFields[ 6]\r\n#define WOBBLE_ANGLE      u_aDataFields[ 7]\r\n#define WOBBLE_FREQUENCY  u_aDataFields[ 8]\r\n#define PULSE_SCALE       u_aDataFields[ 9]\r\n#define PULSE_SPEED       u_aDataFields[10]\r\n#define WHEEL_AMPLITUDE   u_aDataFields[11]\r\n#define WHEEL_FREQUENCY   u_aDataFields[12]\r\n#define WHEEL_SPEED       u_aDataFields[13]\r\n#define CYCLE_SPEED       u_aDataFields[14]\r\n#define CYCLE_SATURATION  u_aDataFields[15]\r\n#define CYCLE_VALUE       u_aDataFields[16]\r\n#define JITTER_MINIMUM    u_aDataFields[17]\r\n#define JITTER_MAXIMUM    u_aDataFields[18]\r\n#define JITTER_SPEED      u_aDataFields[19]\r\n#define SLANT_GRADIENT    u_aDataFields[20]\r\n\r\nconst int EASE_METHOD_COUNT = 15;\r\n#define EASE_NONE         0\r\n#define EASE_LINEAR       1\r\n#define EASE_QUADRATIC    2\r\n#define EASE_CUBIC        3\r\n#define EASE_QUARTIC      4\r\n#define EASE_QUINTIC      5\r\n#define EASE_SINE         6\r\n#define EASE_EXPONENTIAL  7\r\n#define EASE_CIRCULAR     8\r\n#define EASE_BACK         9\r\n#define EASE_ELASTIC     10\r\n#define EASE_BOUNCE      11\r\n#define EASE_CUSTOM_1    12\r\n#define EASE_CUSTOM_2    13\r\n#define EASE_CUSTOM_3    14\r\n\r\nconst float MAX_LINES = 1000.0; //Change __SCRIBBLE_MAX_LINES in scribble_init() if you change this value!\r\n\r\nconst int WINDOW_COUNT = 3;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Attributes, Varyings, and Uniforms\r\n\r\n\r\nattribute vec3  in_Position;     //{X, Y, Packed character & line index}\r\nattribute vec3  in_Normal;       //{dX, Sprite data, Bitpacked effect flags}\r\nattribute vec4  in_Colour;       //Colour. This attribute is used for sprite data if this character is a sprite\r\nattribute vec2  in_TextureCoord; //UVs\r\nattribute vec2  in_Colour2;      //{Scale, dY}\r\n\r\nvarying vec2  v_vTexcoord;\r\nvarying vec4  v_vColour;\r\nvarying float v_fPixelScale;\r\nvarying float v_fTextScale;\r\n\r\nuniform vec4  u_vColourBlend;                           //4\r\nuniform vec4  u_vGradient;                              //4\r\nuniform vec2  u_vSkew;                                  //2\r\nuniform vec2  u_vRegionActive;                          //2\r\nuniform vec4  u_vRegionColour;                          //4\r\nuniform float u_fTime;                                  //1\r\nuniform float u_aDataFields[MAX_ANIM_FIELDS];           //21\r\nuniform vec2  u_aBezier[3];                             //6\r\nuniform float u_fBlinkState;                            //1\r\n\r\nuniform int   u_iTypewriterUseLines;                    //1\r\nuniform int   u_iTypewriterMethod;                      //1\r\nuniform int   u_iTypewriterCharMax;                     //1\r\nuniform float u_fTypewriterWindowArray[2*WINDOW_COUNT]; //6\r\nuniform float u_fTypewriterSmoothness;                  //1\r\nuniform vec2  u_vTypewriterStartPos;                    //2\r\nuniform vec2  u_vTypewriterStartScale;                  //2\r\nuniform float u_fTypewriterStartRotation;               //1\r\nuniform float u_fTypewriterAlphaDuration;               //1\r\n\r\nuniform vec2  u_vOutputSize;                            //2\r\n\r\nfloat flagArray[MAX_EFFECTS];\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Functions\r\n// Scroll all the way down to see the main() function for the vertex shader\r\n\r\n//*That* randomisation function.\r\n//I haven't found a better method yet, and this is sufficient for our purposes\r\nfloat rand(vec2 co)\r\n{\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\n//Rotate by vector\r\nvec2 rotate_by_vector(vec2 position, vec2 centre, vec2 vector)\r\n{\r\n    //Normally I'd do this with a mat2() but for some reason this had issues cross-platform\r\n    vec2 delta = position - centre;\r\n    return centre + vec2(delta.x*vector.x - delta.y*vector.y, delta.x*vector.y + delta.y*vector.x);\r\n}\r\n\r\n//Rotate the character\r\nvec2 rotate(vec2 position, vec2 centre, float angle)\r\n{\r\n    return rotate_by_vector(position, centre, vec2(cos(0.00872664625*angle), -sin(0.00872664625*angle)));\r\n}\r\n\r\n//Scale the character\r\nvec2 scale(vec2 position, vec2 centre, float scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\nvec2 scale(vec2 position, vec2 centre, vec2 scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\n//Oscillate the character\r\nvec2 wave(vec2 position, float characterIndex)\r\n{\r\n    return vec2(position.x, position.y + WAVE_FLAG*WAVE_AMPLITUDE*sin(WAVE_FREQUENCY*characterIndex + WAVE_SPEED*u_fTime));\r\n}\r\n\r\n//Wheel the character around\r\nvec2 wheel(vec2 position, float characterIndex)\r\n{\r\n    float time = WHEEL_FREQUENCY*characterIndex + WHEEL_SPEED*u_fTime;\r\n    return position.xy + WHEEL_FLAG*WHEEL_AMPLITUDE*vec2(cos(time), -sin(time));\r\n}\r\n\r\n//Wobble the character by rotating around its central point\r\nvec2 wobble(vec2 position, vec2 centre)\r\n{\r\n    return rotate(position, centre, WOBBLE_FLAG*WOBBLE_ANGLE*sin(WOBBLE_FREQUENCY*u_fTime));\r\n}\r\n\r\n//Pulse the character by scaling it up and down\r\nvec2 pulse(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float adjustedScale = 1.0 +  PULSE_FLAG*PULSE_SCALE*(0.5 + 0.5*sin(PULSE_SPEED*(250.0*characterIndex + u_fTime)));\r\n    return scale(position, centre, adjustedScale);\r\n}\r\n\r\n//Shake the character along the x/y axes\r\n//We use integer time steps so that at low speeds characters don't jump around too much\r\n//Lots of magic numbers in here to try to get a nice-looking shake\r\nvec2 shake(vec2 position, float characterIndex)\r\n{\r\n    float time = SHAKE_SPEED*u_fTime + 0.5;\r\n    float floorTime = floor(time);\r\n    float merge = 1.0 - abs(2.0*(time - floorTime) - 1.0);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking shake\r\n    vec2 delta = vec2(rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0)),\r\n                      rand(vec2(characterIndex/501.0 - floorTime/19.0, characterIndex/701.0 + floorTime/317.0)));\r\n    \r\n    return position + SHAKE_FLAG*SHAKE_AMPLITUDE*merge*(2.0*delta - 1.0);\r\n}\r\n\r\n//Jitter the character scale, using a similar method to above\r\nvec2 jitter(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float floorTime = floor(JITTER_SPEED*u_fTime + 0.5);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking jitter\r\n    float delta = rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0));\r\n    \r\n    return scale(position, centre, mix(JITTER_MINIMUM, JITTER_MAXIMUM, delta));\r\n}\r\n\r\nfloat filterSprite(float spriteData)\r\n{\r\n    float imageSpeed = floor(spriteData / 4096.0);\r\n    float imageMax   = floor((spriteData - 4096.0*imageSpeed) / 64.0);\r\n    float image      = spriteData - (4096.0*imageSpeed + 64.0*imageMax);\r\n    \r\n    float displayImage = floor(mod(imageSpeed*u_fTime/1024.0, imageMax));\r\n    return ((abs(image-displayImage) < 1.0/255.0)? 1.0 : 0.0);\r\n}\r\n\r\n//HSV->RGB conversion function\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 P = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(P - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\n//Colour cycling for the rainbow effect\r\nvec4 rainbow(float characterIndex, vec4 colour)\r\n{\r\n    return vec4(mix(colour.rgb, hsv2rgb(vec3(0.02*characterIndex + RAINBOW_SPEED*u_fTime, 1.0, 1.0)), RAINBOW_FLAG*RAINBOW_WEIGHT), colour.a);\r\n}\r\n                           \r\n//Colour cycling through a defined palette\r\nvec4 cycle(float characterIndex, vec4 colour)\r\n{\r\n    float max_h = 4.0; //Default to a 4-colour cycle\r\n    \r\n    //Special cases for 0- and 1-colour cycles\r\n    if (colour.r < 0.003) return colour;\r\n    if (colour.g < 0.003) return vec4(hsv2rgb(vec3(colour.r, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0)), 1.0);\r\n    if (colour.a < 0.003) max_h = 3.0; //3-colour cycle\r\n    if (colour.b < 0.003) max_h = 2.0; //2-colour cycle\r\n    \r\n    float h = abs(mod((CYCLE_SPEED*u_fTime - characterIndex)/10.0, max_h));\r\n    \r\n    //vec3 rgbA = hsv2rgb(vec3(colour[int(h)], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    //vec3 rgbB = hsv2rgb(vec3(colour[int(mod(h + 1.0, max_h))], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    // rgbA\r\n    int ih = int(h); // int h\r\n    float c1 = 0.0; // colour 1\r\n    if (ih == 0) c1 = colour[0];\r\n    else if (ih == 1) c1 = colour[1];\r\n    else if (ih == 2) c1 = colour[2];\r\n    else if (ih == 3) c1 = colour[3];\r\n    \r\n    // rgbB\r\n    int ih2 = int(mod(h + 1.0, max_h)); // int h 2\r\n    float c2 = 0.0; // colour 2\r\n    if (ih2 == 0) c2 = colour[0];\r\n    else if (ih2 == 1) c2 = colour[1];\r\n    else if (ih2 == 2) c2 = colour[2];\r\n    else if (ih2 == 3) c2 = colour[3];\r\n    \r\n    vec3 rgbA = hsv2rgb(vec3(c1, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    vec3 rgbB = hsv2rgb(vec3(c2, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    return vec4(mix(rgbA, rgbB, fract(h)), 1.0);\r\n}\r\n\r\n//Fade effect for typewriter etc.\r\nfloat fade(float windowArray[2*WINDOW_COUNT], float smoothness, float index, bool invert)\r\n{\r\n    float result = 0.0;\r\n    float f      = 1.0;\r\n    float head   = 0.0;\r\n    float tail   = 0.0;\r\n    \r\n    for(int i = 0; i < 2*WINDOW_COUNT; i += 2)\r\n    {\r\n        head = windowArray[i  ];\r\n        tail = windowArray[i+1];\r\n        \r\n        if (u_fTypewriterSmoothness > 0.0)\r\n        {\r\n            f = 1.0 - min(max((index - tail) / smoothness, 0.0), 1.0);\r\n        }\r\n        else\r\n        {\r\n            f = 1.0;\r\n        }\r\n        \r\n        f *= step(index, head);\r\n        \r\n        result = max(f, result);\r\n    }\r\n    \r\n    if (invert) result = 1.0 - result;\r\n    \r\n    return result;\r\n}\r\n\r\nvec2 bezier(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*t*p1 + 3.0*inv_t*t*t*p2 + t*t*t*p3;\r\n}\r\n\r\nvec2 bezierDerivative(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*p1 + 6.0*inv_t*t*(p2 - p1) + 3.0*t*t*(p3 - p2);\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nfloat easeQuad(float time)\r\n{\r\n    return time*time;\r\n}\r\n\r\nfloat easeCubic(float time)\r\n{\r\n    return time*time*time;\r\n}\r\n\r\nfloat easeQuart(float time)\r\n{\r\n    return time*time*time*time;\r\n}\r\n\r\nfloat easeQuint(float time)\r\n{\r\n    return time*time*time*time*time;\r\n}\r\n\r\nfloat easeSine(float time)\r\n{\r\n    return 1.0 - cos(0.5*(time*PI));\r\n}\r\n\r\nfloat easeExpo(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    return pow(2.0, 10.0*time - 10.0);\r\n}\r\n\r\nfloat easeCirc(float time)\r\n{\r\n    return 1.0 - sqrt(1.0 - time*time);\r\n}\r\n\r\nfloat easeBack(float time)\r\n{\r\n    float param = 1.70158;\r\n    return time*time*((param + 1.0)*time - param);\r\n}\r\n\r\nfloat easeElastic(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    if (time == 1.0) return 1.0;\r\n    return -pow(2.0, 10.0*time - 10.0) * sin((time*10.0 - 10.75) * (2.0*PI) / 3.0);\r\n}\r\n\r\nfloat easeBounce(float time)\r\n{\r\n    float n1 = 7.5625;\r\n    float d1 = 2.75;\r\n    \r\n    time = 1.0 - time;\r\n    \r\n    if (time < 1.0 / d1)\r\n    {\r\n        return 1.0 - n1*time*time;\r\n    }\r\n    else if (time < 2.0 / d1)\r\n    {\r\n        time -= 1.5/d1;\r\n        return 1.0 - (n1*time*time + 0.75);\r\n    }\r\n    else if (time < 2.5 / d1)\r\n    {\r\n        time -= 2.25/d1;\r\n        return 1.0 - (n1*time*time + 0.9375);\r\n    }\r\n    else\r\n    {\r\n        time -= 2.625/d1;\r\n        return 1.0 - (n1*time*time + 0.984375);\r\n    }\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    //Find the scaling factor for the MVP matrix\r\n    v_fTextScale = in_Colour2.x;\r\n    \r\n    mat4 wvpMatrix = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION];\r\n    vec2 pixelScale = vec2(length(vec3(wvpMatrix[0][0], wvpMatrix[0][1], wvpMatrix[0][2])),\r\n                           length(vec3(wvpMatrix[1][0], wvpMatrix[1][1], wvpMatrix[1][2])));\r\n    pixelScale *= u_vOutputSize;\r\n    v_fPixelScale = 0.25*v_fTextScale*length(pixelScale);\r\n    \r\n    \r\n    //Unpack character/line index\r\n    float characterIndex = floor(in_Position.z / MAX_LINES);\r\n    float lineIndex      = in_Position.z - characterIndex*MAX_LINES;\r\n    \r\n    //MAX_EFFECTS = 10\r\n    float flagValue = in_Normal.z;\r\n    float edge;\r\n    edge = step(1024.0, flagValue); flagArray[10] = edge; flagValue -= 1024.0*edge;\r\n    edge = step( 512.0, flagValue); flagArray[ 9] = edge; flagValue -=  512.0*edge;\r\n    edge = step( 256.0, flagValue); flagArray[ 8] = edge; flagValue -=  256.0*edge;\r\n    edge = step( 128.0, flagValue); flagArray[ 7] = edge; flagValue -=  128.0*edge;\r\n    edge = step(  64.0, flagValue); flagArray[ 6] = edge; flagValue -=   64.0*edge;\r\n    edge = step(  32.0, flagValue); flagArray[ 5] = edge; flagValue -=   32.0*edge;\r\n    edge = step(  16.0, flagValue); flagArray[ 4] = edge; flagValue -=   16.0*edge;\r\n    edge = step(   8.0, flagValue); flagArray[ 3] = edge; flagValue -=    8.0*edge;\r\n    edge = step(   4.0, flagValue); flagArray[ 2] = edge; flagValue -=    4.0*edge;\r\n    edge = step(   2.0, flagValue); flagArray[ 1] = edge; flagValue -=    2.0*edge;\r\n    edge = step(   1.0, flagValue); flagArray[ 0] = edge; flagValue -=    1.0*edge;\r\n    \r\n    \r\n    \r\n    //Use the input vertex position from the vertex attributes. We ignore the z-component because it's used for other data\r\n    vec2 pos = in_Position.xy;\r\n    \r\n    \r\n    \r\n    //Unpack the glyph centre\r\n    vec2 centreDelta = vec2(in_Normal.x, in_Colour2.y);\r\n    \r\n    \r\n    \r\n    vec2 centre;\r\n    \r\n    //If we have a valid Bezier curve, apply it\r\n    if ((u_aBezier[2].x != 0.0) || (u_aBezier[2].y != 0.0))\r\n    {\r\n        centre = bezier(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        \r\n        vec2 orientation = bezierDerivative(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        pos = rotate_by_vector(centre - centreDelta, centre, normalize(orientation));\r\n        \r\n        vec2 perpendicular = normalize(vec2(-u_aBezier[2].y, u_aBezier[2].x));\r\n        pos += in_Position.y*perpendicular;\r\n    }\r\n    else\r\n    {\r\n        centre = pos + centreDelta;\r\n    }\r\n    \r\n    pos += u_vSkew*centre.yx;\r\n    if (SLANT_FLAG > 0.5) pos.x += centreDelta.y*SLANT_GRADIENT;\r\n    \r\n    \r\n    \r\n    //Colour\r\n    v_vColour = in_Colour;\r\n    \r\n    if (CYCLE_FLAG > 0.5) v_vColour = cycle(characterIndex, v_vColour); //Cycle colours through the defined palette\r\n    v_vColour = rainbow(characterIndex, v_vColour); //Cycle colours for the rainbow effect\r\n    \r\n    //Apply the gradient effect\r\n    if (pos.y > centre.y) v_vColour.rgb = mix(v_vColour.rgb, u_vGradient.rgb, u_vGradient.a);\r\n    \r\n    if (!BLEND_SPRITES && (SPRITE_FLAG > 0.5))\r\n    {\r\n        //If we're not RGB blending sprites and this *is* a sprite then only modify the alpha channel\r\n        v_vColour.a *= u_vColourBlend.a;\r\n    }\r\n    else\r\n    {\r\n        //And then blend with the blend colour/alpha\r\n        v_vColour *= u_vColourBlend;\r\n    }\r\n    \r\n    if (SPRITE_FLAG > 0.5) v_vColour.a *= filterSprite(in_Normal.y); //Use packed sprite data to filter out sprite frames that we don't want\r\n    if ((BLINK_FLAG > 0.5) && (u_fBlinkState < 0.5)) v_vColour.a = 0.0;\r\n    \r\n    //Regions\r\n    if ((characterIndex >= u_vRegionActive.x) && (characterIndex <= u_vRegionActive.y)) v_vColour.rgb = mix(v_vColour.rgb, u_vRegionColour.rgb, u_vRegionColour.a);\r\n    \r\n    \r\n    \r\n    //Vertex animation\r\n    pos.xy = wobble(pos, centre);\r\n    pos.xy = pulse( pos, centre, characterIndex);\r\n    if (JITTER_FLAG > 0.5) pos.xy = jitter(pos, centre, characterIndex); //Apply the jitter effect\r\n    \r\n    \r\n    \r\n    //Apply fade (if we're given a method)\r\n    int easeMethod = u_iTypewriterMethod;\r\n    bool fadeOut = (easeMethod >= EASE_METHOD_COUNT);\r\n    if (fadeOut) easeMethod -= EASE_METHOD_COUNT;\r\n    \r\n    if (easeMethod > EASE_NONE)\r\n    {\r\n        float fadeIndex = ((u_iTypewriterUseLines > 0)? lineIndex : characterIndex) + 1.0;\r\n        if (u_iTypewriterCharMax > 0) fadeIndex = float(u_iTypewriterCharMax) - fadeIndex;\r\n        \r\n        float time = fade(u_fTypewriterWindowArray, u_fTypewriterSmoothness, fadeIndex, fadeOut);\r\n        \r\n        if (u_fTypewriterAlphaDuration == 0.0)\r\n        {\r\n            if (time <= 0.0) v_vColour.a = 0.0;\r\n        }\r\n        else\r\n        {\r\n            v_vColour.a *= clamp(time / u_fTypewriterAlphaDuration, 0.0, 1.0);\r\n        }\r\n             if (easeMethod == EASE_QUADRATIC  ) { time = 1.0 - easeQuad(   1.0 - time); }\r\n        else if (easeMethod == EASE_CUBIC      ) { time = 1.0 - easeCubic(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUARTIC    ) { time = 1.0 - easeQuart(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUINTIC    ) { time = 1.0 - easeQuint(  1.0 - time); }\r\n        else if (easeMethod == EASE_SINE       ) { time = 1.0 - easeSine(   1.0 - time); }\r\n        else if (easeMethod == EASE_EXPONENTIAL) { time = 1.0 - easeExpo(   1.0 - time); }\r\n        else if (easeMethod == EASE_CIRCULAR   ) { time = 1.0 - easeCirc(   1.0 - time); }\r\n        else if (easeMethod == EASE_BACK       ) { time = 1.0 - easeBack(   1.0 - time); }\r\n        else if (easeMethod == EASE_ELASTIC    ) { time = 1.0 - easeElastic(1.0 - time); }\r\n        else if (easeMethod == EASE_BOUNCE     ) { time = 1.0 - easeBounce( 1.0 - time); }\r\n        else if (easeMethod == EASE_CUSTOM_1   ) { /*Custom ease slot 1*/ }\r\n        else if (easeMethod == EASE_CUSTOM_2   ) { /*Custom ease slot 2*/ }\r\n        else if (easeMethod == EASE_CUSTOM_3   ) { /*Custom ease slot 3*/ }\r\n        \r\n        pos = scale(pos, centre, mix(u_vTypewriterStartScale, vec2(1.0), time));\r\n        pos = rotate(pos, centre, mix(-u_fTypewriterStartRotation, 0.0, time));\r\n        pos.xy += mix(u_vTypewriterStartPos, vec2(0.0), time);\r\n    }\r\n    \r\n    \r\n    \r\n    //Vertex\r\n    pos.xy = wave( pos, characterIndex); //Apply the wave effect\r\n    pos.xy = wheel(pos, characterIndex); //Apply the wheel effect\r\n    pos.xy = shake(pos, characterIndex); //Apply the shake effect\r\n    \r\n    \r\n    \r\n    //Final positioning\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION]*vec4(pos, 0.0, 1.0);\r\n    \r\n    \r\n    \r\n    //Texture\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\n#define PROPORTIONAL_BORDER_SCALE false\r\n#define PREMULTIPLY_ALPHA false\r\n#define ROUNDED_BORDERS false\r\n\r\nvarying vec2  v_vTexcoord;\r\nvarying vec4  v_vColour;\r\nvarying float v_fPixelScale;\r\nvarying float v_fTextScale;\r\n\r\nuniform vec2  u_vTexel;\r\nuniform float u_fMSDFRange;\r\nuniform float u_fMSDFThicknessOffset;\r\nuniform vec4  u_vShadowColour;\r\nuniform vec3  u_vShadowOffsetAndSoftness;\r\nuniform vec3  u_vBorderColour;\r\nuniform float u_fBorderThickness;\r\nuniform float u_fSecondDraw;\r\nuniform vec4  u_vFlash;\r\n\r\nfloat median(vec3 v)\r\n{\r\n    return max(min(v.x, v.y), min(max(v.x, v.y), v.z));\r\n}\r\n\r\nfloat MSDFSignedDistance(vec4 sample)\r\n{\r\n    return median(sample.rgb) + u_fMSDFThicknessOffset - 0.5;\r\n}\r\n\r\nfloat SDFSignedDistance(vec4 sample)\r\n{\r\n    return sample.a + u_fMSDFThicknessOffset - 0.5;\r\n}\r\n\r\nfloat MSDFAlpha(float signedDistance, float pixelSize, float outerBorder)\r\n{\r\n    return clamp(u_fMSDFRange*pixelSize*signedDistance + outerBorder + 0.5, 0.0, 1.0);\r\n}\r\n\r\nfloat MSDFAlphaSoft(float signedDistance, float pixelSize, float outerBorder, float softness)\r\n{\r\n    return clamp((u_fMSDFRange*pixelSize*signedDistance + outerBorder)/softness + 0.5, 0.0, 1.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    float distBase = MSDFSignedDistance(sample);\r\n    gl_FragColor = vec4(v_vColour.rgb, MSDFAlpha(distBase, v_fPixelScale, 0.0));\r\n    \r\n    if (u_fSecondDraw < 0.5)\r\n    {\r\n        if (u_fBorderThickness > 0.0)\r\n        {\r\n            float borderDist = ROUNDED_BORDERS? SDFSignedDistance(sample) : MSDFSignedDistance(sample);\r\n            float alphaBorder = MSDFAlpha(borderDist, v_fPixelScale, PROPORTIONAL_BORDER_SCALE? (v_fPixelScale*u_fBorderThickness) : u_fBorderThickness);\r\n            gl_FragColor.rgb = mix(u_vBorderColour, gl_FragColor.rgb, gl_FragColor.a);\r\n            gl_FragColor.a = max(gl_FragColor.a, alphaBorder);\r\n        }\r\n        \r\n        if (u_vShadowColour.a > 0.0)\r\n        {\r\n            vec4 shadowSample = texture2D(gm_BaseTexture, v_vTexcoord - u_vTexel*u_vShadowOffsetAndSoftness.xy/v_fPixelScale);\r\n            float shadowDist = ROUNDED_BORDERS? SDFSignedDistance(shadowSample) : MSDFSignedDistance(shadowSample);\r\n            float alphaShadow = MSDFAlphaSoft(shadowDist, v_fPixelScale, PROPORTIONAL_BORDER_SCALE? (v_fPixelScale*u_fBorderThickness) : u_fBorderThickness, u_vShadowOffsetAndSoftness.z);\r\n            \r\n            float preAlpha = gl_FragColor.a;\r\n            gl_FragColor = mix(vec4(u_vShadowColour.rgb, alphaShadow), gl_FragColor, gl_FragColor.a);\r\n            gl_FragColor.a = max(preAlpha, u_vShadowColour.a*alphaShadow);\r\n        }\r\n    }\r\n    \r\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, u_vFlash.rgb, u_vFlash.a);\r\n    gl_FragColor.a *= v_vColour.a;\r\n    \r\n    if (PREMULTIPLY_ALPHA)\r\n    {\r\n        gl_FragColor.rgb *= gl_FragColor.a;\r\n    }\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\n#define BLEND_SPRITES true\r\n\r\nconst int MAX_EFFECTS = 11;\r\n#define SPRITE_FLAG   flagArray[ 0]\r\n#define WAVE_FLAG     flagArray[ 1]\r\n#define SHAKE_FLAG    flagArray[ 2]\r\n#define RAINBOW_FLAG  flagArray[ 3]\r\n#define WOBBLE_FLAG   flagArray[ 4]\r\n#define PULSE_FLAG    flagArray[ 5]\r\n#define WHEEL_FLAG    flagArray[ 6]\r\n#define CYCLE_FLAG    flagArray[ 7]\r\n#define JITTER_FLAG   flagArray[ 8]\r\n#define BLINK_FLAG    flagArray[ 9]\r\n#define SLANT_FLAG    flagArray[10]\r\n\r\nconst int MAX_ANIM_FIELDS = 21;\r\n#define WAVE_AMPLITUDE    u_aDataFields[ 0]\r\n#define WAVE_FREQUENCY    u_aDataFields[ 1]\r\n#define WAVE_SPEED        u_aDataFields[ 2]\r\n#define SHAKE_AMPLITUDE   u_aDataFields[ 3]\r\n#define SHAKE_SPEED       u_aDataFields[ 4]\r\n#define RAINBOW_WEIGHT    u_aDataFields[ 5]\r\n#define RAINBOW_SPEED     u_aDataFields[ 6]\r\n#define WOBBLE_ANGLE      u_aDataFields[ 7]\r\n#define WOBBLE_FREQUENCY  u_aDataFields[ 8]\r\n#define PULSE_SCALE       u_aDataFields[ 9]\r\n#define PULSE_SPEED       u_aDataFields[10]\r\n#define WHEEL_AMPLITUDE   u_aDataFields[11]\r\n#define WHEEL_FREQUENCY   u_aDataFields[12]\r\n#define WHEEL_SPEED       u_aDataFields[13]\r\n#define CYCLE_SPEED       u_aDataFields[14]\r\n#define CYCLE_SATURATION  u_aDataFields[15]\r\n#define CYCLE_VALUE       u_aDataFields[16]\r\n#define JITTER_MINIMUM    u_aDataFields[17]\r\n#define JITTER_MAXIMUM    u_aDataFields[18]\r\n#define JITTER_SPEED      u_aDataFields[19]\r\n#define SLANT_GRADIENT    u_aDataFields[20]\r\n\r\nconst int EASE_METHOD_COUNT = 15;\r\n#define EASE_NONE         0\r\n#define EASE_LINEAR       1\r\n#define EASE_QUADRATIC    2\r\n#define EASE_CUBIC        3\r\n#define EASE_QUARTIC      4\r\n#define EASE_QUINTIC      5\r\n#define EASE_SINE         6\r\n#define EASE_EXPONENTIAL  7\r\n#define EASE_CIRCULAR     8\r\n#define EASE_BACK         9\r\n#define EASE_ELASTIC     10\r\n#define EASE_BOUNCE      11\r\n#define EASE_CUSTOM_1    12\r\n#define EASE_CUSTOM_2    13\r\n#define EASE_CUSTOM_3    14\r\n\r\nconst float MAX_LINES = 1000.0; //Change __SCRIBBLE_MAX_LINES in scribble_init() if you change this value!\r\n\r\nconst int WINDOW_COUNT = 3;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Attributes, Varyings, and Uniforms\r\n\r\n\r\nattribute vec3  in_Position;     //{X, Y, Packed character & line index}\r\nattribute vec3  in_Normal;       //{dX, Sprite data, Bitpacked effect flags}\r\nattribute vec4  in_Colour;       //Colour. This attribute is used for sprite data if this character is a sprite\r\nattribute vec2  in_TextureCoord; //UVs\r\nattribute vec2  in_Colour2;      //{Scale, dY}\r\n\r\nvarying vec2  v_vTexcoord;\r\nvarying vec4  v_vColour;\r\nvarying float v_fPixelScale;\r\nvarying float v_fTextScale;\r\n\r\nuniform vec4  u_vColourBlend;                           //4\r\nuniform vec4  u_vGradient;                              //4\r\nuniform vec2  u_vSkew;                                  //2\r\nuniform vec2  u_vRegionActive;                          //2\r\nuniform vec4  u_vRegionColour;                          //4\r\nuniform float u_fTime;                                  //1\r\nuniform float u_aDataFields[MAX_ANIM_FIELDS];           //21\r\nuniform vec2  u_aBezier[3];                             //6\r\nuniform float u_fBlinkState;                            //1\r\n\r\nuniform int   u_iTypewriterUseLines;                    //1\r\nuniform int   u_iTypewriterMethod;                      //1\r\nuniform int   u_iTypewriterCharMax;                     //1\r\nuniform float u_fTypewriterWindowArray[2*WINDOW_COUNT]; //6\r\nuniform float u_fTypewriterSmoothness;                  //1\r\nuniform vec2  u_vTypewriterStartPos;                    //2\r\nuniform vec2  u_vTypewriterStartScale;                  //2\r\nuniform float u_fTypewriterStartRotation;               //1\r\nuniform float u_fTypewriterAlphaDuration;               //1\r\n\r\nuniform vec2  u_vOutputSize;                            //2\r\n\r\nfloat flagArray[MAX_EFFECTS];\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Functions\r\n// Scroll all the way down to see the main() function for the vertex shader\r\n\r\n//*That* randomisation function.\r\n//I haven't found a better method yet, and this is sufficient for our purposes\r\nfloat rand(vec2 co)\r\n{\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\n//Rotate by vector\r\nvec2 rotate_by_vector(vec2 position, vec2 centre, vec2 vector)\r\n{\r\n    //Normally I'd do this with a mat2() but for some reason this had issues cross-platform\r\n    vec2 delta = position - centre;\r\n    return centre + vec2(delta.x*vector.x - delta.y*vector.y, delta.x*vector.y + delta.y*vector.x);\r\n}\r\n\r\n//Rotate the character\r\nvec2 rotate(vec2 position, vec2 centre, float angle)\r\n{\r\n    return rotate_by_vector(position, centre, vec2(cos(0.00872664625*angle), -sin(0.00872664625*angle)));\r\n}\r\n\r\n//Scale the character\r\nvec2 scale(vec2 position, vec2 centre, float scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\nvec2 scale(vec2 position, vec2 centre, vec2 scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\n//Oscillate the character\r\nvec2 wave(vec2 position, float characterIndex)\r\n{\r\n    return vec2(position.x, position.y + WAVE_FLAG*WAVE_AMPLITUDE*sin(WAVE_FREQUENCY*characterIndex + WAVE_SPEED*u_fTime));\r\n}\r\n\r\n//Wheel the character around\r\nvec2 wheel(vec2 position, float characterIndex)\r\n{\r\n    float time = WHEEL_FREQUENCY*characterIndex + WHEEL_SPEED*u_fTime;\r\n    return position.xy + WHEEL_FLAG*WHEEL_AMPLITUDE*vec2(cos(time), -sin(time));\r\n}\r\n\r\n//Wobble the character by rotating around its central point\r\nvec2 wobble(vec2 position, vec2 centre)\r\n{\r\n    return rotate(position, centre, WOBBLE_FLAG*WOBBLE_ANGLE*sin(WOBBLE_FREQUENCY*u_fTime));\r\n}\r\n\r\n//Pulse the character by scaling it up and down\r\nvec2 pulse(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float adjustedScale = 1.0 +  PULSE_FLAG*PULSE_SCALE*(0.5 + 0.5*sin(PULSE_SPEED*(250.0*characterIndex + u_fTime)));\r\n    return scale(position, centre, adjustedScale);\r\n}\r\n\r\n//Shake the character along the x/y axes\r\n//We use integer time steps so that at low speeds characters don't jump around too much\r\n//Lots of magic numbers in here to try to get a nice-looking shake\r\nvec2 shake(vec2 position, float characterIndex)\r\n{\r\n    float time = SHAKE_SPEED*u_fTime + 0.5;\r\n    float floorTime = floor(time);\r\n    float merge = 1.0 - abs(2.0*(time - floorTime) - 1.0);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking shake\r\n    vec2 delta = vec2(rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0)),\r\n                      rand(vec2(characterIndex/501.0 - floorTime/19.0, characterIndex/701.0 + floorTime/317.0)));\r\n    \r\n    return position + SHAKE_FLAG*SHAKE_AMPLITUDE*merge*(2.0*delta - 1.0);\r\n}\r\n\r\n//Jitter the character scale, using a similar method to above\r\nvec2 jitter(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float floorTime = floor(JITTER_SPEED*u_fTime + 0.5);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking jitter\r\n    float delta = rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0));\r\n    \r\n    return scale(position, centre, mix(JITTER_MINIMUM, JITTER_MAXIMUM, delta));\r\n}\r\n\r\nfloat filterSprite(float spriteData)\r\n{\r\n    float imageSpeed = floor(spriteData / 4096.0);\r\n    float imageMax   = floor((spriteData - 4096.0*imageSpeed) / 64.0);\r\n    float image      = spriteData - (4096.0*imageSpeed + 64.0*imageMax);\r\n    \r\n    float displayImage = floor(mod(imageSpeed*u_fTime/1024.0, imageMax));\r\n    return ((abs(image-displayImage) < 1.0/255.0)? 1.0 : 0.0);\r\n}\r\n\r\n//HSV->RGB conversion function\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 P = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(P - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\n//Colour cycling for the rainbow effect\r\nvec4 rainbow(float characterIndex, vec4 colour)\r\n{\r\n    return vec4(mix(colour.rgb, hsv2rgb(vec3(0.02*characterIndex + RAINBOW_SPEED*u_fTime, 1.0, 1.0)), RAINBOW_FLAG*RAINBOW_WEIGHT), colour.a);\r\n}\r\n                           \r\n//Colour cycling through a defined palette\r\nvec4 cycle(float characterIndex, vec4 colour)\r\n{\r\n    float max_h = 4.0; //Default to a 4-colour cycle\r\n    \r\n    //Special cases for 0- and 1-colour cycles\r\n    if (colour.r < 0.003) return colour;\r\n    if (colour.g < 0.003) return vec4(hsv2rgb(vec3(colour.r, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0)), 1.0);\r\n    if (colour.a < 0.003) max_h = 3.0; //3-colour cycle\r\n    if (colour.b < 0.003) max_h = 2.0; //2-colour cycle\r\n    \r\n    float h = abs(mod((CYCLE_SPEED*u_fTime - characterIndex)/10.0, max_h));\r\n    \r\n    //vec3 rgbA = hsv2rgb(vec3(colour[int(h)], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    //vec3 rgbB = hsv2rgb(vec3(colour[int(mod(h + 1.0, max_h))], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    // rgbA\r\n    int ih = int(h); // int h\r\n    float c1 = 0.0; // colour 1\r\n    if (ih == 0) c1 = colour[0];\r\n    else if (ih == 1) c1 = colour[1];\r\n    else if (ih == 2) c1 = colour[2];\r\n    else if (ih == 3) c1 = colour[3];\r\n    \r\n    // rgbB\r\n    int ih2 = int(mod(h + 1.0, max_h)); // int h 2\r\n    float c2 = 0.0; // colour 2\r\n    if (ih2 == 0) c2 = colour[0];\r\n    else if (ih2 == 1) c2 = colour[1];\r\n    else if (ih2 == 2) c2 = colour[2];\r\n    else if (ih2 == 3) c2 = colour[3];\r\n    \r\n    vec3 rgbA = hsv2rgb(vec3(c1, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    vec3 rgbB = hsv2rgb(vec3(c2, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    return vec4(mix(rgbA, rgbB, fract(h)), 1.0);\r\n}\r\n\r\n//Fade effect for typewriter etc.\r\nfloat fade(float windowArray[2*WINDOW_COUNT], float smoothness, float index, bool invert)\r\n{\r\n    float result = 0.0;\r\n    float f      = 1.0;\r\n    float head   = 0.0;\r\n    float tail   = 0.0;\r\n    \r\n    for(int i = 0; i < 2*WINDOW_COUNT; i += 2)\r\n    {\r\n        head = windowArray[i  ];\r\n        tail = windowArray[i+1];\r\n        \r\n        if (u_fTypewriterSmoothness > 0.0)\r\n        {\r\n            f = 1.0 - min(max((index - tail) / smoothness, 0.0), 1.0);\r\n        }\r\n        else\r\n        {\r\n            f = 1.0;\r\n        }\r\n        \r\n        f *= step(index, head);\r\n        \r\n        result = max(f, result);\r\n    }\r\n    \r\n    if (invert) result = 1.0 - result;\r\n    \r\n    return result;\r\n}\r\n\r\nvec2 bezier(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*t*p1 + 3.0*inv_t*t*t*p2 + t*t*t*p3;\r\n}\r\n\r\nvec2 bezierDerivative(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*p1 + 6.0*inv_t*t*(p2 - p1) + 3.0*t*t*(p3 - p2);\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nfloat easeQuad(float time)\r\n{\r\n    return time*time;\r\n}\r\n\r\nfloat easeCubic(float time)\r\n{\r\n    return time*time*time;\r\n}\r\n\r\nfloat easeQuart(float time)\r\n{\r\n    return time*time*time*time;\r\n}\r\n\r\nfloat easeQuint(float time)\r\n{\r\n    return time*time*time*time*time;\r\n}\r\n\r\nfloat easeSine(float time)\r\n{\r\n    return 1.0 - cos(0.5*(time*PI));\r\n}\r\n\r\nfloat easeExpo(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    return pow(2.0, 10.0*time - 10.0);\r\n}\r\n\r\nfloat easeCirc(float time)\r\n{\r\n    return 1.0 - sqrt(1.0 - time*time);\r\n}\r\n\r\nfloat easeBack(float time)\r\n{\r\n    float param = 1.70158;\r\n    return time*time*((param + 1.0)*time - param);\r\n}\r\n\r\nfloat easeElastic(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    if (time == 1.0) return 1.0;\r\n    return -pow(2.0, 10.0*time - 10.0) * sin((time*10.0 - 10.75) * (2.0*PI) / 3.0);\r\n}\r\n\r\nfloat easeBounce(float time)\r\n{\r\n    float n1 = 7.5625;\r\n    float d1 = 2.75;\r\n    \r\n    time = 1.0 - time;\r\n    \r\n    if (time < 1.0 / d1)\r\n    {\r\n        return 1.0 - n1*time*time;\r\n    }\r\n    else if (time < 2.0 / d1)\r\n    {\r\n        time -= 1.5/d1;\r\n        return 1.0 - (n1*time*time + 0.75);\r\n    }\r\n    else if (time < 2.5 / d1)\r\n    {\r\n        time -= 2.25/d1;\r\n        return 1.0 - (n1*time*time + 0.9375);\r\n    }\r\n    else\r\n    {\r\n        time -= 2.625/d1;\r\n        return 1.0 - (n1*time*time + 0.984375);\r\n    }\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    //Find the scaling factor for the MVP matrix\r\n    v_fTextScale = in_Colour2.x;\r\n    \r\n    mat4 wvpMatrix = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION];\r\n    vec2 pixelScale = vec2(length(vec3(wvpMatrix[0][0], wvpMatrix[0][1], wvpMatrix[0][2])),\r\n                           length(vec3(wvpMatrix[1][0], wvpMatrix[1][1], wvpMatrix[1][2])));\r\n    pixelScale *= u_vOutputSize;\r\n    v_fPixelScale = 0.25*v_fTextScale*length(pixelScale);\r\n    \r\n    \r\n    //Unpack character/line index\r\n    float characterIndex = floor(in_Position.z / MAX_LINES);\r\n    float lineIndex      = in_Position.z - characterIndex*MAX_LINES;\r\n    \r\n    //MAX_EFFECTS = 10\r\n    float flagValue = in_Normal.z;\r\n    float edge;\r\n    edge = step(1024.0, flagValue); flagArray[10] = edge; flagValue -= 1024.0*edge;\r\n    edge = step( 512.0, flagValue); flagArray[ 9] = edge; flagValue -=  512.0*edge;\r\n    edge = step( 256.0, flagValue); flagArray[ 8] = edge; flagValue -=  256.0*edge;\r\n    edge = step( 128.0, flagValue); flagArray[ 7] = edge; flagValue -=  128.0*edge;\r\n    edge = step(  64.0, flagValue); flagArray[ 6] = edge; flagValue -=   64.0*edge;\r\n    edge = step(  32.0, flagValue); flagArray[ 5] = edge; flagValue -=   32.0*edge;\r\n    edge = step(  16.0, flagValue); flagArray[ 4] = edge; flagValue -=   16.0*edge;\r\n    edge = step(   8.0, flagValue); flagArray[ 3] = edge; flagValue -=    8.0*edge;\r\n    edge = step(   4.0, flagValue); flagArray[ 2] = edge; flagValue -=    4.0*edge;\r\n    edge = step(   2.0, flagValue); flagArray[ 1] = edge; flagValue -=    2.0*edge;\r\n    edge = step(   1.0, flagValue); flagArray[ 0] = edge; flagValue -=    1.0*edge;\r\n    \r\n    \r\n    \r\n    //Use the input vertex position from the vertex attributes. We ignore the z-component because it's used for other data\r\n    vec2 pos = in_Position.xy;\r\n    \r\n    \r\n    \r\n    //Unpack the glyph centre\r\n    vec2 centreDelta = vec2(in_Normal.x, in_Colour2.y);\r\n    \r\n    \r\n    \r\n    vec2 centre;\r\n    \r\n    //If we have a valid Bezier curve, apply it\r\n    if ((u_aBezier[2].x != 0.0) || (u_aBezier[2].y != 0.0))\r\n    {\r\n        centre = bezier(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        \r\n        vec2 orientation = bezierDerivative(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        pos = rotate_by_vector(centre - centreDelta, centre, normalize(orientation));\r\n        \r\n        vec2 perpendicular = normalize(vec2(-u_aBezier[2].y, u_aBezier[2].x));\r\n        pos += in_Position.y*perpendicular;\r\n    }\r\n    else\r\n    {\r\n        centre = pos + centreDelta;\r\n    }\r\n    \r\n    pos += u_vSkew*centre.yx;\r\n    if (SLANT_FLAG > 0.5) pos.x += centreDelta.y*SLANT_GRADIENT;\r\n    \r\n    \r\n    \r\n    //Colour\r\n    v_vColour = in_Colour;\r\n    \r\n    if (CYCLE_FLAG > 0.5) v_vColour = cycle(characterIndex, v_vColour); //Cycle colours through the defined palette\r\n    v_vColour = rainbow(characterIndex, v_vColour); //Cycle colours for the rainbow effect\r\n    \r\n    //Apply the gradient effect\r\n    if (pos.y > centre.y) v_vColour.rgb = mix(v_vColour.rgb, u_vGradient.rgb, u_vGradient.a);\r\n    \r\n    if (!BLEND_SPRITES && (SPRITE_FLAG > 0.5))\r\n    {\r\n        //If we're not RGB blending sprites and this *is* a sprite then only modify the alpha channel\r\n        v_vColour.a *= u_vColourBlend.a;\r\n    }\r\n    else\r\n    {\r\n        //And then blend with the blend colour/alpha\r\n        v_vColour *= u_vColourBlend;\r\n    }\r\n    \r\n    if (SPRITE_FLAG > 0.5) v_vColour.a *= filterSprite(in_Normal.y); //Use packed sprite data to filter out sprite frames that we don't want\r\n    if ((BLINK_FLAG > 0.5) && (u_fBlinkState < 0.5)) v_vColour.a = 0.0;\r\n    \r\n    //Regions\r\n    if ((characterIndex >= u_vRegionActive.x) && (characterIndex <= u_vRegionActive.y)) v_vColour.rgb = mix(v_vColour.rgb, u_vRegionColour.rgb, u_vRegionColour.a);\r\n    \r\n    \r\n    \r\n    //Vertex animation\r\n    pos.xy = wobble(pos, centre);\r\n    pos.xy = pulse( pos, centre, characterIndex);\r\n    if (JITTER_FLAG > 0.5) pos.xy = jitter(pos, centre, characterIndex); //Apply the jitter effect\r\n    \r\n    \r\n    \r\n    //Apply fade (if we're given a method)\r\n    int easeMethod = u_iTypewriterMethod;\r\n    bool fadeOut = (easeMethod >= EASE_METHOD_COUNT);\r\n    if (fadeOut) easeMethod -= EASE_METHOD_COUNT;\r\n    \r\n    if (easeMethod > EASE_NONE)\r\n    {\r\n        float fadeIndex = ((u_iTypewriterUseLines > 0)? lineIndex : characterIndex) + 1.0;\r\n        if (u_iTypewriterCharMax > 0) fadeIndex = float(u_iTypewriterCharMax) - fadeIndex;\r\n        \r\n        float time = fade(u_fTypewriterWindowArray, u_fTypewriterSmoothness, fadeIndex, fadeOut);\r\n        \r\n        if (u_fTypewriterAlphaDuration == 0.0)\r\n        {\r\n            if (time <= 0.0) v_vColour.a = 0.0;\r\n        }\r\n        else\r\n        {\r\n            v_vColour.a *= clamp(time / u_fTypewriterAlphaDuration, 0.0, 1.0);\r\n        }\r\n             if (easeMethod == EASE_QUADRATIC  ) { time = 1.0 - easeQuad(   1.0 - time); }\r\n        else if (easeMethod == EASE_CUBIC      ) { time = 1.0 - easeCubic(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUARTIC    ) { time = 1.0 - easeQuart(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUINTIC    ) { time = 1.0 - easeQuint(  1.0 - time); }\r\n        else if (easeMethod == EASE_SINE       ) { time = 1.0 - easeSine(   1.0 - time); }\r\n        else if (easeMethod == EASE_EXPONENTIAL) { time = 1.0 - easeExpo(   1.0 - time); }\r\n        else if (easeMethod == EASE_CIRCULAR   ) { time = 1.0 - easeCirc(   1.0 - time); }\r\n        else if (easeMethod == EASE_BACK       ) { time = 1.0 - easeBack(   1.0 - time); }\r\n        else if (easeMethod == EASE_ELASTIC    ) { time = 1.0 - easeElastic(1.0 - time); }\r\n        else if (easeMethod == EASE_BOUNCE     ) { time = 1.0 - easeBounce( 1.0 - time); }\r\n        else if (easeMethod == EASE_CUSTOM_1   ) { /*Custom ease slot 1*/ }\r\n        else if (easeMethod == EASE_CUSTOM_2   ) { /*Custom ease slot 2*/ }\r\n        else if (easeMethod == EASE_CUSTOM_3   ) { /*Custom ease slot 3*/ }\r\n        \r\n        pos = scale(pos, centre, mix(u_vTypewriterStartScale, vec2(1.0), time));\r\n        pos = rotate(pos, centre, mix(-u_fTypewriterStartRotation, 0.0, time));\r\n        pos.xy += mix(u_vTypewriterStartPos, vec2(0.0), time);\r\n    }\r\n    \r\n    \r\n    \r\n    //Vertex\r\n    pos.xy = wave( pos, characterIndex); //Apply the wave effect\r\n    pos.xy = wheel(pos, characterIndex); //Apply the wheel effect\r\n    pos.xy = shake(pos, characterIndex); //Apply the shake effect\r\n    \r\n    \r\n    \r\n    //Final positioning\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION]*vec4(pos, 0.0, 1.0);\r\n    \r\n    \r\n    \r\n    //Texture\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\n#define PROPORTIONAL_BORDER_SCALE false\r\n#define PREMULTIPLY_ALPHA false\r\n#define ROUNDED_BORDERS false\r\n\r\nvarying vec2  v_vTexcoord;\r\nvarying vec4  v_vColour;\r\nvarying float v_fPixelScale;\r\nvarying float v_fTextScale;\r\n\r\nuniform vec2  u_vTexel;\r\nuniform float u_fMSDFRange;\r\nuniform float u_fMSDFThicknessOffset;\r\nuniform vec4  u_vShadowColour;\r\nuniform vec3  u_vShadowOffsetAndSoftness;\r\nuniform vec3  u_vBorderColour;\r\nuniform float u_fBorderThickness;\r\nuniform float u_fSecondDraw;\r\nuniform vec4  u_vFlash;\r\n\r\nfloat median(vec3 v)\r\n{\r\n    return max(min(v.x, v.y), min(max(v.x, v.y), v.z));\r\n}\r\n\r\nfloat MSDFSignedDistance(vec4 sample)\r\n{\r\n    return median(sample.rgb) + u_fMSDFThicknessOffset - 0.5;\r\n}\r\n\r\nfloat SDFSignedDistance(vec4 sample)\r\n{\r\n    return sample.a + u_fMSDFThicknessOffset - 0.5;\r\n}\r\n\r\nfloat MSDFAlpha(float signedDistance, float pixelSize, float outerBorder)\r\n{\r\n    return clamp(u_fMSDFRange*pixelSize*signedDistance + outerBorder + 0.5, 0.0, 1.0);\r\n}\r\n\r\nfloat MSDFAlphaSoft(float signedDistance, float pixelSize, float outerBorder, float softness)\r\n{\r\n    return clamp((u_fMSDFRange*pixelSize*signedDistance + outerBorder)/softness + 0.5, 0.0, 1.0);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 sample = texture2D(gm_BaseTexture, v_vTexcoord);\r\n    float distBase = MSDFSignedDistance(sample);\r\n    gl_FragColor = vec4(v_vColour.rgb, MSDFAlpha(distBase, v_fPixelScale, 0.0));\r\n    \r\n    if (u_fSecondDraw < 0.5)\r\n    {\r\n        if (u_fBorderThickness > 0.0)\r\n        {\r\n            float borderDist = ROUNDED_BORDERS? SDFSignedDistance(sample) : MSDFSignedDistance(sample);\r\n            float alphaBorder = MSDFAlpha(borderDist, v_fPixelScale, PROPORTIONAL_BORDER_SCALE? (v_fPixelScale*u_fBorderThickness) : u_fBorderThickness);\r\n            gl_FragColor.rgb = mix(u_vBorderColour, gl_FragColor.rgb, gl_FragColor.a);\r\n            gl_FragColor.a = max(gl_FragColor.a, alphaBorder);\r\n        }\r\n        \r\n        if (u_vShadowColour.a > 0.0)\r\n        {\r\n            vec4 shadowSample = texture2D(gm_BaseTexture, v_vTexcoord - u_vTexel*u_vShadowOffsetAndSoftness.xy/v_fPixelScale);\r\n            float shadowDist = ROUNDED_BORDERS? SDFSignedDistance(shadowSample) : MSDFSignedDistance(shadowSample);\r\n            float alphaShadow = MSDFAlphaSoft(shadowDist, v_fPixelScale, PROPORTIONAL_BORDER_SCALE? (v_fPixelScale*u_fBorderThickness) : u_fBorderThickness, u_vShadowOffsetAndSoftness.z);\r\n            \r\n            float preAlpha = gl_FragColor.a;\r\n            gl_FragColor = mix(vec4(u_vShadowColour.rgb, alphaShadow), gl_FragColor, gl_FragColor.a);\r\n            gl_FragColor.a = max(preAlpha, u_vShadowColour.a*alphaShadow);\r\n        }\r\n    }\r\n    \r\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, u_vFlash.rgb, u_vFlash.a);\r\n    gl_FragColor.a *= v_vColour.a;\r\n    \r\n    if (PREMULTIPLY_ALPHA)\r\n    {\r\n        gl_FragColor.rgb *= gl_FragColor.a;\r\n    }\r\n}\r\n",
        "in_Normal",
        "in_Colour2",
        "__shd_scribble",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\n#define BLEND_SPRITES true\r\n\r\nconst int MAX_EFFECTS = 11;\r\n#define SPRITE_FLAG   flagArray[ 0]\r\n#define WAVE_FLAG     flagArray[ 1]\r\n#define SHAKE_FLAG    flagArray[ 2]\r\n#define RAINBOW_FLAG  flagArray[ 3]\r\n#define WOBBLE_FLAG   flagArray[ 4]\r\n#define PULSE_FLAG    flagArray[ 5]\r\n#define WHEEL_FLAG    flagArray[ 6]\r\n#define CYCLE_FLAG    flagArray[ 7]\r\n#define JITTER_FLAG   flagArray[ 8]\r\n#define BLINK_FLAG    flagArray[ 9]\r\n#define SLANT_FLAG    flagArray[10]\r\n\r\nconst int MAX_ANIM_FIELDS = 21;\r\n#define WAVE_AMPLITUDE    u_aDataFields[ 0]\r\n#define WAVE_FREQUENCY    u_aDataFields[ 1]\r\n#define WAVE_SPEED        u_aDataFields[ 2]\r\n#define SHAKE_AMPLITUDE   u_aDataFields[ 3]\r\n#define SHAKE_SPEED       u_aDataFields[ 4]\r\n#define RAINBOW_WEIGHT    u_aDataFields[ 5]\r\n#define RAINBOW_SPEED     u_aDataFields[ 6]\r\n#define WOBBLE_ANGLE      u_aDataFields[ 7]\r\n#define WOBBLE_FREQUENCY  u_aDataFields[ 8]\r\n#define PULSE_SCALE       u_aDataFields[ 9]\r\n#define PULSE_SPEED       u_aDataFields[10]\r\n#define WHEEL_AMPLITUDE   u_aDataFields[11]\r\n#define WHEEL_FREQUENCY   u_aDataFields[12]\r\n#define WHEEL_SPEED       u_aDataFields[13]\r\n#define CYCLE_SPEED       u_aDataFields[14]\r\n#define CYCLE_SATURATION  u_aDataFields[15]\r\n#define CYCLE_VALUE       u_aDataFields[16]\r\n#define JITTER_MINIMUM    u_aDataFields[17]\r\n#define JITTER_MAXIMUM    u_aDataFields[18]\r\n#define JITTER_SPEED      u_aDataFields[19]\r\n#define SLANT_GRADIENT    u_aDataFields[20]\r\n\r\nconst int EASE_METHOD_COUNT = 15;\r\n#define EASE_NONE         0\r\n#define EASE_LINEAR       1\r\n#define EASE_QUADRATIC    2\r\n#define EASE_CUBIC        3\r\n#define EASE_QUARTIC      4\r\n#define EASE_QUINTIC      5\r\n#define EASE_SINE         6\r\n#define EASE_EXPONENTIAL  7\r\n#define EASE_CIRCULAR     8\r\n#define EASE_BACK         9\r\n#define EASE_ELASTIC     10\r\n#define EASE_BOUNCE      11\r\n#define EASE_CUSTOM_1    12\r\n#define EASE_CUSTOM_2    13\r\n#define EASE_CUSTOM_3    14\r\n\r\nconst float MAX_LINES = 1000.0; //Change __SCRIBBLE_MAX_LINES in scribble_init() if you change this value!\r\n\r\nconst int WINDOW_COUNT = 3;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Attributes, Varyings, and Uniforms\r\n\r\n\r\nattribute vec3  in_Position;     //{X, Y, Packed character & line index}\r\nattribute vec3  in_Normal;       //{dX, Sprite data, Bitpacked effect flags}\r\nattribute vec4  in_Colour;       //Colour. This attribute is used for sprite data if this character is a sprite\r\nattribute vec2  in_TextureCoord; //UVs\r\nattribute vec2  in_Colour2;      //{Scale, dY}\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec4  u_vColourBlend;                           //4\r\nuniform vec4  u_vGradient;                              //4\r\nuniform vec2  u_vSkew;                                  //2\r\nuniform vec2  u_vRegionActive;                          //2\r\nuniform vec4  u_vRegionColour;                          //4\r\nuniform float u_fTime;                                  //1\r\nuniform float u_aDataFields[MAX_ANIM_FIELDS];           //21\r\nuniform vec2  u_aBezier[3];                             //6\r\nuniform float u_fBlinkState;                            //1\r\n\r\nuniform int   u_iTypewriterUseLines;                    //1\r\nuniform int   u_iTypewriterMethod;                      //1\r\nuniform int   u_iTypewriterCharMax;                     //1\r\nuniform float u_fTypewriterWindowArray[2*WINDOW_COUNT]; //6\r\nuniform float u_fTypewriterSmoothness;                  //1\r\nuniform vec2  u_vTypewriterStartPos;                    //2\r\nuniform vec2  u_vTypewriterStartScale;                  //2\r\nuniform float u_fTypewriterStartRotation;               //1\r\nuniform float u_fTypewriterAlphaDuration;               //1\r\n\r\nfloat flagArray[MAX_EFFECTS];\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Functions\r\n// Scroll all the way down to see the main() function for the vertex shader\r\n\r\n//*That* randomisation function.\r\n//I haven't found a better method yet, and this is sufficient for our purposes\r\nfloat rand(vec2 co)\r\n{\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\n//Rotate by vector\r\nvec2 rotate_by_vector(vec2 position, vec2 centre, vec2 vector)\r\n{\r\n    //Normally I'd do this with a mat2() but for some reason this had issues cross-platform\r\n    vec2 delta = position - centre;\r\n    return centre + vec2(delta.x*vector.x - delta.y*vector.y, delta.x*vector.y + delta.y*vector.x);\r\n}\r\n\r\n//Rotate the character\r\nvec2 rotate(vec2 position, vec2 centre, float angle)\r\n{\r\n    return rotate_by_vector(position, centre, vec2(cos(0.00872664625*angle), -sin(0.00872664625*angle)));\r\n}\r\n\r\n//Scale the character\r\nvec2 scale(vec2 position, vec2 centre, float scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\nvec2 scale(vec2 position, vec2 centre, vec2 scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\n//Oscillate the character\r\nvec2 wave(vec2 position, float characterIndex)\r\n{\r\n    return vec2(position.x, position.y + WAVE_FLAG*WAVE_AMPLITUDE*sin(WAVE_FREQUENCY*characterIndex + WAVE_SPEED*u_fTime));\r\n}\r\n\r\n//Wheel the character around\r\nvec2 wheel(vec2 position, float characterIndex)\r\n{\r\n    float time = WHEEL_FREQUENCY*characterIndex + WHEEL_SPEED*u_fTime;\r\n    return position.xy + WHEEL_FLAG*WHEEL_AMPLITUDE*vec2(cos(time), -sin(time));\r\n}\r\n\r\n//Wobble the character by rotating around its central point\r\nvec2 wobble(vec2 position, vec2 centre)\r\n{\r\n    return rotate(position, centre, WOBBLE_FLAG*WOBBLE_ANGLE*sin(WOBBLE_FREQUENCY*u_fTime));\r\n}\r\n\r\n//Pulse the character by scaling it up and down\r\nvec2 pulse(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float adjustedScale = 1.0 +  PULSE_FLAG*PULSE_SCALE*(0.5 + 0.5*sin(PULSE_SPEED*(250.0*characterIndex + u_fTime)));\r\n    return scale(position, centre, adjustedScale);\r\n}\r\n\r\n//Shake the character along the x/y axes\r\n//We use integer time steps so that at low speeds characters don't jump around too much\r\n//Lots of magic numbers in here to try to get a nice-looking shake\r\nvec2 shake(vec2 position, float characterIndex)\r\n{\r\n    float time = SHAKE_SPEED*u_fTime + 0.5;\r\n    float floorTime = floor(time);\r\n    float merge = 1.0 - abs(2.0*(time - floorTime) - 1.0);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking shake\r\n    vec2 delta = vec2(rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0)),\r\n                      rand(vec2(characterIndex/501.0 - floorTime/19.0, characterIndex/701.0 + floorTime/317.0)));\r\n    \r\n    return position + SHAKE_FLAG*SHAKE_AMPLITUDE*merge*(2.0*delta - 1.0);\r\n}\r\n\r\n//Jitter the character scale, using a similar method to above\r\nvec2 jitter(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float floorTime = floor(JITTER_SPEED*u_fTime + 0.5);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking jitter\r\n    float delta = rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0));\r\n    \r\n    return scale(position, centre, mix(JITTER_MINIMUM, JITTER_MAXIMUM, delta));\r\n}\r\n\r\nfloat filterSprite(float spriteData)\r\n{\r\n    float imageSpeed = floor(spriteData / 4096.0);\r\n    float imageMax   = floor((spriteData - 4096.0*imageSpeed) / 64.0);\r\n    float image      = spriteData - (4096.0*imageSpeed + 64.0*imageMax);\r\n    \r\n    float displayImage = floor(mod(imageSpeed*u_fTime/1024.0, imageMax));\r\n    return ((abs(image-displayImage) < 1.0/255.0)? 1.0 : 0.0);\r\n}\r\n\r\n//HSV->RGB conversion function\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 P = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(P - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\n//Colour cycling for the rainbow effect\r\nvec4 rainbow(float characterIndex, vec4 colour)\r\n{\r\n    return vec4(mix(colour.rgb, hsv2rgb(vec3(0.02*characterIndex + RAINBOW_SPEED*u_fTime, 1.0, 1.0)), RAINBOW_FLAG*RAINBOW_WEIGHT), colour.a);\r\n}\r\n                           \r\n//Colour cycling through a defined palette\r\nvec4 cycle(float characterIndex, vec4 colour)\r\n{\r\n    float max_h = 4.0; //Default to a 4-colour cycle\r\n    \r\n    //Special cases for 0- and 1-colour cycles\r\n    if (colour.r < 0.003) return colour;\r\n    if (colour.g < 0.003) return vec4(hsv2rgb(vec3(colour.r, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0)), 1.0);\r\n    if (colour.a < 0.003) max_h = 3.0; //3-colour cycle\r\n    if (colour.b < 0.003) max_h = 2.0; //2-colour cycle\r\n    \r\n    float h = abs(mod((CYCLE_SPEED*u_fTime - characterIndex)/10.0, max_h));\r\n    \r\n    //vec3 rgbA = hsv2rgb(vec3(colour[int(h)], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    //vec3 rgbB = hsv2rgb(vec3(colour[int(mod(h + 1.0, max_h))], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    // rgbA\r\n    int ih = int(h); // int h\r\n    float c1 = 0.0; // colour 1\r\n    if (ih == 0) c1 = colour[0];\r\n    else if (ih == 1) c1 = colour[1];\r\n    else if (ih == 2) c1 = colour[2];\r\n    else if (ih == 3) c1 = colour[3];\r\n    \r\n    // rgbB\r\n    int ih2 = int(mod(h + 1.0, max_h)); // int h 2\r\n    float c2 = 0.0; // colour 2\r\n    if (ih2 == 0) c2 = colour[0];\r\n    else if (ih2 == 1) c2 = colour[1];\r\n    else if (ih2 == 2) c2 = colour[2];\r\n    else if (ih2 == 3) c2 = colour[3];\r\n    \r\n    vec3 rgbA = hsv2rgb(vec3(c1, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    vec3 rgbB = hsv2rgb(vec3(c2, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    return vec4(mix(rgbA, rgbB, fract(h)), 1.0);\r\n}\r\n\r\n//Fade effect for typewriter etc.\r\nfloat fade(float windowArray[2*WINDOW_COUNT], float smoothness, float index, bool invert)\r\n{\r\n    float result = 0.0;\r\n    float f      = 1.0;\r\n    float head   = 0.0;\r\n    float tail   = 0.0;\r\n    \r\n    for(int i = 0; i < 2*WINDOW_COUNT; i += 2)\r\n    {\r\n        head = windowArray[i  ];\r\n        tail = windowArray[i+1];\r\n        \r\n        if (u_fTypewriterSmoothness > 0.0)\r\n        {\r\n            f = 1.0 - min(max((index - tail) / smoothness, 0.0), 1.0);\r\n        }\r\n        else\r\n        {\r\n            f = 1.0;\r\n        }\r\n        \r\n        f *= step(index, head);\r\n        \r\n        result = max(f, result);\r\n    }\r\n    \r\n    if (invert) result = 1.0 - result;\r\n    \r\n    return result;\r\n}\r\n\r\nvec2 bezier(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*t*p1 + 3.0*inv_t*t*t*p2 + t*t*t*p3;\r\n}\r\n\r\nvec2 bezierDerivative(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*p1 + 6.0*inv_t*t*(p2 - p1) + 3.0*t*t*(p3 - p2);\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nfloat easeQuad(float time)\r\n{\r\n    return time*time;\r\n}\r\n\r\nfloat easeCubic(float time)\r\n{\r\n    return time*time*time;\r\n}\r\n\r\nfloat easeQuart(float time)\r\n{\r\n    return time*time*time*time;\r\n}\r\n\r\nfloat easeQuint(float time)\r\n{\r\n    return time*time*time*time*time;\r\n}\r\n\r\nfloat easeSine(float time)\r\n{\r\n    return 1.0 - cos(0.5*(time*PI));\r\n}\r\n\r\nfloat easeExpo(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    return pow(2.0, 10.0*time - 10.0);\r\n}\r\n\r\nfloat easeCirc(float time)\r\n{\r\n    return 1.0 - sqrt(1.0 - time*time);\r\n}\r\n\r\nfloat easeBack(float time)\r\n{\r\n    float param = 1.70158;\r\n    return time*time*((param + 1.0)*time - param);\r\n}\r\n\r\nfloat easeElastic(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    if (time == 1.0) return 1.0;\r\n    return -pow(2.0, 10.0*time - 10.0) * sin((time*10.0 - 10.75) * (2.0*PI) / 3.0);\r\n}\r\n\r\nfloat easeBounce(float time)\r\n{\r\n    float n1 = 7.5625;\r\n    float d1 = 2.75;\r\n    \r\n    time = 1.0 - time;\r\n    \r\n    if (time < 1.0 / d1)\r\n    {\r\n        return 1.0 - n1*time*time;\r\n    }\r\n    else if (time < 2.0 / d1)\r\n    {\r\n        time -= 1.5/d1;\r\n        return 1.0 - (n1*time*time + 0.75);\r\n    }\r\n    else if (time < 2.5 / d1)\r\n    {\r\n        time -= 2.25/d1;\r\n        return 1.0 - (n1*time*time + 0.9375);\r\n    }\r\n    else\r\n    {\r\n        time -= 2.625/d1;\r\n        return 1.0 - (n1*time*time + 0.984375);\r\n    }\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    //Unpack character/line index\r\n    float characterIndex = floor(in_Position.z / MAX_LINES);\r\n    float lineIndex      = in_Position.z - characterIndex*MAX_LINES;\r\n    \r\n    //MAX_EFFECTS = 11\r\n    float flagValue = in_Normal.z;\r\n    float edge;\r\n    edge = step(1024.0, flagValue); flagArray[10] = edge; flagValue -= 1024.0*edge;\r\n    edge = step( 512.0, flagValue); flagArray[ 9] = edge; flagValue -=  512.0*edge;\r\n    edge = step( 256.0, flagValue); flagArray[ 8] = edge; flagValue -=  256.0*edge;\r\n    edge = step( 128.0, flagValue); flagArray[ 7] = edge; flagValue -=  128.0*edge;\r\n    edge = step(  64.0, flagValue); flagArray[ 6] = edge; flagValue -=   64.0*edge;\r\n    edge = step(  32.0, flagValue); flagArray[ 5] = edge; flagValue -=   32.0*edge;\r\n    edge = step(  16.0, flagValue); flagArray[ 4] = edge; flagValue -=   16.0*edge;\r\n    edge = step(   8.0, flagValue); flagArray[ 3] = edge; flagValue -=    8.0*edge;\r\n    edge = step(   4.0, flagValue); flagArray[ 2] = edge; flagValue -=    4.0*edge;\r\n    edge = step(   2.0, flagValue); flagArray[ 1] = edge; flagValue -=    2.0*edge;\r\n    edge = step(   1.0, flagValue); flagArray[ 0] = edge; flagValue -=    1.0*edge;\r\n    \r\n    \r\n    \r\n    //Use the input vertex position from the vertex attributes. We ignore the z-component because it's used for other data\r\n    vec2 pos = in_Position.xy;\r\n    \r\n    \r\n    \r\n    //Unpack the glyph centre\r\n    vec2 centreDelta = vec2(in_Normal.x, in_Colour2.y);\r\n    \r\n    \r\n    \r\n    vec2 centre;\r\n    \r\n    //If we have a valid Bezier curve, apply it\r\n    if ((u_aBezier[2].x != 0.0) || (u_aBezier[2].y != 0.0))\r\n    {\r\n        centre = bezier(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        \r\n        vec2 orientation = bezierDerivative(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        pos = rotate_by_vector(centre - centreDelta, centre, normalize(orientation));\r\n        \r\n        vec2 perpendicular = normalize(vec2(-u_aBezier[2].y, u_aBezier[2].x));\r\n        pos += in_Position.y*perpendicular;\r\n    }\r\n    else\r\n    {\r\n        centre = pos + centreDelta;\r\n    }\r\n    \r\n    pos += u_vSkew*centre.yx;\r\n    if (SLANT_FLAG > 0.5) pos.x += centreDelta.y*SLANT_GRADIENT;\r\n    \r\n    \r\n    \r\n    //Colour\r\n    v_vColour = in_Colour;\r\n    \r\n    if (CYCLE_FLAG > 0.5) v_vColour = cycle(characterIndex, v_vColour); //Cycle colours through the defined palette\r\n    v_vColour = rainbow(characterIndex, v_vColour); //Cycle colours for the rainbow effect\r\n    \r\n    //Apply the gradient effect\r\n    if (pos.y > centre.y) v_vColour.rgb = mix(v_vColour.rgb, u_vGradient.rgb, u_vGradient.a);\r\n    \r\n    if (!BLEND_SPRITES && (SPRITE_FLAG > 0.5))\r\n    {\r\n        //If we're not RGB blending sprites and this *is* a sprite then only modify the alpha channel\r\n        v_vColour.a *= u_vColourBlend.a;\r\n    }\r\n    else\r\n    {\r\n        //And then blend with the blend colour/alpha\r\n        v_vColour *= u_vColourBlend;\r\n    }\r\n    \r\n    if (SPRITE_FLAG > 0.5) v_vColour.a *= filterSprite(in_Normal.y); //Use packed sprite data to filter out sprite frames that we don't want\r\n    if ((BLINK_FLAG > 0.5) && (u_fBlinkState < 0.5)) v_vColour.a = 0.0;\r\n    \r\n    //Regions\r\n    if ((characterIndex >= u_vRegionActive.x) && (characterIndex <= u_vRegionActive.y)) v_vColour.rgb = mix(v_vColour.rgb, u_vRegionColour.rgb, u_vRegionColour.a);\r\n    \r\n    \r\n    \r\n    //Vertex animation\r\n    pos.xy = wobble(pos, centre);\r\n    pos.xy = pulse( pos, centre, characterIndex);\r\n    if (JITTER_FLAG > 0.5) pos.xy = jitter(pos, centre, characterIndex); //Apply the jitter effect\r\n    \r\n    \r\n    \r\n    //Apply fade (if we're given a method)\r\n    int easeMethod = u_iTypewriterMethod;\r\n    bool fadeOut = (easeMethod >= EASE_METHOD_COUNT);\r\n    if (fadeOut) easeMethod -= EASE_METHOD_COUNT;\r\n    \r\n    if (easeMethod > EASE_NONE)\r\n    {\r\n        float fadeIndex = ((u_iTypewriterUseLines > 0)? lineIndex : characterIndex) + 1.0;\r\n        if (u_iTypewriterCharMax > 0) fadeIndex = float(u_iTypewriterCharMax) - fadeIndex;\r\n        \r\n        float time = fade(u_fTypewriterWindowArray, u_fTypewriterSmoothness, fadeIndex, fadeOut);\r\n        \r\n        if (u_fTypewriterAlphaDuration == 0.0)\r\n        {\r\n            if (time <= 0.0) v_vColour.a = 0.0;\r\n        }\r\n        else\r\n        {\r\n            v_vColour.a *= clamp(time / u_fTypewriterAlphaDuration, 0.0, 1.0);\r\n        }\r\n             if (easeMethod == EASE_QUADRATIC  ) { time = 1.0 - easeQuad(   1.0 - time); }\r\n        else if (easeMethod == EASE_CUBIC      ) { time = 1.0 - easeCubic(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUARTIC    ) { time = 1.0 - easeQuart(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUINTIC    ) { time = 1.0 - easeQuint(  1.0 - time); }\r\n        else if (easeMethod == EASE_SINE       ) { time = 1.0 - easeSine(   1.0 - time); }\r\n        else if (easeMethod == EASE_EXPONENTIAL) { time = 1.0 - easeExpo(   1.0 - time); }\r\n        else if (easeMethod == EASE_CIRCULAR   ) { time = 1.0 - easeCirc(   1.0 - time); }\r\n        else if (easeMethod == EASE_BACK       ) { time = 1.0 - easeBack(   1.0 - time); }\r\n        else if (easeMethod == EASE_ELASTIC    ) { time = 1.0 - easeElastic(1.0 - time); }\r\n        else if (easeMethod == EASE_BOUNCE     ) { time = 1.0 - easeBounce( 1.0 - time); }\r\n        else if (easeMethod == EASE_CUSTOM_1   ) { /*Custom ease slot 1*/ }\r\n        else if (easeMethod == EASE_CUSTOM_2   ) { /*Custom ease slot 2*/ }\r\n        else if (easeMethod == EASE_CUSTOM_3   ) { /*Custom ease slot 3*/ }\r\n        \r\n        pos = scale(pos, centre, mix(u_vTypewriterStartScale, vec2(1.0), time));\r\n        pos = rotate(pos, centre, mix(-u_fTypewriterStartRotation, 0.0, time));\r\n        pos.xy += mix(u_vTypewriterStartPos, vec2(0.0), time);\r\n    }\r\n    \r\n    \r\n    \r\n    //Vertex\r\n    pos.xy = wave( pos, characterIndex); //Apply the wave effect\r\n    pos.xy = wheel(pos, characterIndex); //Apply the wheel effect\r\n    pos.xy = shake(pos, characterIndex); //Apply the shake effect\r\n    \r\n    \r\n    \r\n    //Final positioning\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION]*vec4(pos, 0.0, 1.0);\r\n    \r\n    \r\n    \r\n    //Texture\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//   @jujuadams   v8.0.0   2020-03-16\r\nprecision highp float;\r\n\r\n#define PREMULTIPLY_ALPHA false\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec4 u_vFlash;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour*texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, u_vFlash.rgb, u_vFlash.a);\r\n    \r\n    if (PREMULTIPLY_ALPHA)\r\n    {\r\n        gl_FragColor.rgb *= gl_FragColor.a;\r\n    }\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2021-12-15\r\nprecision highp float;\r\n\r\n#define BLEND_SPRITES true\r\n\r\nconst int MAX_EFFECTS = 11;\r\n#define SPRITE_FLAG   flagArray[ 0]\r\n#define WAVE_FLAG     flagArray[ 1]\r\n#define SHAKE_FLAG    flagArray[ 2]\r\n#define RAINBOW_FLAG  flagArray[ 3]\r\n#define WOBBLE_FLAG   flagArray[ 4]\r\n#define PULSE_FLAG    flagArray[ 5]\r\n#define WHEEL_FLAG    flagArray[ 6]\r\n#define CYCLE_FLAG    flagArray[ 7]\r\n#define JITTER_FLAG   flagArray[ 8]\r\n#define BLINK_FLAG    flagArray[ 9]\r\n#define SLANT_FLAG    flagArray[10]\r\n\r\nconst int MAX_ANIM_FIELDS = 21;\r\n#define WAVE_AMPLITUDE    u_aDataFields[ 0]\r\n#define WAVE_FREQUENCY    u_aDataFields[ 1]\r\n#define WAVE_SPEED        u_aDataFields[ 2]\r\n#define SHAKE_AMPLITUDE   u_aDataFields[ 3]\r\n#define SHAKE_SPEED       u_aDataFields[ 4]\r\n#define RAINBOW_WEIGHT    u_aDataFields[ 5]\r\n#define RAINBOW_SPEED     u_aDataFields[ 6]\r\n#define WOBBLE_ANGLE      u_aDataFields[ 7]\r\n#define WOBBLE_FREQUENCY  u_aDataFields[ 8]\r\n#define PULSE_SCALE       u_aDataFields[ 9]\r\n#define PULSE_SPEED       u_aDataFields[10]\r\n#define WHEEL_AMPLITUDE   u_aDataFields[11]\r\n#define WHEEL_FREQUENCY   u_aDataFields[12]\r\n#define WHEEL_SPEED       u_aDataFields[13]\r\n#define CYCLE_SPEED       u_aDataFields[14]\r\n#define CYCLE_SATURATION  u_aDataFields[15]\r\n#define CYCLE_VALUE       u_aDataFields[16]\r\n#define JITTER_MINIMUM    u_aDataFields[17]\r\n#define JITTER_MAXIMUM    u_aDataFields[18]\r\n#define JITTER_SPEED      u_aDataFields[19]\r\n#define SLANT_GRADIENT    u_aDataFields[20]\r\n\r\nconst int EASE_METHOD_COUNT = 15;\r\n#define EASE_NONE         0\r\n#define EASE_LINEAR       1\r\n#define EASE_QUADRATIC    2\r\n#define EASE_CUBIC        3\r\n#define EASE_QUARTIC      4\r\n#define EASE_QUINTIC      5\r\n#define EASE_SINE         6\r\n#define EASE_EXPONENTIAL  7\r\n#define EASE_CIRCULAR     8\r\n#define EASE_BACK         9\r\n#define EASE_ELASTIC     10\r\n#define EASE_BOUNCE      11\r\n#define EASE_CUSTOM_1    12\r\n#define EASE_CUSTOM_2    13\r\n#define EASE_CUSTOM_3    14\r\n\r\nconst float MAX_LINES = 1000.0; //Change __SCRIBBLE_MAX_LINES in scribble_init() if you change this value!\r\n\r\nconst int WINDOW_COUNT = 3;\r\n\r\nconst float PI = 3.14159265359;\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Attributes, Varyings, and Uniforms\r\n\r\n\r\nattribute vec3  in_Position;     //{X, Y, Packed character & line index}\r\nattribute vec3  in_Normal;       //{dX, Sprite data, Bitpacked effect flags}\r\nattribute vec4  in_Colour;       //Colour. This attribute is used for sprite data if this character is a sprite\r\nattribute vec2  in_TextureCoord; //UVs\r\nattribute vec2  in_Colour2;      //{Scale, dY}\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec4  u_vColourBlend;                           //4\r\nuniform vec4  u_vGradient;                              //4\r\nuniform vec2  u_vSkew;                                  //2\r\nuniform vec2  u_vRegionActive;                          //2\r\nuniform vec4  u_vRegionColour;                          //4\r\nuniform float u_fTime;                                  //1\r\nuniform float u_aDataFields[MAX_ANIM_FIELDS];           //21\r\nuniform vec2  u_aBezier[3];                             //6\r\nuniform float u_fBlinkState;                            //1\r\n\r\nuniform int   u_iTypewriterUseLines;                    //1\r\nuniform int   u_iTypewriterMethod;                      //1\r\nuniform int   u_iTypewriterCharMax;                     //1\r\nuniform float u_fTypewriterWindowArray[2*WINDOW_COUNT]; //6\r\nuniform float u_fTypewriterSmoothness;                  //1\r\nuniform vec2  u_vTypewriterStartPos;                    //2\r\nuniform vec2  u_vTypewriterStartScale;                  //2\r\nuniform float u_fTypewriterStartRotation;               //1\r\nuniform float u_fTypewriterAlphaDuration;               //1\r\n\r\nfloat flagArray[MAX_EFFECTS];\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n// Functions\r\n// Scroll all the way down to see the main() function for the vertex shader\r\n\r\n//*That* randomisation function.\r\n//I haven't found a better method yet, and this is sufficient for our purposes\r\nfloat rand(vec2 co)\r\n{\r\n    return fract(sin(dot(co.xy ,vec2(12.9898,78.233))) * 43758.5453);\r\n}\r\n\r\n//Rotate by vector\r\nvec2 rotate_by_vector(vec2 position, vec2 centre, vec2 vector)\r\n{\r\n    //Normally I'd do this with a mat2() but for some reason this had issues cross-platform\r\n    vec2 delta = position - centre;\r\n    return centre + vec2(delta.x*vector.x - delta.y*vector.y, delta.x*vector.y + delta.y*vector.x);\r\n}\r\n\r\n//Rotate the character\r\nvec2 rotate(vec2 position, vec2 centre, float angle)\r\n{\r\n    return rotate_by_vector(position, centre, vec2(cos(0.00872664625*angle), -sin(0.00872664625*angle)));\r\n}\r\n\r\n//Scale the character\r\nvec2 scale(vec2 position, vec2 centre, float scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\nvec2 scale(vec2 position, vec2 centre, vec2 scale)\r\n{\r\n    return centre + scale*(position - centre);\r\n}\r\n\r\n//Oscillate the character\r\nvec2 wave(vec2 position, float characterIndex)\r\n{\r\n    return vec2(position.x, position.y + WAVE_FLAG*WAVE_AMPLITUDE*sin(WAVE_FREQUENCY*characterIndex + WAVE_SPEED*u_fTime));\r\n}\r\n\r\n//Wheel the character around\r\nvec2 wheel(vec2 position, float characterIndex)\r\n{\r\n    float time = WHEEL_FREQUENCY*characterIndex + WHEEL_SPEED*u_fTime;\r\n    return position.xy + WHEEL_FLAG*WHEEL_AMPLITUDE*vec2(cos(time), -sin(time));\r\n}\r\n\r\n//Wobble the character by rotating around its central point\r\nvec2 wobble(vec2 position, vec2 centre)\r\n{\r\n    return rotate(position, centre, WOBBLE_FLAG*WOBBLE_ANGLE*sin(WOBBLE_FREQUENCY*u_fTime));\r\n}\r\n\r\n//Pulse the character by scaling it up and down\r\nvec2 pulse(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float adjustedScale = 1.0 +  PULSE_FLAG*PULSE_SCALE*(0.5 + 0.5*sin(PULSE_SPEED*(250.0*characterIndex + u_fTime)));\r\n    return scale(position, centre, adjustedScale);\r\n}\r\n\r\n//Shake the character along the x/y axes\r\n//We use integer time steps so that at low speeds characters don't jump around too much\r\n//Lots of magic numbers in here to try to get a nice-looking shake\r\nvec2 shake(vec2 position, float characterIndex)\r\n{\r\n    float time = SHAKE_SPEED*u_fTime + 0.5;\r\n    float floorTime = floor(time);\r\n    float merge = 1.0 - abs(2.0*(time - floorTime) - 1.0);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking shake\r\n    vec2 delta = vec2(rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0)),\r\n                      rand(vec2(characterIndex/501.0 - floorTime/19.0, characterIndex/701.0 + floorTime/317.0)));\r\n    \r\n    return position + SHAKE_FLAG*SHAKE_AMPLITUDE*merge*(2.0*delta - 1.0);\r\n}\r\n\r\n//Jitter the character scale, using a similar method to above\r\nvec2 jitter(vec2 position, vec2 centre, float characterIndex)\r\n{\r\n    float floorTime = floor(JITTER_SPEED*u_fTime + 0.5);\r\n    \r\n    //Use some misc prime numbers to try to get a varied-looking jitter\r\n    float delta = rand(vec2(characterIndex/149.0 + floorTime/13.0, characterIndex/727.0 - floorTime/331.0));\r\n    \r\n    return scale(position, centre, mix(JITTER_MINIMUM, JITTER_MAXIMUM, delta));\r\n}\r\n\r\nfloat filterSprite(float spriteData)\r\n{\r\n    float imageSpeed = floor(spriteData / 4096.0);\r\n    float imageMax   = floor((spriteData - 4096.0*imageSpeed) / 64.0);\r\n    float image      = spriteData - (4096.0*imageSpeed + 64.0*imageMax);\r\n    \r\n    float displayImage = floor(mod(imageSpeed*u_fTime/1024.0, imageMax));\r\n    return ((abs(image-displayImage) < 1.0/255.0)? 1.0 : 0.0);\r\n}\r\n\r\n//HSV->RGB conversion function\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 P = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(P - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\n//Colour cycling for the rainbow effect\r\nvec4 rainbow(float characterIndex, vec4 colour)\r\n{\r\n    return vec4(mix(colour.rgb, hsv2rgb(vec3(0.02*characterIndex + RAINBOW_SPEED*u_fTime, 1.0, 1.0)), RAINBOW_FLAG*RAINBOW_WEIGHT), colour.a);\r\n}\r\n                           \r\n//Colour cycling through a defined palette\r\nvec4 cycle(float characterIndex, vec4 colour)\r\n{\r\n    float max_h = 4.0; //Default to a 4-colour cycle\r\n    \r\n    //Special cases for 0- and 1-colour cycles\r\n    if (colour.r < 0.003) return colour;\r\n    if (colour.g < 0.003) return vec4(hsv2rgb(vec3(colour.r, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0)), 1.0);\r\n    if (colour.a < 0.003) max_h = 3.0; //3-colour cycle\r\n    if (colour.b < 0.003) max_h = 2.0; //2-colour cycle\r\n    \r\n    float h = abs(mod((CYCLE_SPEED*u_fTime - characterIndex)/10.0, max_h));\r\n    \r\n    //vec3 rgbA = hsv2rgb(vec3(colour[int(h)], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    //vec3 rgbB = hsv2rgb(vec3(colour[int(mod(h + 1.0, max_h))], CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    // rgbA\r\n    int ih = int(h); // int h\r\n    float c1 = 0.0; // colour 1\r\n    if (ih == 0) c1 = colour[0];\r\n    else if (ih == 1) c1 = colour[1];\r\n    else if (ih == 2) c1 = colour[2];\r\n    else if (ih == 3) c1 = colour[3];\r\n    \r\n    // rgbB\r\n    int ih2 = int(mod(h + 1.0, max_h)); // int h 2\r\n    float c2 = 0.0; // colour 2\r\n    if (ih2 == 0) c2 = colour[0];\r\n    else if (ih2 == 1) c2 = colour[1];\r\n    else if (ih2 == 2) c2 = colour[2];\r\n    else if (ih2 == 3) c2 = colour[3];\r\n    \r\n    vec3 rgbA = hsv2rgb(vec3(c1, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    vec3 rgbB = hsv2rgb(vec3(c2, CYCLE_SATURATION/255.0, CYCLE_VALUE/255.0));\r\n    \r\n    return vec4(mix(rgbA, rgbB, fract(h)), 1.0);\r\n}\r\n\r\n//Fade effect for typewriter etc.\r\nfloat fade(float windowArray[2*WINDOW_COUNT], float smoothness, float index, bool invert)\r\n{\r\n    float result = 0.0;\r\n    float f      = 1.0;\r\n    float head   = 0.0;\r\n    float tail   = 0.0;\r\n    \r\n    for(int i = 0; i < 2*WINDOW_COUNT; i += 2)\r\n    {\r\n        head = windowArray[i  ];\r\n        tail = windowArray[i+1];\r\n        \r\n        if (u_fTypewriterSmoothness > 0.0)\r\n        {\r\n            f = 1.0 - min(max((index - tail) / smoothness, 0.0), 1.0);\r\n        }\r\n        else\r\n        {\r\n            f = 1.0;\r\n        }\r\n        \r\n        f *= step(index, head);\r\n        \r\n        result = max(f, result);\r\n    }\r\n    \r\n    if (invert) result = 1.0 - result;\r\n    \r\n    return result;\r\n}\r\n\r\nvec2 bezier(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*t*p1 + 3.0*inv_t*t*t*p2 + t*t*t*p3;\r\n}\r\n\r\nvec2 bezierDerivative(float t, vec2 p1, vec2 p2, vec2 p3)\r\n{\r\n    float inv_t = 1.0 - t;\r\n    return 3.0*inv_t*inv_t*p1 + 6.0*inv_t*t*(p2 - p1) + 3.0*t*t*(p3 - p2);\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nfloat easeQuad(float time)\r\n{\r\n    return time*time;\r\n}\r\n\r\nfloat easeCubic(float time)\r\n{\r\n    return time*time*time;\r\n}\r\n\r\nfloat easeQuart(float time)\r\n{\r\n    return time*time*time*time;\r\n}\r\n\r\nfloat easeQuint(float time)\r\n{\r\n    return time*time*time*time*time;\r\n}\r\n\r\nfloat easeSine(float time)\r\n{\r\n    return 1.0 - cos(0.5*(time*PI));\r\n}\r\n\r\nfloat easeExpo(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    return pow(2.0, 10.0*time - 10.0);\r\n}\r\n\r\nfloat easeCirc(float time)\r\n{\r\n    return 1.0 - sqrt(1.0 - time*time);\r\n}\r\n\r\nfloat easeBack(float time)\r\n{\r\n    float param = 1.70158;\r\n    return time*time*((param + 1.0)*time - param);\r\n}\r\n\r\nfloat easeElastic(float time)\r\n{\r\n    if (time == 0.0) return 0.0;\r\n    if (time == 1.0) return 1.0;\r\n    return -pow(2.0, 10.0*time - 10.0) * sin((time*10.0 - 10.75) * (2.0*PI) / 3.0);\r\n}\r\n\r\nfloat easeBounce(float time)\r\n{\r\n    float n1 = 7.5625;\r\n    float d1 = 2.75;\r\n    \r\n    time = 1.0 - time;\r\n    \r\n    if (time < 1.0 / d1)\r\n    {\r\n        return 1.0 - n1*time*time;\r\n    }\r\n    else if (time < 2.0 / d1)\r\n    {\r\n        time -= 1.5/d1;\r\n        return 1.0 - (n1*time*time + 0.75);\r\n    }\r\n    else if (time < 2.5 / d1)\r\n    {\r\n        time -= 2.25/d1;\r\n        return 1.0 - (n1*time*time + 0.9375);\r\n    }\r\n    else\r\n    {\r\n        time -= 2.625/d1;\r\n        return 1.0 - (n1*time*time + 0.984375);\r\n    }\r\n}\r\n\r\n\r\n\r\n//--------------------------------------------------------------------------------------------------------\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    //Unpack character/line index\r\n    float characterIndex = floor(in_Position.z / MAX_LINES);\r\n    float lineIndex      = in_Position.z - characterIndex*MAX_LINES;\r\n    \r\n    //MAX_EFFECTS = 11\r\n    float flagValue = in_Normal.z;\r\n    float edge;\r\n    edge = step(1024.0, flagValue); flagArray[10] = edge; flagValue -= 1024.0*edge;\r\n    edge = step( 512.0, flagValue); flagArray[ 9] = edge; flagValue -=  512.0*edge;\r\n    edge = step( 256.0, flagValue); flagArray[ 8] = edge; flagValue -=  256.0*edge;\r\n    edge = step( 128.0, flagValue); flagArray[ 7] = edge; flagValue -=  128.0*edge;\r\n    edge = step(  64.0, flagValue); flagArray[ 6] = edge; flagValue -=   64.0*edge;\r\n    edge = step(  32.0, flagValue); flagArray[ 5] = edge; flagValue -=   32.0*edge;\r\n    edge = step(  16.0, flagValue); flagArray[ 4] = edge; flagValue -=   16.0*edge;\r\n    edge = step(   8.0, flagValue); flagArray[ 3] = edge; flagValue -=    8.0*edge;\r\n    edge = step(   4.0, flagValue); flagArray[ 2] = edge; flagValue -=    4.0*edge;\r\n    edge = step(   2.0, flagValue); flagArray[ 1] = edge; flagValue -=    2.0*edge;\r\n    edge = step(   1.0, flagValue); flagArray[ 0] = edge; flagValue -=    1.0*edge;\r\n    \r\n    \r\n    \r\n    //Use the input vertex position from the vertex attributes. We ignore the z-component because it's used for other data\r\n    vec2 pos = in_Position.xy;\r\n    \r\n    \r\n    \r\n    //Unpack the glyph centre\r\n    vec2 centreDelta = vec2(in_Normal.x, in_Colour2.y);\r\n    \r\n    \r\n    \r\n    vec2 centre;\r\n    \r\n    //If we have a valid Bezier curve, apply it\r\n    if ((u_aBezier[2].x != 0.0) || (u_aBezier[2].y != 0.0))\r\n    {\r\n        centre = bezier(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        \r\n        vec2 orientation = bezierDerivative(in_Position.x, u_aBezier[0], u_aBezier[1], u_aBezier[2]);\r\n        pos = rotate_by_vector(centre - centreDelta, centre, normalize(orientation));\r\n        \r\n        vec2 perpendicular = normalize(vec2(-u_aBezier[2].y, u_aBezier[2].x));\r\n        pos += in_Position.y*perpendicular;\r\n    }\r\n    else\r\n    {\r\n        centre = pos + centreDelta;\r\n    }\r\n    \r\n    pos += u_vSkew*centre.yx;\r\n    if (SLANT_FLAG > 0.5) pos.x += centreDelta.y*SLANT_GRADIENT;\r\n    \r\n    \r\n    \r\n    //Colour\r\n    v_vColour = in_Colour;\r\n    \r\n    if (CYCLE_FLAG > 0.5) v_vColour = cycle(characterIndex, v_vColour); //Cycle colours through the defined palette\r\n    v_vColour = rainbow(characterIndex, v_vColour); //Cycle colours for the rainbow effect\r\n    \r\n    //Apply the gradient effect\r\n    if (pos.y > centre.y) v_vColour.rgb = mix(v_vColour.rgb, u_vGradient.rgb, u_vGradient.a);\r\n    \r\n    if (!BLEND_SPRITES && (SPRITE_FLAG > 0.5))\r\n    {\r\n        //If we're not RGB blending sprites and this *is* a sprite then only modify the alpha channel\r\n        v_vColour.a *= u_vColourBlend.a;\r\n    }\r\n    else\r\n    {\r\n        //And then blend with the blend colour/alpha\r\n        v_vColour *= u_vColourBlend;\r\n    }\r\n    \r\n    if (SPRITE_FLAG > 0.5) v_vColour.a *= filterSprite(in_Normal.y); //Use packed sprite data to filter out sprite frames that we don't want\r\n    if ((BLINK_FLAG > 0.5) && (u_fBlinkState < 0.5)) v_vColour.a = 0.0;\r\n    \r\n    //Regions\r\n    if ((characterIndex >= u_vRegionActive.x) && (characterIndex <= u_vRegionActive.y)) v_vColour.rgb = mix(v_vColour.rgb, u_vRegionColour.rgb, u_vRegionColour.a);\r\n    \r\n    \r\n    \r\n    //Vertex animation\r\n    pos.xy = wobble(pos, centre);\r\n    pos.xy = pulse( pos, centre, characterIndex);\r\n    if (JITTER_FLAG > 0.5) pos.xy = jitter(pos, centre, characterIndex); //Apply the jitter effect\r\n    \r\n    \r\n    \r\n    //Apply fade (if we're given a method)\r\n    int easeMethod = u_iTypewriterMethod;\r\n    bool fadeOut = (easeMethod >= EASE_METHOD_COUNT);\r\n    if (fadeOut) easeMethod -= EASE_METHOD_COUNT;\r\n    \r\n    if (easeMethod > EASE_NONE)\r\n    {\r\n        float fadeIndex = ((u_iTypewriterUseLines > 0)? lineIndex : characterIndex) + 1.0;\r\n        if (u_iTypewriterCharMax > 0) fadeIndex = float(u_iTypewriterCharMax) - fadeIndex;\r\n        \r\n        float time = fade(u_fTypewriterWindowArray, u_fTypewriterSmoothness, fadeIndex, fadeOut);\r\n        \r\n        if (u_fTypewriterAlphaDuration == 0.0)\r\n        {\r\n            if (time <= 0.0) v_vColour.a = 0.0;\r\n        }\r\n        else\r\n        {\r\n            v_vColour.a *= clamp(time / u_fTypewriterAlphaDuration, 0.0, 1.0);\r\n        }\r\n             if (easeMethod == EASE_QUADRATIC  ) { time = 1.0 - easeQuad(   1.0 - time); }\r\n        else if (easeMethod == EASE_CUBIC      ) { time = 1.0 - easeCubic(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUARTIC    ) { time = 1.0 - easeQuart(  1.0 - time); }\r\n        else if (easeMethod == EASE_QUINTIC    ) { time = 1.0 - easeQuint(  1.0 - time); }\r\n        else if (easeMethod == EASE_SINE       ) { time = 1.0 - easeSine(   1.0 - time); }\r\n        else if (easeMethod == EASE_EXPONENTIAL) { time = 1.0 - easeExpo(   1.0 - time); }\r\n        else if (easeMethod == EASE_CIRCULAR   ) { time = 1.0 - easeCirc(   1.0 - time); }\r\n        else if (easeMethod == EASE_BACK       ) { time = 1.0 - easeBack(   1.0 - time); }\r\n        else if (easeMethod == EASE_ELASTIC    ) { time = 1.0 - easeElastic(1.0 - time); }\r\n        else if (easeMethod == EASE_BOUNCE     ) { time = 1.0 - easeBounce( 1.0 - time); }\r\n        else if (easeMethod == EASE_CUSTOM_1   ) { /*Custom ease slot 1*/ }\r\n        else if (easeMethod == EASE_CUSTOM_2   ) { /*Custom ease slot 2*/ }\r\n        else if (easeMethod == EASE_CUSTOM_3   ) { /*Custom ease slot 3*/ }\r\n        \r\n        pos = scale(pos, centre, mix(u_vTypewriterStartScale, vec2(1.0), time));\r\n        pos = rotate(pos, centre, mix(-u_fTypewriterStartRotation, 0.0, time));\r\n        pos.xy += mix(u_vTypewriterStartPos, vec2(0.0), time);\r\n    }\r\n    \r\n    \r\n    \r\n    //Vertex\r\n    pos.xy = wave( pos, characterIndex); //Apply the wave effect\r\n    pos.xy = wheel(pos, characterIndex); //Apply the wheel effect\r\n    pos.xy = shake(pos, characterIndex); //Apply the shake effect\r\n    \r\n    \r\n    \r\n    //Final positioning\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION]*vec4(pos, 0.0, 1.0);\r\n    \r\n    \r\n    \r\n    //Texture\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//   @jujuadams   v8.0.0   2020-03-16\r\nprecision highp float;\r\n\r\n#define PREMULTIPLY_ALPHA false\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec4 u_vFlash;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour*texture2D(gm_BaseTexture, v_vTexcoord);\r\n    gl_FragColor.rgb = mix(gl_FragColor.rgb, u_vFlash.rgb, u_vFlash.a);\r\n    \r\n    if (PREMULTIPLY_ALPHA)\r\n    {\r\n        gl_FragColor.rgb *= gl_FragColor.a;\r\n    }\r\n}\r\n",
        "Shader27",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n",
        "shd_3d_map_test",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float time;\r\nuniform float time_2;\r\nuniform float real_time;\r\n\r\nfloat time_max\t= 60.0;\r\nfloat time_max_half = time_max*.5;\r\nfloat z_max = 25.0;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    //gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n\tvec4 pos = gm_Matrices[MATRIX_WORLD] * object_space_pos;\r\n\t\r\n\t//object_space_pos.x = in_TextureCoord.y;\r\n\t//object_space_pos.y *= in_TextureCoord.y;\r\n\t/*\r\n\tif(in_TextureCoord.y < 0.5)\r\n\t{\r\n\t\t//object_space_pos.x+=time;\r\n\t\tmin(object_space_pos.y+=time,100.0);\r\n\t\tmin(object_space_pos.z+= time*.1,50.0);//min(time,50.)*.5;\r\n\t}//*/\r\n\t/*\r\n\tobject_space_pos.x += sin(in_TextureCoord.x*real_time*.15)*0.;\r\n\tobject_space_pos.z += cos(in_TextureCoord.x*real_time*.15)*5.;//*/\r\n\t\r\n\tfloat _x_change = -object_space_pos.x*2.0;\r\n\tfloat _x_start\t= object_space_pos.x;\r\n\tfloat _z_start\t= object_space_pos.z;\r\n\tfloat _z_change = -_x_change*.4;\r\n\t//change*time/duration+start\r\n\t//FOLD1\r\n\tif(in_TextureCoord.x <= 0.5)\r\n\t{\r\n\t\tobject_space_pos.x = _x_change*time/time_max+_x_start;\r\n\t\tif(time < time_max_half)\r\n\t\t{\r\n\t\t\tobject_space_pos.z = _z_change*time/time_max_half+_z_start;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tobject_space_pos.z = -_z_change*(time-time_max_half)/time_max_half+_z_start+_z_change-1.0;\r\n\t\t}\r\n\t}\r\n\t//FOLD2\r\n\tif(time_2 > 0.0)\r\n\t{\r\n\t\tfloat _y_change = -object_space_pos.y*2.0;\r\n\t\tfloat _y_start = object_space_pos.y;\r\n\t\t_z_change\t= _y_change*.4;\r\n\t\t_z_start\t= object_space_pos.z;\r\n\t\tif(in_TextureCoord.y <= 0.5)\r\n\t\t{\r\n\t\t\tobject_space_pos.y = _y_change*time_2/time_max+_y_start;\r\n\t\t\tif(time_2 < time_max_half)\r\n\t\t\t{\r\n\t\t\t\tobject_space_pos.z = _z_change*time_2/time_max_half+_z_start;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tobject_space_pos.z = -_z_change*(time_2-time_max_half)/time_max_half+_z_start+_z_change-in_TextureCoord.x*5.0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float time;\r\nuniform float time_2;\r\nuniform float real_time;\r\n\r\nfloat time_max\t= 60.0;\r\nfloat time_max_half = time_max*.5;\r\nfloat z_max = 25.0;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    //gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n\tvec4 pos = gm_Matrices[MATRIX_WORLD] * object_space_pos;\r\n\t\r\n\t//object_space_pos.x = in_TextureCoord.y;\r\n\t//object_space_pos.y *= in_TextureCoord.y;\r\n\t/*\r\n\tif(in_TextureCoord.y < 0.5)\r\n\t{\r\n\t\t//object_space_pos.x+=time;\r\n\t\tmin(object_space_pos.y+=time,100.0);\r\n\t\tmin(object_space_pos.z+= time*.1,50.0);//min(time,50.)*.5;\r\n\t}//*/\r\n\t/*\r\n\tobject_space_pos.x += sin(in_TextureCoord.x*real_time*.15)*0.;\r\n\tobject_space_pos.z += cos(in_TextureCoord.x*real_time*.15)*5.;//*/\r\n\t\r\n\tfloat _x_change = -object_space_pos.x*2.0;\r\n\tfloat _x_start\t= object_space_pos.x;\r\n\tfloat _z_start\t= object_space_pos.z;\r\n\tfloat _z_change = -_x_change*.4;\r\n\t//change*time/duration+start\r\n\t//FOLD1\r\n\tif(in_TextureCoord.x <= 0.5)\r\n\t{\r\n\t\tobject_space_pos.x = _x_change*time/time_max+_x_start;\r\n\t\tif(time < time_max_half)\r\n\t\t{\r\n\t\t\tobject_space_pos.z = _z_change*time/time_max_half+_z_start;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tobject_space_pos.z = -_z_change*(time-time_max_half)/time_max_half+_z_start+_z_change-1.0;\r\n\t\t}\r\n\t}\r\n\t//FOLD2\r\n\tif(time_2 > 0.0)\r\n\t{\r\n\t\tfloat _y_change = -object_space_pos.y*2.0;\r\n\t\tfloat _y_start = object_space_pos.y;\r\n\t\t_z_change\t= _y_change*.4;\r\n\t\t_z_start\t= object_space_pos.z;\r\n\t\tif(in_TextureCoord.y <= 0.5)\r\n\t\t{\r\n\t\t\tobject_space_pos.y = _y_change*time_2/time_max+_y_start;\r\n\t\t\tif(time_2 < time_max_half)\r\n\t\t\t{\r\n\t\t\t\tobject_space_pos.z = _z_change*time_2/time_max_half+_z_start;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tobject_space_pos.z = -_z_change*(time_2-time_max_half)/time_max_half+_z_start+_z_change-in_TextureCoord.x*5.0;\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\t\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor.a = 1.0;\r\n}\r\n",
        "shd_alpha_mask_city_reflection",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nvoid main()\r\n{\r\n\tfloat _alpha_max = alpha_max;\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\tgl_FragColor.a*= .05;\r\n\r\n\tvec3 light_lum = vec3(0.299, 0.587, 0.114);\r\n\tfloat light_dot_lum = dot( gl_FragColor.rgb, light_lum);\r\n\t\r\n\tif(light_dot_lum >= .5)\r\n\t{\r\n\t\tgl_FragColor.rgb *= 1.5;\r\n\t}\r\n\t\r\n\t\r\n\t//vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t gl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);\r\n\t\r\n\t/*\r\n\tif(_alpha_max <= 0.0)\r\n\t{\r\n\t\t_alpha_max = 1.0;\r\n\t}//*/\r\n\t\r\n\t//gl_FragColor.a *= _alpha_max;\r\n\t\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nvoid main()\r\n{\r\n\tfloat _alpha_max = alpha_max;\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\tgl_FragColor.a*= .05;\r\n\r\n\tvec3 light_lum = vec3(0.299, 0.587, 0.114);\r\n\tfloat light_dot_lum = dot( gl_FragColor.rgb, light_lum);\r\n\t\r\n\tif(light_dot_lum >= .5)\r\n\t{\r\n\t\tgl_FragColor.rgb *= 1.5;\r\n\t}\r\n\t\r\n\t\r\n\t//vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t gl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);\r\n\t\r\n\t/*\r\n\tif(_alpha_max <= 0.0)\r\n\t{\r\n\t\t_alpha_max = 1.0;\r\n\t}//*/\r\n\t\r\n\t//gl_FragColor.a *= _alpha_max;\r\n\t\r\n\r\n}\r\n",
        "shd_alpha_mask_dither",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform sampler2D dither_tex;\r\nuniform float invert;\r\n\r\nvoid main()\r\n{\r\n\t\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n\tvec4 dither_col = v_vColour * texture2D(dither_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform sampler2D dither_tex;\r\nuniform float invert;\r\n\r\nvoid main()\r\n{\r\n\t\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n\tvec4 dither_col = v_vColour * texture2D(dither_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\r\n}\r\n",
        "shd_alpha_mask_foreground",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nuniform vec3 darkness_col;\r\n\r\nvoid main()\r\n{\r\n\tfloat _alpha_max = alpha_max;\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,darkness_col.rgb,.5);\r\n\tgl_FragColor.rgb *= darkness_col.rgb;\r\n\t\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\t/*\r\n\tif(_alpha_max <= 0.0)\r\n\t{\r\n\t\t_alpha_max = 1.0;\r\n\t}//*/\r\n\t\r\n\t//gl_FragColor.a *= _alpha_max;\r\n\t\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nuniform vec3 darkness_col;\r\n\r\nvoid main()\r\n{\r\n\tfloat _alpha_max = alpha_max;\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,darkness_col.rgb,.5);\r\n\tgl_FragColor.rgb *= darkness_col.rgb;\r\n\t\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\t/*\r\n\tif(_alpha_max <= 0.0)\r\n\t{\r\n\t\t_alpha_max = 1.0;\r\n\t}//*/\r\n\t\r\n\t//gl_FragColor.a *= _alpha_max;\r\n\t\r\n\r\n}\r\n",
        "shd_alpha_mask_inventory",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nvoid main()\r\n{\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\r\n\t\r\n\tgl_FragColor.a *= alpha_max;\r\n\t\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nvoid main()\r\n{\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\r\n\t\r\n\tgl_FragColor.a *= alpha_max;\r\n\t\r\n\r\n}\r\n",
        "shd_alpha_mask_rain",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float invert_alpha_mask;\r\nuniform float night;\r\n\r\nvoid main()\r\n{\r\n\t\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord*1.0 );\r\n\t\r\n\t\r\n\talpha_col.a = abs(invert_alpha_mask-alpha_col.a);\r\n\t\r\n\t//gl_FragColor.a *= gl_FragColor.r;\r\n\tgl_FragColor.a = floor(gl_FragColor.r + 0.75);\r\n\tfloat rgb_inc = 1.25;\r\n\tif(night != 1.0)\r\n\t{\r\n\t\trgb_inc = 1.75;\r\n\t}\r\n\tgl_FragColor.rgb *= rgb_inc;\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\tgl_FragColor.a = floor(alpha_col.a);//invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.r + 0.75)*alpha_col.a;\r\n\t\r\n\t/*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float invert_alpha_mask;\r\nuniform float night;\r\n\r\nvoid main()\r\n{\r\n\t\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord*1.0 );\r\n\t\r\n\t\r\n\talpha_col.a = abs(invert_alpha_mask-alpha_col.a);\r\n\t\r\n\t//gl_FragColor.a *= gl_FragColor.r;\r\n\tgl_FragColor.a = floor(gl_FragColor.r + 0.75);\r\n\tfloat rgb_inc = 1.25;\r\n\tif(night != 1.0)\r\n\t{\r\n\t\trgb_inc = 1.75;\r\n\t}\r\n\tgl_FragColor.rgb *= rgb_inc;\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\tgl_FragColor.a = floor(alpha_col.a);//invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.r + 0.75)*alpha_col.a;\r\n\t\r\n\t/*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\r\n}\r\n",
        "shd_alpha_mask",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nvoid main()\r\n{\r\n\tfloat _alpha_max = alpha_max;\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\t/*\r\n\tif(_alpha_max <= 0.0)\r\n\t{\r\n\t\t_alpha_max = 1.0;\r\n\t}//*/\r\n\t\r\n\t//gl_FragColor.a *= _alpha_max;\r\n\t\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D alpha_tex;\r\nuniform float invert;\r\nuniform float alpha_max;\r\n\r\nvoid main()\r\n{\r\n\tfloat _alpha_max = alpha_max;\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex, v_vTexcoord);\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a *= invert-alpha_col.a+(1.0-invert)*alpha_col.a*2.0;\r\n\t//*\r\n\tgl_FragColor.a*= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a*= .1;//*/\r\n\t\r\n\t/*\r\n\tif(_alpha_max <= 0.0)\r\n\t{\r\n\t\t_alpha_max = 1.0;\r\n\t}//*/\r\n\t\r\n\t//gl_FragColor.a *= _alpha_max;\r\n\t\r\n\r\n}\r\n",
        "shd_alpha_max",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n\t\r\n\t\r\n\t\r\n    vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tif(col.a > 0.0)\r\n\t{\r\n\t\tcol.a = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n\t\r\n\t\r\n\t\r\n    vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tif(col.a > 0.0)\r\n\t{\r\n\t\tcol.a = 1.0;\r\n\t}\r\n\r\n\tgl_FragColor = col;\r\n}\r\n",
        "shd_bg_only_lights",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tif(gl_FragColor.rgb != vec3(1.0,0.0,0.0)\r\n\t&& gl_FragColor.rgb != vec3(1.0,1.0,0.0))\r\n\t{\r\n\t\tdiscard;\r\n\t}//*/\r\n\t//gl_FragColor.rgb = vec3(0.0,1.0,0.0);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tif(gl_FragColor.rgb != vec3(1.0,0.0,0.0)\r\n\t&& gl_FragColor.rgb != vec3(1.0,1.0,0.0))\r\n\t{\r\n\t\tdiscard;\r\n\t}//*/\r\n\t//gl_FragColor.rgb = vec3(0.0,1.0,0.0);\r\n}\r\n",
        "shd_bg_strip",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec3 light_col;\r\nuniform vec3 darkness_col;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tif(gl_FragColor.rgb == vec3(1.0,0.,0.))\r\n\t{\r\n\t\tgl_FragColor.rgb = vec3(0.,1.0,0.);\r\n\t}\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec3 light_col;\r\nuniform vec3 darkness_col;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tif(gl_FragColor.rgb == vec3(1.0,0.,0.))\r\n\t{\r\n\t\tgl_FragColor.rgb = vec3(0.,1.0,0.);\r\n\t}\r\n}\r\n",
        "shd_bloom_blend",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nuniform sampler2D blur_tex;\r\n\r\nvoid main()\r\n{\r\n    vec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 blur_color = v_vColour * texture2D( blur_tex, v_vTexcoord );\r\n\t\r\n\t\r\n\t\r\n\tvec4 inv_orig_color, inv_blur_color;\r\n\t\r\n\tinv_orig_color.rgb = vec3(1.0)-orig_color.rgb;\r\n\tinv_blur_color.rgb = vec3(1.0)-blur_color.rgb;\r\n\t\r\n\tvec4 new_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\r\n\t\r\n\tnew_color.rgb = inv_blur_color.rgb * inv_orig_color.rgb;\r\n\t\r\n\t//new_color.rgb *= lum*lum;\r\n\t\r\n\tnew_color.rgb = vec3(1.0)-new_color.rgb;\r\n\r\n\t\r\n\t\t\r\n\tvec3 col_change = vec3(0.98,0.94,0.83);\r\n\tnew_color.rgb *= col_change;\r\n\t//ljus gult\r\n\t//mellan röd-lila\r\n\t//mörk grönt\r\n\t\r\n\tgl_FragColor = mix(orig_color,new_color,0.45);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nuniform sampler2D blur_tex;\r\n\r\nvoid main()\r\n{\r\n    vec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 blur_color = v_vColour * texture2D( blur_tex, v_vTexcoord );\r\n\t\r\n\t\r\n\t\r\n\tvec4 inv_orig_color, inv_blur_color;\r\n\t\r\n\tinv_orig_color.rgb = vec3(1.0)-orig_color.rgb;\r\n\tinv_blur_color.rgb = vec3(1.0)-blur_color.rgb;\r\n\t\r\n\tvec4 new_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\r\n\t\r\n\tnew_color.rgb = inv_blur_color.rgb * inv_orig_color.rgb;\r\n\t\r\n\t//new_color.rgb *= lum*lum;\r\n\t\r\n\tnew_color.rgb = vec3(1.0)-new_color.rgb;\r\n\r\n\t\r\n\t\t\r\n\tvec3 col_change = vec3(0.98,0.94,0.83);\r\n\tnew_color.rgb *= col_change;\r\n\t//ljus gult\r\n\t//mellan röd-lila\r\n\t//mörk grönt\r\n\t\r\n\tgl_FragColor = mix(orig_color,new_color,0.45);\r\n}\r\n",
        "shd_bloom_lum",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nfloat bloom_threshold\t= 0.25;//.25;\r\nfloat bloom_range\t\t= 0.99;//0.75;\r\n\r\nvoid main()\r\n{\r\n    vec4 base_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tfloat lum = dot(base_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\tfloat weight = smoothstep(bloom_threshold,bloom_threshold+bloom_range,lum);\r\n\tbase_col.rgb = mix(vec3(.0),base_col.rgb,weight);\r\n\t\r\n\tgl_FragColor = base_col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nfloat bloom_threshold\t= 0.25;//.25;\r\nfloat bloom_range\t\t= 0.99;//0.75;\r\n\r\nvoid main()\r\n{\r\n    vec4 base_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tfloat lum = dot(base_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\tfloat weight = smoothstep(bloom_threshold,bloom_threshold+bloom_range,lum);\r\n\tbase_col.rgb = mix(vec3(.0),base_col.rgb,weight);\r\n\t\r\n\tgl_FragColor = base_col;\r\n}\r\n",
        "shd_blueprint",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t// Compute the textel offsets\r\n\tvec2 offsetX;\r\n\toffsetX.x = pixelW;\r\n\tvec2 offsetY;\r\n\toffsetY.y = pixelH;\r\n\tfloat origin_alpha = sign(texture2D(gm_BaseTexture, v_vTexcoord).a);\r\n\tfloat alpha = origin_alpha;\r\n\t// Combine the alpha from all surrounding textels.\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord + offsetX).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord - offsetX).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord + offsetY).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord - offsetY).a);\r\n\t// Only blend with the image_blend factor if the original alpha was 0.\r\n\t// That means the image_blend parameter is the outline color.\r\n\tif(alpha == origin_alpha)\r\n\t{\r\n\t\talpha = .0;\r\n\t}\r\n\t/*\r\n\tgl_FragColor = (v_vColour * (1.0 - origin_alpha)) +\r\n\t                texture2D(gm_BaseTexture, v_vTexcoord);//*/\r\n\t// Use the computed alpha\r\n\tgl_FragColor.a = alpha;\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t// Compute the textel offsets\r\n\tvec2 offsetX;\r\n\toffsetX.x = pixelW;\r\n\tvec2 offsetY;\r\n\toffsetY.y = pixelH;\r\n\tfloat origin_alpha = sign(texture2D(gm_BaseTexture, v_vTexcoord).a);\r\n\tfloat alpha = origin_alpha;\r\n\t// Combine the alpha from all surrounding textels.\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord + offsetX).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord - offsetX).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord + offsetY).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture, v_vTexcoord - offsetY).a);\r\n\t// Only blend with the image_blend factor if the original alpha was 0.\r\n\t// That means the image_blend parameter is the outline color.\r\n\tif(alpha == origin_alpha)\r\n\t{\r\n\t\talpha = .0;\r\n\t}\r\n\t/*\r\n\tgl_FragColor = (v_vColour * (1.0 - origin_alpha)) +\r\n\t                texture2D(gm_BaseTexture, v_vTexcoord);//*/\r\n\t// Use the computed alpha\r\n\tgl_FragColor.a = alpha;\r\n\t\r\n}\r\n",
        "shd_blur_hardcoded_extra_tex",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n   \r\n   vec4 orig_color\t\t= v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n   vec4 othercol\t\t= v_vColour * texture2D( tex, v_vTexcoord );\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 9.2184586 * offset_factor) * 0.0008163;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 7.2677007 * offset_factor) * 0.0074550;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 5.3234487 * offset_factor) * 0.0403735;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.3847072 * offset_factor) * 0.1298643;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.4498532 * offset_factor) * 0.2484166;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.1461488;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.4498532 * offset_factor) * 0.2484166;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.3847072 * offset_factor) * 0.1298643;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 5.3234487 * offset_factor) * 0.0403735;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 7.2677007 * offset_factor) * 0.0074550;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 9.2184586 * offset_factor) * 0.0008163;\r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n   //gl_FragColor.rgba = pow(gl_FragColor.rgba,vec4(0.2));\r\n   //gl_FragColor.rgb += vec3(1.0-gl_FragColor.a) * othercol.rgb;\r\n   float dist = 6.0;\r\n   float max_dist = 32.0;\r\n   float prev_alpha = 0.0;\r\n   //for(float i = dist; i<  max_dist; i+= 1.0)\r\n   //{\r\n\t    vec4 alpha_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord + offset_factor*vec2(dist,dist));\r\n\t\t//prev_alpha = max(prev_alpha, alpha_col.a/dist);\r\n\t\tprev_alpha = alpha_col.a/dist;\r\n  // }\r\n  \r\n   //vec4 alpha = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord + vec2(0.0,0.01));\r\n   //alpha.a *= .00625;\r\n   \r\n  //gl_FragColor.a = 1.0;//max(orig_color.a,prev_alpha);//*(1.0-distance(v_vTexcoord.y,64.0));//max(orig_color.a,alpha.a);\r\n   \r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n   \r\n   vec4 orig_color\t\t= v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n   vec4 othercol\t\t= v_vColour * texture2D( tex, v_vTexcoord );\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 9.2184586 * offset_factor) * 0.0008163;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 7.2677007 * offset_factor) * 0.0074550;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 5.3234487 * offset_factor) * 0.0403735;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.3847072 * offset_factor) * 0.1298643;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.4498532 * offset_factor) * 0.2484166;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.1461488;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.4498532 * offset_factor) * 0.2484166;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.3847072 * offset_factor) * 0.1298643;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 5.3234487 * offset_factor) * 0.0403735;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 7.2677007 * offset_factor) * 0.0074550;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 9.2184586 * offset_factor) * 0.0008163;\r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n   //gl_FragColor.rgba = pow(gl_FragColor.rgba,vec4(0.2));\r\n   //gl_FragColor.rgb += vec3(1.0-gl_FragColor.a) * othercol.rgb;\r\n   float dist = 6.0;\r\n   float max_dist = 32.0;\r\n   float prev_alpha = 0.0;\r\n   //for(float i = dist; i<  max_dist; i+= 1.0)\r\n   //{\r\n\t    vec4 alpha_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord + offset_factor*vec2(dist,dist));\r\n\t\t//prev_alpha = max(prev_alpha, alpha_col.a/dist);\r\n\t\tprev_alpha = alpha_col.a/dist;\r\n  // }\r\n  \r\n   //vec4 alpha = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord + vec2(0.0,0.01));\r\n   //alpha.a *= .00625;\r\n   \r\n  //gl_FragColor.a = 1.0;//max(orig_color.a,prev_alpha);//*(1.0-distance(v_vTexcoord.y,64.0));//max(orig_color.a,alpha.a);\r\n   \r\n\r\n}\r\n",
        "shd_blur_hardcoded_full_screen",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with DISCRETE samples\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2\tblur_vector;\r\nuniform vec2\ttexel_size;\r\nuniform float\tblur_amount;\r\nuniform float\tdarken;\r\n\r\nuniform float left;\r\nuniform float right;\r\n\r\nuniform sampler2D highlight_tex;\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n\thighp vec4 blurred_col;\r\n\tvec2 offset_factor = texel_size * blur_vector;\r\n\tvec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 hl_color = v_vColour * texture2D( highlight_tex, v_vTexcoord );\r\n\t\r\n\tif((v_vTexcoord.x < .5 && left == 1.0)\r\n\t|| (v_vTexcoord.x >= .5 && right == 1.0))\r\n\t{\r\n\t\t\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 4.0 * offset_factor) * 0.0267614;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.0 * offset_factor) * 0.0653479;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 2.0 * offset_factor) * 0.1236451;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0 * offset_factor) * 0.1812775;\r\n\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.2059363;\r\n\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0 * offset_factor) * 0.1812775;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 2.0 * offset_factor) * 0.1236451;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.0 * offset_factor) * 0.0653479;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 4.0 * offset_factor) * 0.0267614;\r\n\r\n\t\tfloat actual_blur_amount = blur_amount*(1.0-hl_color.a);\r\n\t\t\r\n\t\r\n\t\r\n\t\tvec4 final_blur_col = v_vColour * blurred_col;\r\n\t\tif(darken == 1.0)\r\n\t\t{\r\n\t\t\tfinal_blur_col.rgb *= .5+.5*(hl_color.a);\r\n\t\t}\r\n\t\r\n\t\t//gl_FragColor = mix(orig_color,final_blur_col,blur_amount);\r\n\t\tgl_FragColor = mix(orig_color,final_blur_col,actual_blur_amount);\r\n\t\r\n\t}\r\n\telse gl_FragColor = orig_color;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with DISCRETE samples\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2\tblur_vector;\r\nuniform vec2\ttexel_size;\r\nuniform float\tblur_amount;\r\nuniform float\tdarken;\r\n\r\nuniform float left;\r\nuniform float right;\r\n\r\nuniform sampler2D highlight_tex;\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n\thighp vec4 blurred_col;\r\n\tvec2 offset_factor = texel_size * blur_vector;\r\n\tvec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 hl_color = v_vColour * texture2D( highlight_tex, v_vTexcoord );\r\n\t\r\n\tif((v_vTexcoord.x < .5 && left == 1.0)\r\n\t|| (v_vTexcoord.x >= .5 && right == 1.0))\r\n\t{\r\n\t\t\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 4.0 * offset_factor) * 0.0267614;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.0 * offset_factor) * 0.0653479;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 2.0 * offset_factor) * 0.1236451;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0 * offset_factor) * 0.1812775;\r\n\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.2059363;\r\n\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0 * offset_factor) * 0.1812775;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 2.0 * offset_factor) * 0.1236451;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.0 * offset_factor) * 0.0653479;\r\n\t\tblurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 4.0 * offset_factor) * 0.0267614;\r\n\r\n\t\tfloat actual_blur_amount = blur_amount*(1.0-hl_color.a);\r\n\t\t\r\n\t\r\n\t\r\n\t\tvec4 final_blur_col = v_vColour * blurred_col;\r\n\t\tif(darken == 1.0)\r\n\t\t{\r\n\t\t\tfinal_blur_col.rgb *= .5+.5*(hl_color.a);\r\n\t\t}\r\n\t\r\n\t\t//gl_FragColor = mix(orig_color,final_blur_col,blur_amount);\r\n\t\tgl_FragColor = mix(orig_color,final_blur_col,actual_blur_amount);\r\n\t\r\n\t}\r\n\telse gl_FragColor = orig_color;\r\n}\r\n",
        "shd_blur_hardcoded_photo",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0279145 * offset_factor) * 0.1932589;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.6134822;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0279145 * offset_factor) * 0.1932589;\r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0279145 * offset_factor) * 0.1932589;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.6134822;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0279145 * offset_factor) * 0.1932589;\r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n}\r\n",
        "shd_blur_hardcoded",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 9.0671335 * offset_factor) * 0.0000030;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 7.1112968 * offset_factor) * 0.0002667;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 5.1789400 * offset_factor) * 0.0080166;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.2749744 * offset_factor) * 0.0832605;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.3975911 * offset_factor) * 0.3034684;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.2099696;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.3975911 * offset_factor) * 0.3034684;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.2749744 * offset_factor) * 0.0832605;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 5.1789400 * offset_factor) * 0.0080166;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 7.1112968 * offset_factor) * 0.0002667;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 9.0671335 * offset_factor) * 0.0000030;\r\n   \r\n   /*\r\n   \tfloat chrom_amount = 0.001 * abs(0.5-v_vTexcoord.x) * abs(0.5-v_vTexcoord.y);// 0.0015\r\n\tvec3 col;\r\n\tblurred_col.r += texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+chrom_amount,v_vTexcoord.y) ).r;\r\n\tblurred_col.g += texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+chrom_amount )).g;\r\n\tblurred_col.b += texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-chrom_amount,v_vTexcoord.y) ).b;\r\n   //*/\r\n   \r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 9.0671335 * offset_factor) * 0.0000030;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 7.1112968 * offset_factor) * 0.0002667;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 5.1789400 * offset_factor) * 0.0080166;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.2749744 * offset_factor) * 0.0832605;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.3975911 * offset_factor) * 0.3034684;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.2099696;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.3975911 * offset_factor) * 0.3034684;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.2749744 * offset_factor) * 0.0832605;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 5.1789400 * offset_factor) * 0.0080166;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 7.1112968 * offset_factor) * 0.0002667;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 9.0671335 * offset_factor) * 0.0000030;\r\n   \r\n   /*\r\n   \tfloat chrom_amount = 0.001 * abs(0.5-v_vTexcoord.x) * abs(0.5-v_vTexcoord.y);// 0.0015\r\n\tvec3 col;\r\n\tblurred_col.r += texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+chrom_amount,v_vTexcoord.y) ).r;\r\n\tblurred_col.g += texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+chrom_amount )).g;\r\n\tblurred_col.b += texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-chrom_amount,v_vTexcoord.y) ).b;\r\n   //*/\r\n   \r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n}\r\n",
        "shd_blur_map",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0006064 * offset_factor) * 0.0724371;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.8551257;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0006064 * offset_factor) * 0.0724371;\r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0006064 * offset_factor) * 0.0724371;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.8551257;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0006064 * offset_factor) * 0.0724371;\r\n\r\n   gl_FragColor = v_vColour * blurred_col;\r\n}\r\n",
        "shd_blur_rear_mirror",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nuniform sampler2D blur_surf;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n   \r\n   vec4 original_col =  texture2D(gm_BaseTexture,v_vTexcoord);\r\n   vec4 amount_col =  texture2D(blur_surf, v_vTexcoord);\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.0 * offset_factor) * 0.0289953;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 2.0 * offset_factor) * 0.1038184;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0 * offset_factor) * 0.2231734;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.2880260;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0 * offset_factor) * 0.2231734;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 2.0 * offset_factor) * 0.1038184;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.0 * offset_factor) * 0.0289953;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 2.0 * offset_factor) * 0.0151996;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0 * offset_factor) * 0.2187517;\r\n\t//\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.5320973;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0 * offset_factor) * 0.2187517;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 2.0 * offset_factor) * 0.0151996;\r\n   \r\n   vec4 new_col = blurred_col;\r\n   \r\n   gl_FragColor = mix(new_col,original_col,amount_col.r) * v_vColour;\r\n   \r\n\t\r\n\r\n  // gl_FragColor = v_vColour * blurred_col;\r\n   \r\n}\r\n\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//-------------------------------------------------------------------\r\n// BLUR Fragment Shader:\r\n// 2-PASS with LINEAR INTERPOLATED samples (aka Fast Blur)\r\n//-------------------------------------------------------------------\r\n// - Vertex Shader is a pass-though shader\r\n// - blur_vector:  (1.0, 0.0) for horizontal blur\r\n//                 (0.0, 1.0) for vertical blur\r\n// - texel_size:   (image uv width) / (image pixel width)\r\n//                 where image uv width is 1 if image is on a\r\n//                 seperate texture page or is a surface\r\n// - steps:        only even step sizes allowed, odd step sizes\r\n//                 would need a different algorithm and are\r\n//                 less efficient\r\n// - clamp:        add clamp() if image is a sprite not on its own\r\n//                 texture page:\r\n//                 clamp(v_vTexcoord [...] * blur_vector, 0, 1)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 blur_vector;\r\nuniform vec2 texel_size;\r\n\r\nuniform sampler2D blur_surf;\r\n\r\nvoid main()\r\n{\r\n   highp vec4 blurred_col;\r\n   vec2 offset_factor = texel_size * blur_vector;\r\n   \r\n   vec4 original_col =  texture2D(gm_BaseTexture,v_vTexcoord);\r\n   vec4 amount_col =  texture2D(blur_surf, v_vTexcoord);\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 3.0 * offset_factor) * 0.0289953;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 2.0 * offset_factor) * 0.1038184;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0 * offset_factor) * 0.2231734;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.2880260;\r\n\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0 * offset_factor) * 0.2231734;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 2.0 * offset_factor) * 0.1038184;\r\n   blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 3.0 * offset_factor) * 0.0289953;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 2.0 * offset_factor) * 0.0151996;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord - 1.0 * offset_factor) * 0.2187517;\r\n\t//\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord) * 0.5320973;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 1.0 * offset_factor) * 0.2187517;\r\n\t//blurred_col += texture2D(gm_BaseTexture, v_vTexcoord + 2.0 * offset_factor) * 0.0151996;\r\n   \r\n   vec4 new_col = blurred_col;\r\n   \r\n   gl_FragColor = mix(new_col,original_col,amount_col.r) * v_vColour;\r\n   \r\n\t\r\n\r\n  // gl_FragColor = v_vColour * blurred_col;\r\n   \r\n}\r\n\r\n",
        "shd_calendar",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D paper_tex;\r\nuniform vec2 tex_size;\r\n\r\nvoid main()\r\n{\r\n\tvec4 paper_col = texture2D(paper_tex, vec2( fract(v_vTexcoord.x * tex_size.x),fract(v_vTexcoord.y * tex_size.y) ) );\r\n\tvec4 original_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 adjusted_col = original_col;\r\n\tfloat lum = dot(original_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\tif(lum < .5)\r\n\t{\r\n\t\t//original_col.a *= (1.0-paper_col.a)*(1.0-paper_col.a)*(1.0-lum);\r\n\t\tadjusted_col.a *= (1.0-paper_col.a)*(1.0-paper_col.a);\r\n\t\t//adjusted_col.rgb *= paper_col.rgb;//(1.0-paper_col.rgb)*(1.0-paper_col.rgb);\r\n\t}\r\n\t\r\n\toriginal_col = mix(adjusted_col,original_col,.75);\r\n    gl_FragColor = original_col;//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D paper_tex;\r\nuniform vec2 tex_size;\r\n\r\nvoid main()\r\n{\r\n\tvec4 paper_col = texture2D(paper_tex, vec2( fract(v_vTexcoord.x * tex_size.x),fract(v_vTexcoord.y * tex_size.y) ) );\r\n\tvec4 original_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 adjusted_col = original_col;\r\n\tfloat lum = dot(original_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\tif(lum < .5)\r\n\t{\r\n\t\t//original_col.a *= (1.0-paper_col.a)*(1.0-paper_col.a)*(1.0-lum);\r\n\t\tadjusted_col.a *= (1.0-paper_col.a)*(1.0-paper_col.a);\r\n\t\t//adjusted_col.rgb *= paper_col.rgb;//(1.0-paper_col.rgb)*(1.0-paper_col.rgb);\r\n\t}\r\n\t\r\n\toriginal_col = mix(adjusted_col,original_col,.75);\r\n    gl_FragColor = original_col;//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n",
        "shd_dashboard",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 pixel_size;\r\nuniform vec3 glow_col;\r\n\r\nvoid main()\r\n{\r\n\t\r\n    //gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 orig_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tfloat alpha= orig_col.a;\r\n\tif(alpha <= 0.0)\r\n\t{\r\n\r\n\t\t\talpha =.0;\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x - pixel_size.x, v_vTexcoord.y)).a);\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x + pixel_size.x, v_vTexcoord.y)).a);\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y - pixel_size.y)).a);\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y + pixel_size.y)).a);\r\n\t\t\torig_col.a = alpha*(.65);\r\n\t\t\t//orig_col.rgb = glow_col;\r\n\t\t\t//do color for test\r\n\t\t\tvec3 new_col;\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x - pixel_size.x, v_vTexcoord.y)).rgb);\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x + pixel_size.x, v_vTexcoord.y)).rgb);\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y - pixel_size.y)).rgb);\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y + pixel_size.y)).rgb);\r\n\t\t\torig_col.rgb = new_col;\r\n\t\t\r\n\t}\r\n\t\r\n\tgl_FragColor = orig_col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 pixel_size;\r\nuniform vec3 glow_col;\r\n\r\nvoid main()\r\n{\r\n\t\r\n    //gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 orig_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tfloat alpha= orig_col.a;\r\n\tif(alpha <= 0.0)\r\n\t{\r\n\r\n\t\t\talpha =.0;\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x - pixel_size.x, v_vTexcoord.y)).a);\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x + pixel_size.x, v_vTexcoord.y)).a);\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y - pixel_size.y)).a);\r\n\t\t\talpha = max(alpha, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y + pixel_size.y)).a);\r\n\t\t\torig_col.a = alpha*(.65);\r\n\t\t\t//orig_col.rgb = glow_col;\r\n\t\t\t//do color for test\r\n\t\t\tvec3 new_col;\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x - pixel_size.x, v_vTexcoord.y)).rgb);\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x + pixel_size.x, v_vTexcoord.y)).rgb);\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y - pixel_size.y)).rgb);\r\n\t\t\tnew_col = min(new_col, texture2D( gm_BaseTexture, vec2(v_vTexcoord.x, v_vTexcoord.y + pixel_size.y)).rgb);\r\n\t\t\torig_col.rgb = new_col;\r\n\t\t\r\n\t}\r\n\t\r\n\tgl_FragColor = orig_col;\r\n}\r\n",
        "shd_ending_room",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec3 v_vPosition;\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n//uniform float time;\r\n///*\r\n//uniform float world_w;\r\n//uniform float world_h;\r\n//*/\r\n/*\r\nuniform float xx;\r\nuniform float yy;\r\nuniform float zz;//*/\r\n/*\r\nuniform float freq;\r\nuniform float amp;\r\nuniform float wob_start;//*/\r\n\r\nfloat zfar = 60.0;\r\nfloat fog_length = 12.0;//64\r\nuniform float px;\r\nuniform float py;\r\nuniform float pz;\r\n\r\n//uniform vec3 flare_pos;\r\n\r\n\r\nvarying float fog_factor;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n\tvec4 pos = gm_Matrices[MATRIX_WORLD] * object_space_pos;\r\n\r\n\t\r\n\t//float xx = in_Position.x*pos.x;//(in_Position.x/world_w)*pos.x*10000.0;//*MATRIX_WORLD_VIEW_PROJECTION.x;\r\n\tvec4 player_pos = vec4(px,py,pz,1.0);\r\n\t\r\n\tfloat z_dist = distance(pos.z,player_pos.z)*10.0;\r\n\t\r\n\t\r\n\tfloat player_dist = distance(vec3(player_pos.x,player_pos.y,player_pos.z),vec3(pos.x,pos.y,pos.z));\r\n\tif(player_dist > fog_length)\r\n\t{\r\n\t\tfog_factor = 1.0-((player_dist-fog_length)/(zfar-fog_length));//(player_dist.x+player_dist.y+player_dist.z)/3.0;\r\n\t\t//fog_factor = 1.0-(player_dist/zfar);\r\n\t}\r\n\telse fog_factor = 1.0;//1.0;\r\n\r\n\t/*\r\n\tif(pos.x >= wob_start)\r\n\t{\r\n\t\tobject_space_pos.z -= sin(freq*(time+pos.x))*amp;\r\n\t}//*/\r\n\t/*\r\n\t//flare stuff\r\n\tfloat flare_dist = distance(flare_pos,vec3(pos.x,pos.y,pos.z));\r\n\tflare_factor = 1.0-(clamp(flare_dist,0.0,128.0)/128.0);\r\n\t//*/\r\n\t\r\n\t\r\n\tobject_space_pos.z -= (1.0-fog_factor)*2.0;//-= sin(freq*(px))*amp;\r\n\t\r\n\t//object_space_pos.x += sin(0.01*(time+pos.z))*8.0;\r\n\t//object_space_pos.y += sin(0.01*(time+pos.z))*8.0;\r\n\tgl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n\t\r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying float fog_factor;\r\n//varying float flare_factor;\r\n\r\nuniform vec3 fog_col;\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4  noise_col = v_vColour * texture2D( tex, v_vTexcoord*.75 );\r\n\tif(gl_FragColor.a < 0.5)\r\n\t{\r\n\t\tdiscard;\r\n\t}\r\n\t\r\n\t//gl_FragColor.r = mix(gl_FragColor.r,fog_col.r,1.0-fog_factor);\r\n\t//gl_FragColor.g = mix(gl_FragColor.g,fog_col.g,1.0-fog_factor);\r\n\t//gl_FragColor.b = mix(gl_FragColor.b,fog_col.b,1.0-fog_factor);\r\n\t//gl_FragColor.rgb *= 1.0+noise_col.rgb*(1.0-fog_factor);\r\n\t/*\r\n\tif((1.0-fog_factor*2.0) >= noise_col.r)\r\n\t{\r\n\t\t\r\n\t\t//discard;\r\n\t\tgl_FragColor.r = mix(gl_FragColor.r,fog_col.r,1.0-fog_factor*.5);\r\n\t\tgl_FragColor.g = mix(gl_FragColor.g,fog_col.g,1.0-fog_factor*.5);\r\n\t\tgl_FragColor.b = mix(gl_FragColor.b,fog_col.b,1.0-fog_factor*.5);\r\n\t}//*/\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec3 v_vPosition;\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n//uniform float time;\r\n///*\r\n//uniform float world_w;\r\n//uniform float world_h;\r\n//*/\r\n/*\r\nuniform float xx;\r\nuniform float yy;\r\nuniform float zz;//*/\r\n/*\r\nuniform float freq;\r\nuniform float amp;\r\nuniform float wob_start;//*/\r\n\r\nfloat zfar = 60.0;\r\nfloat fog_length = 12.0;//64\r\nuniform float px;\r\nuniform float py;\r\nuniform float pz;\r\n\r\n//uniform vec3 flare_pos;\r\n\r\n\r\nvarying float fog_factor;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n\tvec4 pos = gm_Matrices[MATRIX_WORLD] * object_space_pos;\r\n\r\n\t\r\n\t//float xx = in_Position.x*pos.x;//(in_Position.x/world_w)*pos.x*10000.0;//*MATRIX_WORLD_VIEW_PROJECTION.x;\r\n\tvec4 player_pos = vec4(px,py,pz,1.0);\r\n\t\r\n\tfloat z_dist = distance(pos.z,player_pos.z)*10.0;\r\n\t\r\n\t\r\n\tfloat player_dist = distance(vec3(player_pos.x,player_pos.y,player_pos.z),vec3(pos.x,pos.y,pos.z));\r\n\tif(player_dist > fog_length)\r\n\t{\r\n\t\tfog_factor = 1.0-((player_dist-fog_length)/(zfar-fog_length));//(player_dist.x+player_dist.y+player_dist.z)/3.0;\r\n\t\t//fog_factor = 1.0-(player_dist/zfar);\r\n\t}\r\n\telse fog_factor = 1.0;//1.0;\r\n\r\n\t/*\r\n\tif(pos.x >= wob_start)\r\n\t{\r\n\t\tobject_space_pos.z -= sin(freq*(time+pos.x))*amp;\r\n\t}//*/\r\n\t/*\r\n\t//flare stuff\r\n\tfloat flare_dist = distance(flare_pos,vec3(pos.x,pos.y,pos.z));\r\n\tflare_factor = 1.0-(clamp(flare_dist,0.0,128.0)/128.0);\r\n\t//*/\r\n\t\r\n\t\r\n\tobject_space_pos.z -= (1.0-fog_factor)*2.0;//-= sin(freq*(px))*amp;\r\n\t\r\n\t//object_space_pos.x += sin(0.01*(time+pos.z))*8.0;\r\n\t//object_space_pos.y += sin(0.01*(time+pos.z))*8.0;\r\n\tgl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n\t\r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying float fog_factor;\r\n//varying float flare_factor;\r\n\r\nuniform vec3 fog_col;\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4  noise_col = v_vColour * texture2D( tex, v_vTexcoord*.75 );\r\n\tif(gl_FragColor.a < 0.5)\r\n\t{\r\n\t\tdiscard;\r\n\t}\r\n\t\r\n\t//gl_FragColor.r = mix(gl_FragColor.r,fog_col.r,1.0-fog_factor);\r\n\t//gl_FragColor.g = mix(gl_FragColor.g,fog_col.g,1.0-fog_factor);\r\n\t//gl_FragColor.b = mix(gl_FragColor.b,fog_col.b,1.0-fog_factor);\r\n\t//gl_FragColor.rgb *= 1.0+noise_col.rgb*(1.0-fog_factor);\r\n\t/*\r\n\tif((1.0-fog_factor*2.0) >= noise_col.r)\r\n\t{\r\n\t\t\r\n\t\t//discard;\r\n\t\tgl_FragColor.r = mix(gl_FragColor.r,fog_col.r,1.0-fog_factor*.5);\r\n\t\tgl_FragColor.g = mix(gl_FragColor.g,fog_col.g,1.0-fog_factor*.5);\r\n\t\tgl_FragColor.b = mix(gl_FragColor.b,fog_col.b,1.0-fog_factor*.5);\r\n\t}//*/\r\n\t\r\n}\r\n",
        "shd_explore",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\nuniform vec2 dimensions;\r\nfloat test = 6.0;\r\nvoid main()\r\n{\r\n\tvec4 tex_col = v_vColour * texture2D( tex, fract(v_vTexcoord*test/dimensions)) ;\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor.a = tex_col.a;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\nuniform vec2 dimensions;\r\nfloat test = 6.0;\r\nvoid main()\r\n{\r\n\tvec4 tex_col = v_vColour * texture2D( tex, fract(v_vTexcoord*test/dimensions)) ;\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor.a = tex_col.a;\r\n}\r\n",
        "shd_fuji_old",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D noise_tex;\r\nuniform sampler2D pure_noise_tex;\r\nfloat pxw = 0.015625;\r\n\r\nuniform float noise_pos1;\r\nuniform float noise_pos2;\r\n\r\nfloat dufay_size = 128.0;\r\nfloat dfsize_x\t\t= 960.0*4.0/128.0;\r\nfloat dfsize_y\t\t= 540.0*4.0/128.0;\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,v_vTexcoord);\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,fract(v_vTexcoord*64.0));\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*64.0+noise_pos1),fract(v_vTexcoord.y*64.0+noise_pos2)));\r\n\t\r\n\t//vec4 noise_col1 = v_vColour * texture2D(noise_tex,vec2(fract((v_vTexcoord.x*dufay_size+noise_pos1)),fract(v_vTexcoord.y*dufay_size)));\r\n\tvec4 noise_col1 = v_vColour * texture2D(pure_noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x+noise_pos1)),fract(v_vTexcoord.y*dfsize_y)));\r\n\t//vec4 noise_col2 = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*dufay_size),fract((v_vTexcoord.y+noise_pos2)*dufay_size)));\r\n\tvec4 noise_col2 = v_vColour * texture2D(pure_noise_tex,vec2(fract(v_vTexcoord.x*dfsize_x),fract((v_vTexcoord.y*dfsize_y+noise_pos2))));\r\n\t\r\n\tvec4 noise_col_still = v_vColour * texture2D(noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x)),fract(v_vTexcoord.y*dfsize_y)));\r\n\t\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*dufay_size),fract(v_vTexcoord.y*dufay_size)));\r\n\t\r\n\tvec4 noise_col = mix(noise_col1,noise_col2,.5);\r\n\t//noise_col = v_vColour * texture2D( pure_noise_tex, v_vTexcoord );\r\n\t\r\n\tfloat maxcol = max(noise_col.r,noise_col.g);\r\n\tmaxcol = max(maxcol,noise_col.b);\r\n\t\r\n\t//noise_col.g *= maxcol;\r\n\t\r\n\t\r\n\t//noise_col.rgb += .5;\r\n\t///*\r\n\t//float amount = 0.0015;\r\n\tfloat amount = 0.0035;// 0.0015\r\n\t//amount *= fract((noise_col.r+noise_col.g+noise_col.b)/3.0)*(1.0-noise_col.r);\r\n\tamount *= (noise_col.r)*2.0*maxcol*2.0;\r\n\tamount *= max(abs(0.5 - v_vTexcoord.x),.4);\r\n\tamount *= max(abs(0.5 - v_vTexcoord.y),.4);\r\n\t//amount *= fract(noise_col.r);\r\n\t//amount = distance(v_vTexcoord.y,0.6)*.025;\r\n\tvec3 col;\r\n\tcol.r = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).r;\r\n\tcol.g = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+amount )).g;\r\n\tcol.b = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-amount,v_vTexcoord.y) ).b;\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.92);\r\n\t//float lum = dot(noise_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t//float lum = 1.0-(dot(col.rgb,vec3(0.299, 0.587, 0.114)));\r\n\t//col = mix( noise_col.rgb, col,max(.5,lum));//.8\r\n\t\r\n\tfloat lum = dot(gl_FragColor.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\tvec3 newcol = col.rgb;\r\n\t\r\n\t//col.rgb *= 1.0 + noise_col.rgb * 1.0 * (1.0-lum);\r\n\t\r\n\tcol.rgb += mix(noise_col1.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,1.0));\r\n\tcol.rgb -= mix(noise_col2.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,1.0));\r\n\t//col.rgb += mix(noise_col1.rgb,newcol.rgb,clamp(lum*lum,.85,1.0));\r\n\t//col.rgb -= mix(noise_col2.rgb,newcol.rgb,clamp(lum*lum,.85,1.0));\r\n\t\r\n\t//DUFAY\r\n\t//col = mix(noise_col_still.rgb, col,clamp(1.0-lum,.85,.99));//.8\r\n\tcol = mix(noise_col_still.rgb, col,.9);//.8\r\n\t\r\n\t//col.rgb = gl_FragColor.rgb * lum;\r\n\t\r\n\t//col.rgb += mix(vec3(max(noise_col1.r,noise_col.r)),mix(noise_col1.rgb,noise_col.rgb,0.5),0.5);\r\n    //col.rgb -= mix(vec3(max(noise_col2.r,noise_col.r)),mix(noise_col2.rgb,noise_col.rgb,0.5),0.5);\r\n\t\r\n\t\r\n\t//col.rgb += noise_col.rgb*0.05*lum;\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.8);//.8\r\n\t\r\n\t//col.rgb += noise_col.rgb*vec3(0.05);//mix( noise_col.rgb, col,0.9);//.8\r\n\t//float lum = dot(base_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\t//col.rgb += noise_col.rgb*lum;\r\n\r\n\tgl_FragColor.rgb = mix(vec3(gl_FragColor.rgb),vec3(col.rgb),0.85);//col.rgb + gl_FragColor.rgb - (col.rgb*gl_FragColor.rgb);\r\n\t\r\n\t//atelje color correction\r\n\t//gl_FragColor.rgb *= vec3(1.15,1.05,1.0);\r\n\t\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(base_col.rgb,out_col,lut_strength);\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D noise_tex;\r\nuniform sampler2D pure_noise_tex;\r\nfloat pxw = 0.015625;\r\n\r\nuniform float noise_pos1;\r\nuniform float noise_pos2;\r\n\r\nfloat dufay_size = 128.0;\r\nfloat dfsize_x\t\t= 960.0*4.0/128.0;\r\nfloat dfsize_y\t\t= 540.0*4.0/128.0;\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,v_vTexcoord);\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,fract(v_vTexcoord*64.0));\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*64.0+noise_pos1),fract(v_vTexcoord.y*64.0+noise_pos2)));\r\n\t\r\n\t//vec4 noise_col1 = v_vColour * texture2D(noise_tex,vec2(fract((v_vTexcoord.x*dufay_size+noise_pos1)),fract(v_vTexcoord.y*dufay_size)));\r\n\tvec4 noise_col1 = v_vColour * texture2D(pure_noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x+noise_pos1)),fract(v_vTexcoord.y*dfsize_y)));\r\n\t//vec4 noise_col2 = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*dufay_size),fract((v_vTexcoord.y+noise_pos2)*dufay_size)));\r\n\tvec4 noise_col2 = v_vColour * texture2D(pure_noise_tex,vec2(fract(v_vTexcoord.x*dfsize_x),fract((v_vTexcoord.y*dfsize_y+noise_pos2))));\r\n\t\r\n\tvec4 noise_col_still = v_vColour * texture2D(noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x)),fract(v_vTexcoord.y*dfsize_y)));\r\n\t\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*dufay_size),fract(v_vTexcoord.y*dufay_size)));\r\n\t\r\n\tvec4 noise_col = mix(noise_col1,noise_col2,.5);\r\n\t//noise_col = v_vColour * texture2D( pure_noise_tex, v_vTexcoord );\r\n\t\r\n\tfloat maxcol = max(noise_col.r,noise_col.g);\r\n\tmaxcol = max(maxcol,noise_col.b);\r\n\t\r\n\t//noise_col.g *= maxcol;\r\n\t\r\n\t\r\n\t//noise_col.rgb += .5;\r\n\t///*\r\n\t//float amount = 0.0015;\r\n\tfloat amount = 0.0035;// 0.0015\r\n\t//amount *= fract((noise_col.r+noise_col.g+noise_col.b)/3.0)*(1.0-noise_col.r);\r\n\tamount *= (noise_col.r)*2.0*maxcol*2.0;\r\n\tamount *= max(abs(0.5 - v_vTexcoord.x),.4);\r\n\tamount *= max(abs(0.5 - v_vTexcoord.y),.4);\r\n\t//amount *= fract(noise_col.r);\r\n\t//amount = distance(v_vTexcoord.y,0.6)*.025;\r\n\tvec3 col;\r\n\tcol.r = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).r;\r\n\tcol.g = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+amount )).g;\r\n\tcol.b = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-amount,v_vTexcoord.y) ).b;\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.92);\r\n\t//float lum = dot(noise_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t//float lum = 1.0-(dot(col.rgb,vec3(0.299, 0.587, 0.114)));\r\n\t//col = mix( noise_col.rgb, col,max(.5,lum));//.8\r\n\t\r\n\tfloat lum = dot(gl_FragColor.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\tvec3 newcol = col.rgb;\r\n\t\r\n\t//col.rgb *= 1.0 + noise_col.rgb * 1.0 * (1.0-lum);\r\n\t\r\n\tcol.rgb += mix(noise_col1.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,1.0));\r\n\tcol.rgb -= mix(noise_col2.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,1.0));\r\n\t//col.rgb += mix(noise_col1.rgb,newcol.rgb,clamp(lum*lum,.85,1.0));\r\n\t//col.rgb -= mix(noise_col2.rgb,newcol.rgb,clamp(lum*lum,.85,1.0));\r\n\t\r\n\t//DUFAY\r\n\t//col = mix(noise_col_still.rgb, col,clamp(1.0-lum,.85,.99));//.8\r\n\tcol = mix(noise_col_still.rgb, col,.9);//.8\r\n\t\r\n\t//col.rgb = gl_FragColor.rgb * lum;\r\n\t\r\n\t//col.rgb += mix(vec3(max(noise_col1.r,noise_col.r)),mix(noise_col1.rgb,noise_col.rgb,0.5),0.5);\r\n    //col.rgb -= mix(vec3(max(noise_col2.r,noise_col.r)),mix(noise_col2.rgb,noise_col.rgb,0.5),0.5);\r\n\t\r\n\t\r\n\t//col.rgb += noise_col.rgb*0.05*lum;\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.8);//.8\r\n\t\r\n\t//col.rgb += noise_col.rgb*vec3(0.05);//mix( noise_col.rgb, col,0.9);//.8\r\n\t//float lum = dot(base_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\t//col.rgb += noise_col.rgb*lum;\r\n\r\n\tgl_FragColor.rgb = mix(vec3(gl_FragColor.rgb),vec3(col.rgb),0.85);//col.rgb + gl_FragColor.rgb - (col.rgb*gl_FragColor.rgb);\r\n\t\r\n\t//atelje color correction\r\n\t//gl_FragColor.rgb *= vec3(1.15,1.05,1.0);\r\n\t\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(base_col.rgb,out_col,lut_strength);\r\n\t\r\n\t\r\n\r\n\t\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);\r\n\r\n}\r\n",
        "shd_fuji",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n\tst = in_TextureCoord;\r\n\tvOne = 1.0/vec2(480.0,270.0);\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D noise_tex;\r\nuniform sampler2D pure_noise_tex;\r\nfloat pxw = 0.015625;\r\n\r\n\r\n\r\nuniform float noise_pos1;\r\nuniform float noise_pos2;\r\n\r\nfloat dufay_size = 128.0;\r\nfloat dfsize_x\t\t= 960.0*4.0/128.0;\r\nfloat dfsize_y\t\t= 540.0*4.0/128.0;\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875 //CELL_SIZE - (2 * HALF_TEXEL_SIZE)\r\n\r\n\r\n#define STREAMER_CELLS_PER_ROW\t4.0\r\n#define\tSTREAMER_CELL_SIZE\t\t0.25 //1.0/CELLS_PER_ROW 0,015625\r\n\r\n#define STREAMER_HALF_TEXEL_SIZE  0.0078125\r\n#define STREAMER_CELL_SIZE_FIXED  0.234375\r\n\r\n\r\nuniform float streamer_mode;\r\nuniform sampler2D streamer_lut_tex;\r\n\r\nprecision highp float;\r\n//#endif\r\n \r\n//uniform sampler2D uSampler; // The image to reproduce as a halftone\r\nvec2 uDims = vec2(480.0,270.0); // Texture dimensions, in pixels (width, height)\r\n \r\n\r\nuniform float uScale; // For imperfect, isotropic anti-aliasing in\r\n//float uScale = 0.25; // For imperfect, isotropic anti-aliasing in\r\nuniform float uYrot;  // absence of dFdx() and dFdy() functions\r\n//float uYrot = 480.0;  // absence of dFdx() and dFdy() functions\r\n\r\n \r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n \r\n//float frequency = 1.0; // Needed globally for lame version of aastep()\r\nuniform float uFreq; // Needed globally for lame version of aastep()\r\nfloat frequency = uFreq; // Needed globally for lame version of aastep()\r\n \r\n// Anti-aliased step function. If the auto derivatives extension\r\n// is supported, the AA is done in a fully general, anisotropic\r\n// manner. If not, the expression for \"afwidth\" is a kludge for\r\n// this particular shader and this particular view transform.\r\nfloat aastep(float threshold, float value) {\r\n  float afwidth = frequency * (1.0/240.0) / uScale / cos(uYrot);\r\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\r\n}\r\n\r\n\r\n \r\n// Explicit bilinear texture lookup to circumvent bad hardware precision.\r\n// The extra arguments specify the dimension of the texture. (GLSL 1.30\r\n// introduced textureSize() to get that information from the sampler.)\r\n// 'dims' is the width and height of the texture, 'one' is 1.0/dims.\r\n// (Precomputing 'one' saves two divisions for each lookup.)\r\nvec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\r\n  vec2 uv = st * dims;\r\n  vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\r\n  vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\r\n  vec2 st00 = (uv00 + vec2(0.5)) * one;\r\n  vec4 texel00 = texture2D(tex, st00);\r\n  vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\r\n  vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\r\n  vec4 texel11 = texture2D(tex, st00 + one);\r\n  vec4 texel0 = mix(texel00, texel01, uvlerp.y); \r\n  vec4 texel1 = mix(texel10, texel11, uvlerp.y); \r\n  return mix(texel0, texel1, uvlerp.x);\r\n}\r\n \r\n// 2D simplex noise\r\n \r\n// Description : Array- and textureless GLSL 2D simplex noise.\r\n// Author : Ian McEwan, Ashima Arts. Version: 20110822\r\n// Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n// Distributed under the MIT License. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n \r\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\r\n \r\nfloat snoise(vec2 v) {\r\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\r\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\r\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\r\n                      0.024390243902439); // 1.0 / 41.0\r\n  // First corner\r\n  vec2 i = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v - i + dot(i, C.xx);\r\n  // Other corners\r\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  // Permutations\r\n  i = mod289(i); // Avoid truncation effects in permutation\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n                           + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n                          dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m; m = m*m;\r\n  // Gradients\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 a0 = x - floor(x + 0.5);\r\n  // Normalise gradients implicitly by scaling m\r\n  m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\r\n  // Compute final noise value at P\r\n  vec3 g;\r\n  g.x = a0.x * x0.x + h.x * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n \r\n// 2D simplex noise end\r\n\r\n\r\nfloat rand(vec2 co){\r\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n \r\n \r\nvoid main() {\r\n    // Use a texture to modulate the size of the dots, and\r\n    // use explicit bilinear interpolation for better precision\r\n\tvec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n   // vec3 texcolor = texture2D_bilinear(uSampler, st, uDims, vOne).rgb;\r\n    vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, uDims, vOne).rgb;\r\n    //vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, vec2(480,270), 1.0/vec2(480,270)).rgb;\r\n    //vec3 texcolor = orig_color.rgb;\r\n \r\n    float n = 0.1*snoise(st*200.0);  // Fractal noise\r\n    n += 0.05*snoise(st*400.0);      // with three\r\n    n += 0.025*snoise(st*800.0);     // octaves\r\n    vec3 white = vec3(n*0.2 + 0.97); // Paper color + noise\r\n    //vec3 white = orig_color.rgb; // Paper color + noise\r\n    vec3 black = vec3(n + 0.1);      // Ink density + noise\r\n    //vec3 black = orig_color.rgb;      // Ink density + noise\r\n \r\n    // Perform a crude RGB-to-CMYK conversion\r\n    vec4 cmyk;\r\n    cmyk.xyz = 1.0 - texcolor; // CMY = 1-RGB\r\n    // Black generation: K = min(C,M,Y)\r\n    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z));\r\n    // Grey component replacement: subtract K from CMY\r\n    cmyk.xyz -= cmyk.w;\r\n \r\n    // Distances to nearest point in angled grids of\r\n    // (frequency x frequency) points over the unit square\r\n    // K component: 45 degrees screen angle\r\n    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\r\n    vec2 Kuv = 2.0*fract(Kst)-1.0;\r\n    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\r\n    // C component: 15 degrees screen angle\r\n    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\r\n    vec2 Cuv = 2.0*fract(Cst)-1.0;\r\n    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\r\n    // M component: -15 degrees screen angle\r\n    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\r\n    vec2 Muv = 2.0*fract(Mst)-1.0;\r\n    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\r\n    // Y component: 0 degrees screen angle\r\n    vec2 Yst = frequency*st;\r\n    vec2 Yuv = 2.0*fract(Yst)-1.0;\r\n    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\r\n \r\n    // CMY screen in RGB\r\n    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\r\n    // Blend in K for final color\r\n    rgbscreen = mix(rgbscreen, texcolor, 0.85*k + 0.3*n);\r\n   // rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\r\n   //END OF HALFTONE STUFF\r\n \r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\r\n\tvec4 noise_col1 = v_vColour * texture2D(pure_noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x+noise_pos1)),fract(v_vTexcoord.y*dfsize_y)));\r\n\tvec4 noise_col2 = v_vColour * texture2D(pure_noise_tex,vec2(fract(v_vTexcoord.x*dfsize_x),fract((v_vTexcoord.y*dfsize_y+noise_pos2))));\r\n\t\r\n\tvec4 noise_col_still = v_vColour * texture2D(noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x)),fract(v_vTexcoord.y*dfsize_y)));\r\n\t\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*dufay_size),fract(v_vTexcoord.y*dufay_size)));\r\n\t\r\n\tvec4 noise_col = mix(noise_col1,noise_col2,.5);\r\n\t//noise_col = v_vColour * texture2D( pure_noise_tex, v_vTexcoord );\r\n\t\r\n\tfloat maxcol = max(noise_col.r,noise_col.g);\r\n\tmaxcol = max(maxcol,noise_col.b);\r\n\t\r\n\t//noise_col.g *= maxcol;\r\n\t\r\n\t\r\n\t//noise_col.rgb += .5;\r\n\t///*\r\n\t//float amount = 0.0015;\r\n\tfloat amount = 0.025;// 0.0015\r\n\t//amount *= fract((noise_col.r+noise_col.g+noise_col.b)/3.0)*(1.0-noise_col.r);\r\n\tamount *= (noise_col.r)*2.0*maxcol*2.0;\r\n\t\r\n\tamount *= .16;//instead of decreasing in center\r\n\t//amount *= max(abs(0.5 - v_vTexcoord.x),.4);\r\n\t//amount *= max(abs(0.5 - v_vTexcoord.y),.4);\r\n\t//amount *= fract(noise_col.r);\r\n\t//amount = distance(v_vTexcoord.y,0.6)*.025;\r\n\tvec3 col;\r\n\t/*\r\n\tcol.r = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).r;\r\n\tcol.g = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+amount )).g;\r\n\tcol.b = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-amount,v_vTexcoord.y) ).b;//*/\r\n\tvec3 col_a = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).rgb;\r\n\tvec3 col_b = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+amount )).rgb;\r\n\tvec3 col_c = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-amount,v_vTexcoord.y) ).rgb;\r\n\tvec3 col_d = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y-amount) ).rgb;\r\n\t\r\n\t/*\r\n\tcol_a.r = 1.0;\r\n\tcol_b.g = 1.0;\r\n\tcol_c.b = 1.0;//*/\r\n\t\r\n\t//col.rgb = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).rgb;\r\n\tvec3 temp_col;\r\n\tcol.rgb = mix(col_a.rgb,col_b.rgb,.5);\r\n\ttemp_col.rgb = mix(col_c.rgb,col_d.rgb,.5);\r\n\tcol.rgb = mix(col.rgb,temp_col.rgb,.5);\r\n\t\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.92);\r\n\t//float lum = dot(noise_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t//float lum = 1.0-(dot(col.rgb,vec3(0.299, 0.587, 0.114)));\r\n\t//col = mix( noise_col.rgb, col,max(.5,lum));//.8\r\n\t\r\n\tfloat lum = dot(gl_FragColor.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\tvec3 newcol = col.rgb;\r\n\t\r\n\t//col.rgb *= 1.0 + noise_col.rgb * 1.0 * (1.0-lum);\r\n\t\r\n\tcol.rgb += mix(noise_col1.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,0.95));\r\n\tcol.rgb -= mix(noise_col2.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,0.95));\r\n\r\n\r\n\t\r\n\t//DUFAY\r\n\t//col = mix(noise_col_still.rgb, col,clamp(1.0-lum,.85,.99));//.8\r\n\t//col = mix(noise_col_still.rgb, col,.9);//.8\r\n\t//removed recently\r\n\t\r\n\t//col.rgb = gl_FragColor.rgb * lum;\r\n\t\r\n\t//col.rgb += mix(vec3(max(noise_col1.r,noise_col.r)),mix(noise_col1.rgb,noise_col.rgb,0.5),0.5);\r\n    //col.rgb -= mix(vec3(max(noise_col2.r,noise_col.r)),mix(noise_col2.rgb,noise_col.rgb,0.5),0.5);\r\n\t\r\n\t\r\n\t//col.rgb += noise_col.rgb*0.05*lum;\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.8);//.8\r\n\t\r\n\t//col.rgb += noise_col.rgb*vec3(0.05);//mix( noise_col.rgb, col,0.9);//.8\r\n\t//float lum = dot(base_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\t//col.rgb += noise_col.rgb*lum;\r\n\r\n\t//.45\r\n\tgl_FragColor.rgb = mix(vec3(gl_FragColor.rgb),vec3(col.rgb),0.35);//col.rgb + gl_FragColor.rgb - (col.rgb*gl_FragColor.rgb);\r\n\t//^thats the big mix\r\n\t\r\n\t//atelje color correction\r\n\t//gl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t//gl_FragColor.rgb *= vec3(1.075,1.05,1.0);\r\n\t//gl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t//gl_FragColor.rgb *= vec3(1.05,1.025,1.0);\r\n\t\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(base_col.rgb,out_col,lut_strength);\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t//LUT END\r\n\t\r\n\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\trgbscreen.rgb = vec3(1.0)-rgbscreen.rgb;;\r\n\tgl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,(1.0-lum)*.18);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,1.0);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,0.5);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,lum*.4);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,1.0);\r\n\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t//gl_FragColor.rgb = rgbscreen;\r\n\t\r\n\t\r\n\t\r\n\t//STREAMER LUT\r\n\t//BASE\r\n\tif(streamer_mode == 1.0)\r\n\t{\r\n\t\tbase_col = gl_FragColor;\r\n\t\tblue_cell = base_col.b * (STREAMER_CELLS_PER_ROW * STREAMER_CELLS_PER_ROW -1.0);\r\n\t\t//SAMPLE COORDS\r\n\t\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\t\tlower_cell.y = floor(blue_cell / STREAMER_CELLS_PER_ROW);\r\n\t\tlower_cell.x = floor(blue_cell) - lower_cell.y * STREAMER_CELLS_PER_ROW;\r\n\t\tlower_sample.x = lower_cell.x * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.r;\r\n\t\tlower_sample.y = lower_cell.y * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\tupper_cell.y = floor(ceil(blue_cell) / STREAMER_CELLS_PER_ROW);\r\n\t\tupper_cell.x = ceil(blue_cell) - upper_cell.y * STREAMER_CELLS_PER_ROW;\r\n\t\tupper_sample.x = upper_cell.x * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.r;\r\n\t\tupper_sample.y = upper_cell.y * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\t//OUTPUT\r\n\t\tout_col = mix(texture2D(streamer_lut_tex,lower_sample).rgb,texture2D(streamer_lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\t\tout_col = mix(base_col.rgb,out_col,1.0);\r\n\t\r\n\t\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t}\r\n\t/*\r\n\tfloat rand_noise = rand(v_vTexcoord+vec2(noise_pos1*8.,noise_pos1*10.));\r\n\tgl_FragColor.rgb += vec3(gl_FragColor.rgb * rand_noise*0.2);\r\n\t//gl_FragColor.rgb = vec3(rand_noise);//*/\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n\tst = in_TextureCoord;\r\n\tvOne = 1.0/vec2(480.0,270.0);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D noise_tex;\r\nuniform sampler2D pure_noise_tex;\r\nfloat pxw = 0.015625;\r\n\r\n\r\n\r\nuniform float noise_pos1;\r\nuniform float noise_pos2;\r\n\r\nfloat dufay_size = 128.0;\r\nfloat dfsize_x\t\t= 960.0*4.0/128.0;\r\nfloat dfsize_y\t\t= 540.0*4.0/128.0;\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875 //CELL_SIZE - (2 * HALF_TEXEL_SIZE)\r\n\r\n\r\n#define STREAMER_CELLS_PER_ROW\t4.0\r\n#define\tSTREAMER_CELL_SIZE\t\t0.25 //1.0/CELLS_PER_ROW 0,015625\r\n\r\n#define STREAMER_HALF_TEXEL_SIZE  0.0078125\r\n#define STREAMER_CELL_SIZE_FIXED  0.234375\r\n\r\n\r\nuniform float streamer_mode;\r\nuniform sampler2D streamer_lut_tex;\r\n\r\nprecision highp float;\r\n//#endif\r\n \r\n//uniform sampler2D uSampler; // The image to reproduce as a halftone\r\nvec2 uDims = vec2(480.0,270.0); // Texture dimensions, in pixels (width, height)\r\n \r\n\r\nuniform float uScale; // For imperfect, isotropic anti-aliasing in\r\n//float uScale = 0.25; // For imperfect, isotropic anti-aliasing in\r\nuniform float uYrot;  // absence of dFdx() and dFdy() functions\r\n//float uYrot = 480.0;  // absence of dFdx() and dFdy() functions\r\n\r\n \r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n \r\n//float frequency = 1.0; // Needed globally for lame version of aastep()\r\nuniform float uFreq; // Needed globally for lame version of aastep()\r\nfloat frequency = uFreq; // Needed globally for lame version of aastep()\r\n \r\n// Anti-aliased step function. If the auto derivatives extension\r\n// is supported, the AA is done in a fully general, anisotropic\r\n// manner. If not, the expression for \"afwidth\" is a kludge for\r\n// this particular shader and this particular view transform.\r\nfloat aastep(float threshold, float value) {\r\n  float afwidth = frequency * (1.0/240.0) / uScale / cos(uYrot);\r\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\r\n}\r\n\r\n\r\n \r\n// Explicit bilinear texture lookup to circumvent bad hardware precision.\r\n// The extra arguments specify the dimension of the texture. (GLSL 1.30\r\n// introduced textureSize() to get that information from the sampler.)\r\n// 'dims' is the width and height of the texture, 'one' is 1.0/dims.\r\n// (Precomputing 'one' saves two divisions for each lookup.)\r\nvec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\r\n  vec2 uv = st * dims;\r\n  vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\r\n  vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\r\n  vec2 st00 = (uv00 + vec2(0.5)) * one;\r\n  vec4 texel00 = texture2D(tex, st00);\r\n  vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\r\n  vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\r\n  vec4 texel11 = texture2D(tex, st00 + one);\r\n  vec4 texel0 = mix(texel00, texel01, uvlerp.y); \r\n  vec4 texel1 = mix(texel10, texel11, uvlerp.y); \r\n  return mix(texel0, texel1, uvlerp.x);\r\n}\r\n \r\n// 2D simplex noise\r\n \r\n// Description : Array- and textureless GLSL 2D simplex noise.\r\n// Author : Ian McEwan, Ashima Arts. Version: 20110822\r\n// Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n// Distributed under the MIT License. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n \r\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\r\n \r\nfloat snoise(vec2 v) {\r\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\r\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\r\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\r\n                      0.024390243902439); // 1.0 / 41.0\r\n  // First corner\r\n  vec2 i = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v - i + dot(i, C.xx);\r\n  // Other corners\r\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  // Permutations\r\n  i = mod289(i); // Avoid truncation effects in permutation\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n                           + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n                          dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m; m = m*m;\r\n  // Gradients\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 a0 = x - floor(x + 0.5);\r\n  // Normalise gradients implicitly by scaling m\r\n  m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\r\n  // Compute final noise value at P\r\n  vec3 g;\r\n  g.x = a0.x * x0.x + h.x * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n \r\n// 2D simplex noise end\r\n\r\n\r\nfloat rand(vec2 co){\r\n    return fract(sin(dot(co, vec2(12.9898, 78.233))) * 43758.5453);\r\n}\r\n \r\n \r\nvoid main() {\r\n    // Use a texture to modulate the size of the dots, and\r\n    // use explicit bilinear interpolation for better precision\r\n\tvec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n   // vec3 texcolor = texture2D_bilinear(uSampler, st, uDims, vOne).rgb;\r\n    vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, uDims, vOne).rgb;\r\n    //vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, vec2(480,270), 1.0/vec2(480,270)).rgb;\r\n    //vec3 texcolor = orig_color.rgb;\r\n \r\n    float n = 0.1*snoise(st*200.0);  // Fractal noise\r\n    n += 0.05*snoise(st*400.0);      // with three\r\n    n += 0.025*snoise(st*800.0);     // octaves\r\n    vec3 white = vec3(n*0.2 + 0.97); // Paper color + noise\r\n    //vec3 white = orig_color.rgb; // Paper color + noise\r\n    vec3 black = vec3(n + 0.1);      // Ink density + noise\r\n    //vec3 black = orig_color.rgb;      // Ink density + noise\r\n \r\n    // Perform a crude RGB-to-CMYK conversion\r\n    vec4 cmyk;\r\n    cmyk.xyz = 1.0 - texcolor; // CMY = 1-RGB\r\n    // Black generation: K = min(C,M,Y)\r\n    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z));\r\n    // Grey component replacement: subtract K from CMY\r\n    cmyk.xyz -= cmyk.w;\r\n \r\n    // Distances to nearest point in angled grids of\r\n    // (frequency x frequency) points over the unit square\r\n    // K component: 45 degrees screen angle\r\n    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\r\n    vec2 Kuv = 2.0*fract(Kst)-1.0;\r\n    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\r\n    // C component: 15 degrees screen angle\r\n    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\r\n    vec2 Cuv = 2.0*fract(Cst)-1.0;\r\n    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\r\n    // M component: -15 degrees screen angle\r\n    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\r\n    vec2 Muv = 2.0*fract(Mst)-1.0;\r\n    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\r\n    // Y component: 0 degrees screen angle\r\n    vec2 Yst = frequency*st;\r\n    vec2 Yuv = 2.0*fract(Yst)-1.0;\r\n    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\r\n \r\n    // CMY screen in RGB\r\n    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\r\n    // Blend in K for final color\r\n    rgbscreen = mix(rgbscreen, texcolor, 0.85*k + 0.3*n);\r\n   // rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\r\n   //END OF HALFTONE STUFF\r\n \r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\r\n\tvec4 noise_col1 = v_vColour * texture2D(pure_noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x+noise_pos1)),fract(v_vTexcoord.y*dfsize_y)));\r\n\tvec4 noise_col2 = v_vColour * texture2D(pure_noise_tex,vec2(fract(v_vTexcoord.x*dfsize_x),fract((v_vTexcoord.y*dfsize_y+noise_pos2))));\r\n\t\r\n\tvec4 noise_col_still = v_vColour * texture2D(noise_tex,vec2(fract((v_vTexcoord.x*dfsize_x)),fract(v_vTexcoord.y*dfsize_y)));\r\n\t\r\n\t//vec4 noise_col = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x*dufay_size),fract(v_vTexcoord.y*dufay_size)));\r\n\t\r\n\tvec4 noise_col = mix(noise_col1,noise_col2,.5);\r\n\t//noise_col = v_vColour * texture2D( pure_noise_tex, v_vTexcoord );\r\n\t\r\n\tfloat maxcol = max(noise_col.r,noise_col.g);\r\n\tmaxcol = max(maxcol,noise_col.b);\r\n\t\r\n\t//noise_col.g *= maxcol;\r\n\t\r\n\t\r\n\t//noise_col.rgb += .5;\r\n\t///*\r\n\t//float amount = 0.0015;\r\n\tfloat amount = 0.025;// 0.0015\r\n\t//amount *= fract((noise_col.r+noise_col.g+noise_col.b)/3.0)*(1.0-noise_col.r);\r\n\tamount *= (noise_col.r)*2.0*maxcol*2.0;\r\n\t\r\n\tamount *= .16;//instead of decreasing in center\r\n\t//amount *= max(abs(0.5 - v_vTexcoord.x),.4);\r\n\t//amount *= max(abs(0.5 - v_vTexcoord.y),.4);\r\n\t//amount *= fract(noise_col.r);\r\n\t//amount = distance(v_vTexcoord.y,0.6)*.025;\r\n\tvec3 col;\r\n\t/*\r\n\tcol.r = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).r;\r\n\tcol.g = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+amount )).g;\r\n\tcol.b = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-amount,v_vTexcoord.y) ).b;//*/\r\n\tvec3 col_a = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).rgb;\r\n\tvec3 col_b = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y+amount )).rgb;\r\n\tvec3 col_c = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x-amount,v_vTexcoord.y) ).rgb;\r\n\tvec3 col_d = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x,v_vTexcoord.y-amount) ).rgb;\r\n\t\r\n\t/*\r\n\tcol_a.r = 1.0;\r\n\tcol_b.g = 1.0;\r\n\tcol_c.b = 1.0;//*/\r\n\t\r\n\t//col.rgb = texture2D( gm_BaseTexture, vec2(v_vTexcoord.x+amount,v_vTexcoord.y) ).rgb;\r\n\tvec3 temp_col;\r\n\tcol.rgb = mix(col_a.rgb,col_b.rgb,.5);\r\n\ttemp_col.rgb = mix(col_c.rgb,col_d.rgb,.5);\r\n\tcol.rgb = mix(col.rgb,temp_col.rgb,.5);\r\n\t\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.92);\r\n\t//float lum = dot(noise_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t//float lum = 1.0-(dot(col.rgb,vec3(0.299, 0.587, 0.114)));\r\n\t//col = mix( noise_col.rgb, col,max(.5,lum));//.8\r\n\t\r\n\tfloat lum = dot(gl_FragColor.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\tvec3 newcol = col.rgb;\r\n\t\r\n\t//col.rgb *= 1.0 + noise_col.rgb * 1.0 * (1.0-lum);\r\n\t\r\n\tcol.rgb += mix(noise_col1.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,0.95));\r\n\tcol.rgb -= mix(noise_col2.rgb,newcol.rgb,clamp(1.0-lum*lum,.9,0.95));\r\n\r\n\r\n\t\r\n\t//DUFAY\r\n\t//col = mix(noise_col_still.rgb, col,clamp(1.0-lum,.85,.99));//.8\r\n\t//col = mix(noise_col_still.rgb, col,.9);//.8\r\n\t//removed recently\r\n\t\r\n\t//col.rgb = gl_FragColor.rgb * lum;\r\n\t\r\n\t//col.rgb += mix(vec3(max(noise_col1.r,noise_col.r)),mix(noise_col1.rgb,noise_col.rgb,0.5),0.5);\r\n    //col.rgb -= mix(vec3(max(noise_col2.r,noise_col.r)),mix(noise_col2.rgb,noise_col.rgb,0.5),0.5);\r\n\t\r\n\t\r\n\t//col.rgb += noise_col.rgb*0.05*lum;\r\n\t\r\n\t//col = mix( noise_col.rgb, col,.8);//.8\r\n\t\r\n\t//col.rgb += noise_col.rgb*vec3(0.05);//mix( noise_col.rgb, col,0.9);//.8\r\n\t//float lum = dot(base_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\t\r\n\t//col.rgb += noise_col.rgb*lum;\r\n\r\n\t//.45\r\n\tgl_FragColor.rgb = mix(vec3(gl_FragColor.rgb),vec3(col.rgb),0.35);//col.rgb + gl_FragColor.rgb - (col.rgb*gl_FragColor.rgb);\r\n\t//^thats the big mix\r\n\t\r\n\t//atelje color correction\r\n\t//gl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t//gl_FragColor.rgb *= vec3(1.075,1.05,1.0);\r\n\t//gl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t//gl_FragColor.rgb *= vec3(1.05,1.025,1.0);\r\n\t\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(base_col.rgb,out_col,lut_strength);\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t//LUT END\r\n\t\r\n\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\trgbscreen.rgb = vec3(1.0)-rgbscreen.rgb;;\r\n\tgl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,(1.0-lum)*.18);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,1.0);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,0.5);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,lum*.4);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,1.0);\r\n\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t//gl_FragColor.rgb = rgbscreen;\r\n\t\r\n\t\r\n\t\r\n\t//STREAMER LUT\r\n\t//BASE\r\n\tif(streamer_mode == 1.0)\r\n\t{\r\n\t\tbase_col = gl_FragColor;\r\n\t\tblue_cell = base_col.b * (STREAMER_CELLS_PER_ROW * STREAMER_CELLS_PER_ROW -1.0);\r\n\t\t//SAMPLE COORDS\r\n\t\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\t\tlower_cell.y = floor(blue_cell / STREAMER_CELLS_PER_ROW);\r\n\t\tlower_cell.x = floor(blue_cell) - lower_cell.y * STREAMER_CELLS_PER_ROW;\r\n\t\tlower_sample.x = lower_cell.x * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.r;\r\n\t\tlower_sample.y = lower_cell.y * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\tupper_cell.y = floor(ceil(blue_cell) / STREAMER_CELLS_PER_ROW);\r\n\t\tupper_cell.x = ceil(blue_cell) - upper_cell.y * STREAMER_CELLS_PER_ROW;\r\n\t\tupper_sample.x = upper_cell.x * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.r;\r\n\t\tupper_sample.y = upper_cell.y * STREAMER_CELL_SIZE + STREAMER_HALF_TEXEL_SIZE + STREAMER_CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\t//OUTPUT\r\n\t\tout_col = mix(texture2D(streamer_lut_tex,lower_sample).rgb,texture2D(streamer_lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\t\tout_col = mix(base_col.rgb,out_col,1.0);\r\n\t\r\n\t\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t}\r\n\t/*\r\n\tfloat rand_noise = rand(v_vTexcoord+vec2(noise_pos1*8.,noise_pos1*10.));\r\n\tgl_FragColor.rgb += vec3(gl_FragColor.rgb * rand_noise*0.2);\r\n\t//gl_FragColor.rgb = vec3(rand_noise);//*/\r\n\r\n}\r\n",
        "shd_garage_dark",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n\tvec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\r\n\t\r\n\tvec3 lum = vec3(.299,.587,.114);\r\n\t\r\n\tvec4 bw_col = vec4(vec3(dot(col.rgb,lum)),col.a);\r\n\t\r\n\tcol.rgb *= vec3(0.75*bw_col);\r\n\t\r\n\tgl_FragColor = col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n\tvec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\r\n\t\r\n\tvec3 lum = vec3(.299,.587,.114);\r\n\t\r\n\tvec4 bw_col = vec4(vec3(dot(col.rgb,lum)),col.a);\r\n\t\r\n\tcol.rgb *= vec3(0.75*bw_col);\r\n\t\r\n\tgl_FragColor = col;\r\n}\r\n",
        "shd_halftone",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n\tst = in_TextureCoord;\r\n\tvOne = 1.0/vec2(480.0,270.0);\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n/*\r\nvoid main()\r\n{\r\n\tgl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}//*/\r\n\r\n///*\r\n// GLSL halftone shader demo for WebGL\r\n// Stefan Gustavson 2012-02-16 (stefan.gustavson@liu.se)\r\n//\r\n// 2D simplex noise by Ian McEwan, distributed under\r\n// the MIT license. All other code in this shader is\r\n// my original work, and is in the public domain.\r\n// Credit is appreciated where appropriate, though.\r\n \r\n// Derivatives may be missing from some WebGL implementations,\r\n// so we allow for a less general, alternate approach below.\r\n\r\n \r\n//#ifdef GL_ES\r\nprecision highp float;\r\n//#endif\r\n \r\n//uniform sampler2D uSampler; // The image to reproduce as a halftone\r\nuniform vec2 uDims; // Texture dimensions, in pixels (width, height)\r\n \r\n\r\n//uniform float uScale; // For imperfect, isotropic anti-aliasing in\r\nfloat uScale = 0.05; // For imperfect, isotropic anti-aliasing in\r\n//uniform float uYrot;  // absence of dFdx() and dFdy() functions\r\nfloat uYrot = 1.0;  // absence of dFdx() and dFdy() functions\r\n\r\n \r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n \r\nfloat frequency = 40.0; // Needed globally for lame version of aastep()\r\n \r\n// Anti-aliased step function. If the auto derivatives extension\r\n// is supported, the AA is done in a fully general, anisotropic\r\n// manner. If not, the expression for \"afwidth\" is a kludge for\r\n// this particular shader and this particular view transform.\r\nfloat aastep(float threshold, float value) {\r\n  float afwidth = frequency * (1.0/240.0) / uScale / cos(uYrot);\r\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\r\n}\r\n \r\n// Explicit bilinear texture lookup to circumvent bad hardware precision.\r\n// The extra arguments specify the dimension of the texture. (GLSL 1.30\r\n// introduced textureSize() to get that information from the sampler.)\r\n// 'dims' is the width and height of the texture, 'one' is 1.0/dims.\r\n// (Precomputing 'one' saves two divisions for each lookup.)\r\nvec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\r\n  vec2 uv = st * dims;\r\n  vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\r\n  vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\r\n  vec2 st00 = (uv00 + vec2(0.5)) * one;\r\n  vec4 texel00 = texture2D(tex, st00);\r\n  vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\r\n  vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\r\n  vec4 texel11 = texture2D(tex, st00 + one);\r\n  vec4 texel0 = mix(texel00, texel01, uvlerp.y); \r\n  vec4 texel1 = mix(texel10, texel11, uvlerp.y); \r\n  return mix(texel0, texel1, uvlerp.x);\r\n}\r\n \r\n// 2D simplex noise\r\n \r\n// Description : Array- and textureless GLSL 2D simplex noise.\r\n// Author : Ian McEwan, Ashima Arts. Version: 20110822\r\n// Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n// Distributed under the MIT License. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n \r\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\r\n \r\nfloat snoise(vec2 v) {\r\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\r\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\r\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\r\n                      0.024390243902439); // 1.0 / 41.0\r\n  // First corner\r\n  vec2 i = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v - i + dot(i, C.xx);\r\n  // Other corners\r\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  // Permutations\r\n  i = mod289(i); // Avoid truncation effects in permutation\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n                           + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n                          dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m; m = m*m;\r\n  // Gradients\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 a0 = x - floor(x + 0.5);\r\n  // Normalise gradients implicitly by scaling m\r\n  m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\r\n  // Compute final noise value at P\r\n  vec3 g;\r\n  g.x = a0.x * x0.x + h.x * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n \r\n// 2D simplex noise end\r\n\r\n \r\n \r\nvoid main() {\r\n    // Use a texture to modulate the size of the dots, and\r\n    // use explicit bilinear interpolation for better precision\r\n\t//vec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n   // vec3 texcolor = texture2D_bilinear(uSampler, st, uDims, vOne).rgb;\r\n    vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, uDims, vOne).rgb;\r\n    //vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, vec2(480,270), 1.0/vec2(480,270)).rgb;\r\n    //vec3 texcolor = orig_color.rgb;\r\n \r\n    float n = 0.1*snoise(st*200.0);  // Fractal noise\r\n    n += 0.05*snoise(st*400.0);      // with three\r\n    n += 0.025*snoise(st*800.0);     // octaves\r\n    vec3 white = vec3(n*0.2 + 0.97); // Paper color + noise\r\n    vec3 black = vec3(n + 0.1);      // Ink density + noise\r\n \r\n    // Perform a crude RGB-to-CMYK conversion\r\n    vec4 cmyk;\r\n    cmyk.xyz = 1.0 - texcolor; // CMY = 1-RGB\r\n    // Black generation: K = min(C,M,Y)\r\n    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z));\r\n    // Grey component replacement: subtract K from CMY\r\n    cmyk.xyz -= cmyk.w;\r\n \r\n    // Distances to nearest point in angled grids of\r\n    // (frequency x frequency) points over the unit square\r\n    // K component: 45 degrees screen angle\r\n    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\r\n    vec2 Kuv = 2.0*fract(Kst)-1.0;\r\n    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\r\n    // C component: 15 degrees screen angle\r\n    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\r\n    vec2 Cuv = 2.0*fract(Cst)-1.0;\r\n    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\r\n    // M component: -15 degrees screen angle\r\n    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\r\n    vec2 Muv = 2.0*fract(Mst)-1.0;\r\n    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\r\n    // Y component: 0 degrees screen angle\r\n    vec2 Yst = frequency*st;\r\n    vec2 Yuv = 2.0*fract(Yst)-1.0;\r\n    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\r\n \r\n    // CMY screen in RGB\r\n    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\r\n    // Blend in K for final color\r\n    rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\r\n \r\n    // Blend to plain RGB texture under extreme minification\r\n    // (handles any minification level by regular mipmapping)\r\n    float afwidth = frequency * (1.0/200.0) / uScale / cos(uYrot);\r\n\r\n    float blend = smoothstep(0.7, 1.4, afwidth); \r\n    gl_FragColor = vec4(mix(rgbscreen, texcolor, .75), 1.0);\r\n}//*/\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n\tst = in_TextureCoord;\r\n\tvOne = 1.0/vec2(480.0,270.0);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n/*\r\nvoid main()\r\n{\r\n\tgl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}//*/\r\n\r\n///*\r\n// GLSL halftone shader demo for WebGL\r\n// Stefan Gustavson 2012-02-16 (stefan.gustavson@liu.se)\r\n//\r\n// 2D simplex noise by Ian McEwan, distributed under\r\n// the MIT license. All other code in this shader is\r\n// my original work, and is in the public domain.\r\n// Credit is appreciated where appropriate, though.\r\n \r\n// Derivatives may be missing from some WebGL implementations,\r\n// so we allow for a less general, alternate approach below.\r\n\r\n \r\n//#ifdef GL_ES\r\nprecision highp float;\r\n//#endif\r\n \r\n//uniform sampler2D uSampler; // The image to reproduce as a halftone\r\nuniform vec2 uDims; // Texture dimensions, in pixels (width, height)\r\n \r\n\r\n//uniform float uScale; // For imperfect, isotropic anti-aliasing in\r\nfloat uScale = 0.05; // For imperfect, isotropic anti-aliasing in\r\n//uniform float uYrot;  // absence of dFdx() and dFdy() functions\r\nfloat uYrot = 1.0;  // absence of dFdx() and dFdy() functions\r\n\r\n \r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n \r\nfloat frequency = 40.0; // Needed globally for lame version of aastep()\r\n \r\n// Anti-aliased step function. If the auto derivatives extension\r\n// is supported, the AA is done in a fully general, anisotropic\r\n// manner. If not, the expression for \"afwidth\" is a kludge for\r\n// this particular shader and this particular view transform.\r\nfloat aastep(float threshold, float value) {\r\n  float afwidth = frequency * (1.0/240.0) / uScale / cos(uYrot);\r\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\r\n}\r\n \r\n// Explicit bilinear texture lookup to circumvent bad hardware precision.\r\n// The extra arguments specify the dimension of the texture. (GLSL 1.30\r\n// introduced textureSize() to get that information from the sampler.)\r\n// 'dims' is the width and height of the texture, 'one' is 1.0/dims.\r\n// (Precomputing 'one' saves two divisions for each lookup.)\r\nvec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\r\n  vec2 uv = st * dims;\r\n  vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\r\n  vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\r\n  vec2 st00 = (uv00 + vec2(0.5)) * one;\r\n  vec4 texel00 = texture2D(tex, st00);\r\n  vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\r\n  vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\r\n  vec4 texel11 = texture2D(tex, st00 + one);\r\n  vec4 texel0 = mix(texel00, texel01, uvlerp.y); \r\n  vec4 texel1 = mix(texel10, texel11, uvlerp.y); \r\n  return mix(texel0, texel1, uvlerp.x);\r\n}\r\n \r\n// 2D simplex noise\r\n \r\n// Description : Array- and textureless GLSL 2D simplex noise.\r\n// Author : Ian McEwan, Ashima Arts. Version: 20110822\r\n// Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n// Distributed under the MIT License. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n \r\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\r\n \r\nfloat snoise(vec2 v) {\r\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\r\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\r\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\r\n                      0.024390243902439); // 1.0 / 41.0\r\n  // First corner\r\n  vec2 i = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v - i + dot(i, C.xx);\r\n  // Other corners\r\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  // Permutations\r\n  i = mod289(i); // Avoid truncation effects in permutation\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n                           + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n                          dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m; m = m*m;\r\n  // Gradients\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 a0 = x - floor(x + 0.5);\r\n  // Normalise gradients implicitly by scaling m\r\n  m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\r\n  // Compute final noise value at P\r\n  vec3 g;\r\n  g.x = a0.x * x0.x + h.x * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n \r\n// 2D simplex noise end\r\n\r\n \r\n \r\nvoid main() {\r\n    // Use a texture to modulate the size of the dots, and\r\n    // use explicit bilinear interpolation for better precision\r\n\t//vec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n   // vec3 texcolor = texture2D_bilinear(uSampler, st, uDims, vOne).rgb;\r\n    vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, uDims, vOne).rgb;\r\n    //vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, vec2(480,270), 1.0/vec2(480,270)).rgb;\r\n    //vec3 texcolor = orig_color.rgb;\r\n \r\n    float n = 0.1*snoise(st*200.0);  // Fractal noise\r\n    n += 0.05*snoise(st*400.0);      // with three\r\n    n += 0.025*snoise(st*800.0);     // octaves\r\n    vec3 white = vec3(n*0.2 + 0.97); // Paper color + noise\r\n    vec3 black = vec3(n + 0.1);      // Ink density + noise\r\n \r\n    // Perform a crude RGB-to-CMYK conversion\r\n    vec4 cmyk;\r\n    cmyk.xyz = 1.0 - texcolor; // CMY = 1-RGB\r\n    // Black generation: K = min(C,M,Y)\r\n    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z));\r\n    // Grey component replacement: subtract K from CMY\r\n    cmyk.xyz -= cmyk.w;\r\n \r\n    // Distances to nearest point in angled grids of\r\n    // (frequency x frequency) points over the unit square\r\n    // K component: 45 degrees screen angle\r\n    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\r\n    vec2 Kuv = 2.0*fract(Kst)-1.0;\r\n    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\r\n    // C component: 15 degrees screen angle\r\n    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\r\n    vec2 Cuv = 2.0*fract(Cst)-1.0;\r\n    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\r\n    // M component: -15 degrees screen angle\r\n    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\r\n    vec2 Muv = 2.0*fract(Mst)-1.0;\r\n    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\r\n    // Y component: 0 degrees screen angle\r\n    vec2 Yst = frequency*st;\r\n    vec2 Yuv = 2.0*fract(Yst)-1.0;\r\n    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\r\n \r\n    // CMY screen in RGB\r\n    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\r\n    // Blend in K for final color\r\n    rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\r\n \r\n    // Blend to plain RGB texture under extreme minification\r\n    // (handles any minification level by regular mipmapping)\r\n    float afwidth = frequency * (1.0/200.0) / uScale / cos(uYrot);\r\n\r\n    float blend = smoothstep(0.7, 1.4, afwidth); \r\n    gl_FragColor = vec4(mix(rgbscreen, texcolor, .75), 1.0);\r\n}//*/\r\n",
        "shd_haze_mask",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 mask_col = v_vColour * texture2D( tex, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a = mask_col.a;\r\n\t\r\n\tvec4 col = gl_FragColor;\r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);\r\n\t\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 mask_col = v_vColour * texture2D( tex, v_vTexcoord );\r\n\t\r\n\tgl_FragColor.a = mask_col.a;\r\n\t\r\n\tvec4 col = gl_FragColor;\r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);\r\n\t\r\n\t\r\n}\r\n",
        "shd_heat_waves",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float time;\r\nuniform vec2 texel;\r\n\r\nuniform sampler2D distort_tex;\r\nuniform float heat_intensity;\r\n\r\nuniform float high;\r\nuniform float high_intensity;\r\n\r\nconst float size = 1.0;\r\nconst float strength = .0075;\r\n\r\nconst float xSpeed = 0.02;\r\nconst float xFreq = 75.0;\r\nconst float xSize = 2.5;\r\n\r\n\r\nvec3 rgb2hsv(vec3 c)\r\n{\r\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n    float d = q.x - min(q.w, q.y);\r\n    float e = 1.0e-10;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n//*/\r\n\r\n\r\nvoid main()\r\n{\r\n\t//*\r\n\tvec2 distort;\r\n\t\r\n\tdistort.x = texture2D(distort_tex,fract(v_vTexcoord * size +vec2(0,time))).r *strength*heat_intensity;\r\n\tdistort.y = 0.0;//texture2D(distort_tex,fract(v_vTexcoord * size * 3.4 +vec2(0.0,time*1.6))).g *strength *1.3;\r\n\t//*/\r\n\t\r\n\tif(high == 1.0)\r\n\t{\r\n\t//distort.x = texture2D(distort_tex,fract(v_vTexcoord * size +vec2(0,time))).r *strength*heat_intensity;\r\n\tdistort.y = texture2D(distort_tex,fract(v_vTexcoord * size * 0.5 -vec2(0.0,time*0.75))).g *strength *0.5;\r\n\t//*/\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t//float distort = texture2D(distort_tex,fract(v_vTexcoord)).r *strength;\r\n\t//gl_FragColor = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord+distort);\r\n\tvec4 orig_col = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord);\r\n\tfloat lum = dot(orig_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\tvec4 dist_col = gl_FragColor = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord + distort*min(1.25,(1.0+v_vTexcoord.y)));\r\n\t//dist_col.rgb *= vec3(1.0001,1.00005,0.99999)* min(1.25,(2.0-v_vTexcoord.y));\r\n\t//dist_col.rgb *= vec3(1.0 + heat_intensity*.001,1.0 + heat_intensity*.0005,1.0 - heat_intensity*.001) * (1.0+heat_intensity)*(2.0-(v_vTexcoord.y));\r\n\tdist_col.rgb *= vec3(1.0 + heat_intensity*.001,1.0 + heat_intensity*.0005,1.0 - heat_intensity*.001) * (1.0 + lum*.25*heat_intensity*(2.0-(v_vTexcoord.y)));\r\n\t\r\n\t\r\n\t//high color\r\n\tif(high == 1.0)\r\n\t{\r\n\t\t//orig_col *= 1.5;\r\n\t\t\r\n\t\tvec3 high_col = rgb2hsv(orig_col.rgb);\r\n\t\thigh_col.y *= 1.0 + 0.75*high_intensity;//1.25\r\n\t\thigh_col.z *= 1.0 + .15*high_intensity;///25\r\n\t\torig_col.rgb = hsv2rgb(high_col.xyz);\r\n\t}\r\n\t\r\n\tvec4 heat_col;\r\n\tif(lum > .2)\r\n\t{\r\n\t\t//gl_FragColor = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord + distort);\r\n\t\t//gl_FragColor.rgb *= vec3(1.0001,1.00005,0.99999)* min(1.25,(2.0-v_vTexcoord.y));\r\n\t\theat_col = mix(orig_col,dist_col,.7);\r\n\t}\r\n\telse\r\n\t{\r\n\t\theat_col = mix(orig_col,dist_col,.25);\r\n\t\t//gl_FragColor.rgb*=.5;\r\n\t}\r\n\t\r\n\tgl_FragColor = heat_col;//mix(orig_col,heat_col,heat_intensity);\r\n\t\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float time;\r\nuniform vec2 texel;\r\n\r\nuniform sampler2D distort_tex;\r\nuniform float heat_intensity;\r\n\r\nuniform float high;\r\nuniform float high_intensity;\r\n\r\nconst float size = 1.0;\r\nconst float strength = .0075;\r\n\r\nconst float xSpeed = 0.02;\r\nconst float xFreq = 75.0;\r\nconst float xSize = 2.5;\r\n\r\n\r\nvec3 rgb2hsv(vec3 c)\r\n{\r\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n    float d = q.x - min(q.w, q.y);\r\n    float e = 1.0e-10;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n//*/\r\n\r\n\r\nvoid main()\r\n{\r\n\t//*\r\n\tvec2 distort;\r\n\t\r\n\tdistort.x = texture2D(distort_tex,fract(v_vTexcoord * size +vec2(0,time))).r *strength*heat_intensity;\r\n\tdistort.y = 0.0;//texture2D(distort_tex,fract(v_vTexcoord * size * 3.4 +vec2(0.0,time*1.6))).g *strength *1.3;\r\n\t//*/\r\n\t\r\n\tif(high == 1.0)\r\n\t{\r\n\t//distort.x = texture2D(distort_tex,fract(v_vTexcoord * size +vec2(0,time))).r *strength*heat_intensity;\r\n\tdistort.y = texture2D(distort_tex,fract(v_vTexcoord * size * 0.5 -vec2(0.0,time*0.75))).g *strength *0.5;\r\n\t//*/\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t//float distort = texture2D(distort_tex,fract(v_vTexcoord)).r *strength;\r\n\t//gl_FragColor = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord+distort);\r\n\tvec4 orig_col = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord);\r\n\tfloat lum = dot(orig_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\tvec4 dist_col = gl_FragColor = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord + distort*min(1.25,(1.0+v_vTexcoord.y)));\r\n\t//dist_col.rgb *= vec3(1.0001,1.00005,0.99999)* min(1.25,(2.0-v_vTexcoord.y));\r\n\t//dist_col.rgb *= vec3(1.0 + heat_intensity*.001,1.0 + heat_intensity*.0005,1.0 - heat_intensity*.001) * (1.0+heat_intensity)*(2.0-(v_vTexcoord.y));\r\n\tdist_col.rgb *= vec3(1.0 + heat_intensity*.001,1.0 + heat_intensity*.0005,1.0 - heat_intensity*.001) * (1.0 + lum*.25*heat_intensity*(2.0-(v_vTexcoord.y)));\r\n\t\r\n\t\r\n\t//high color\r\n\tif(high == 1.0)\r\n\t{\r\n\t\t//orig_col *= 1.5;\r\n\t\t\r\n\t\tvec3 high_col = rgb2hsv(orig_col.rgb);\r\n\t\thigh_col.y *= 1.0 + 0.75*high_intensity;//1.25\r\n\t\thigh_col.z *= 1.0 + .15*high_intensity;///25\r\n\t\torig_col.rgb = hsv2rgb(high_col.xyz);\r\n\t}\r\n\t\r\n\tvec4 heat_col;\r\n\tif(lum > .2)\r\n\t{\r\n\t\t//gl_FragColor = v_vColour * texture2D(gm_BaseTexture,v_vTexcoord + distort);\r\n\t\t//gl_FragColor.rgb *= vec3(1.0001,1.00005,0.99999)* min(1.25,(2.0-v_vTexcoord.y));\r\n\t\theat_col = mix(orig_col,dist_col,.7);\r\n\t}\r\n\telse\r\n\t{\r\n\t\theat_col = mix(orig_col,dist_col,.25);\r\n\t\t//gl_FragColor.rgb*=.5;\r\n\t}\r\n\t\r\n\tgl_FragColor = heat_col;//mix(orig_col,heat_col,heat_intensity);\r\n\t\r\n\t\r\n}\r\n",
        "shd_interact_glow",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float time;\r\nuniform sampler2D noise_tex;\r\nuniform sampler2D alpha_tex;\r\nuniform vec3 glow_col;\r\n\r\nvoid main()\r\n{\r\n    vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 noise_col_a = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x-time*.05),fract(v_vTexcoord.y+time*.025)));\r\n\tvec4 noise_col_b = v_vColour * texture2D(noise_tex,vec2(v_vTexcoord.x,fract(v_vTexcoord.y-time*.05)));\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex,v_vTexcoord);\r\n\t\r\n\tfloat side_amnt = .2 + sin(v_vTexcoord.y+time)*.1;\r\n\t\r\n\t\r\n\tcol.a *= alpha_col.a;\r\n\t\r\n\tif(v_vTexcoord.x < side_amnt)\r\n\t{\r\n\t\tcol.a *= v_vTexcoord.x / side_amnt;\r\n\t}\r\n\telse if(v_vTexcoord.x > 1.0-side_amnt)\r\n\t{\r\n\t\tcol.a *= (1.0-v_vTexcoord.x) / side_amnt;\r\n\t}\r\n\t\r\n\t/*\r\n\tif(v_vTexcoord.y < .75)//75\r\n\t{\r\n\t\tcol.a *= v_vTexcoord.y / .75;\r\n\t}//*/\r\n\t\r\n\t\r\n\t\r\n\t//gl_FragColor.a *= v_vTexcoord.y;\r\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\r\n\tfloat dot_lum = dot( col.rgb, lum);\r\n\t\r\n\t\r\n\tfloat color_inc_factor = 1.0;\r\n\tcolor_inc_factor *= 1.0 +noise_col_a.r;\r\n\tcolor_inc_factor *= 1.0 +noise_col_b.r;\r\n\tcolor_inc_factor *= 1.0-col.a*.6;\r\n\t\r\n\t\r\n\tcol.rgb *= 1.0+color_inc_factor*.25*v_vTexcoord.y;\r\n\t//col.a *= 1.0+color_inc_factor*.25;\r\n\t\r\n\tcol.rgb = mix(col.rgb,glow_col.rgb,.75);\r\n\t//col.a *= .75;\r\n\t//col.a = 1.0;\r\n\t\r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float time;\r\nuniform sampler2D noise_tex;\r\nuniform sampler2D alpha_tex;\r\nuniform vec3 glow_col;\r\n\r\nvoid main()\r\n{\r\n    vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 noise_col_a = v_vColour * texture2D(noise_tex,vec2(fract(v_vTexcoord.x-time*.05),fract(v_vTexcoord.y+time*.025)));\r\n\tvec4 noise_col_b = v_vColour * texture2D(noise_tex,vec2(v_vTexcoord.x,fract(v_vTexcoord.y-time*.05)));\r\n\tvec4 alpha_col = v_vColour * texture2D(alpha_tex,v_vTexcoord);\r\n\t\r\n\tfloat side_amnt = .2 + sin(v_vTexcoord.y+time)*.1;\r\n\t\r\n\t\r\n\tcol.a *= alpha_col.a;\r\n\t\r\n\tif(v_vTexcoord.x < side_amnt)\r\n\t{\r\n\t\tcol.a *= v_vTexcoord.x / side_amnt;\r\n\t}\r\n\telse if(v_vTexcoord.x > 1.0-side_amnt)\r\n\t{\r\n\t\tcol.a *= (1.0-v_vTexcoord.x) / side_amnt;\r\n\t}\r\n\t\r\n\t/*\r\n\tif(v_vTexcoord.y < .75)//75\r\n\t{\r\n\t\tcol.a *= v_vTexcoord.y / .75;\r\n\t}//*/\r\n\t\r\n\t\r\n\t\r\n\t//gl_FragColor.a *= v_vTexcoord.y;\r\n\tvec3 lum = vec3(0.299, 0.587, 0.114);\r\n\tfloat dot_lum = dot( col.rgb, lum);\r\n\t\r\n\t\r\n\tfloat color_inc_factor = 1.0;\r\n\tcolor_inc_factor *= 1.0 +noise_col_a.r;\r\n\tcolor_inc_factor *= 1.0 +noise_col_b.r;\r\n\tcolor_inc_factor *= 1.0-col.a*.6;\r\n\t\r\n\t\r\n\tcol.rgb *= 1.0+color_inc_factor*.25*v_vTexcoord.y;\r\n\t//col.a *= 1.0+color_inc_factor*.25;\r\n\t\r\n\tcol.rgb = mix(col.rgb,glow_col.rgb,.75);\r\n\t//col.a *= .75;\r\n\t//col.a = 1.0;\r\n\t\r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);\r\n}\r\n",
        "shd_introspection",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nuniform vec2 pixelWH;\r\n\r\nfloat hash(vec2 p)\r\n{\r\n    //p = mod(p, 7.31); //Bring 'p' to a useful range.\r\n    //Generate a pseudo random number from 'p'.\r\n    return fract(sin(p.x*12.9898 + p.y*78.233) * 43758.5453);\r\n}\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//gl_FragColor.rgb = vec3(.85,.93,.81);\r\n\t//*\r\n\tfloat y_val = floor(v_vTexcoord.y*10.0)*.1;\r\n\tfloat rand_val = 1.0+hash(vec2(0.5,y_val))*.25;//*.1;\r\n\t//gl_FragColor.a *= 1.0-abs(0.5-v_vTexcoord.x);\r\n\tfloat y_factor = 1.0+1.0-(abs(0.5-v_vTexcoord.y)*1.5) + rand_val*1.5;\r\n\r\n\tgl_FragColor.a *= (1.0-(abs(0.5-v_vTexcoord.x)*1.85))*y_factor;\r\n\t//*\r\n\tgl_FragColor.a *= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a *= .1;\r\n\t\r\n\r\n\t\r\n\t//*\r\n\tif(gl_FragColor.a < 1.0)\r\n\t{\r\n\t\tgl_FragColor.a = 0.0;\r\n\t}\r\n\t//else gl_FragColor.a = 1.0;\r\n\t//*/\r\n\t\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nuniform vec2 pixelWH;\r\n\r\nfloat hash(vec2 p)\r\n{\r\n    //p = mod(p, 7.31); //Bring 'p' to a useful range.\r\n    //Generate a pseudo random number from 'p'.\r\n    return fract(sin(p.x*12.9898 + p.y*78.233) * 43758.5453);\r\n}\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//gl_FragColor.rgb = vec3(.85,.93,.81);\r\n\t//*\r\n\tfloat y_val = floor(v_vTexcoord.y*10.0)*.1;\r\n\tfloat rand_val = 1.0+hash(vec2(0.5,y_val))*.25;//*.1;\r\n\t//gl_FragColor.a *= 1.0-abs(0.5-v_vTexcoord.x);\r\n\tfloat y_factor = 1.0+1.0-(abs(0.5-v_vTexcoord.y)*1.5) + rand_val*1.5;\r\n\r\n\tgl_FragColor.a *= (1.0-(abs(0.5-v_vTexcoord.x)*1.85))*y_factor;\r\n\t//*\r\n\tgl_FragColor.a *= 10.0;\r\n\tgl_FragColor.a = floor(gl_FragColor.a);\r\n\tgl_FragColor.a *= .1;\r\n\t\r\n\r\n\t\r\n\t//*\r\n\tif(gl_FragColor.a < 1.0)\r\n\t{\r\n\t\tgl_FragColor.a = 0.0;\r\n\t}\r\n\t//else gl_FragColor.a = 1.0;\r\n\t//*/\r\n\t\r\n\r\n}\r\n",
        "shd_journal_shadow",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform sampler2D distort_tex;\r\n\r\nuniform float time;\r\nuniform vec3 ol_col;\r\n\r\n\r\nconst float size = 1.0;\r\nconst float strength = .0065;\r\n\r\nvoid main()\r\n{\r\n\tvec2 distort;\r\n\tdistort.x = texture2D(distort_tex,fract(v_vTexcoord * size +vec2(0,time))).r *strength*1.0;\r\n\tdistort.y = texture2D(distort_tex,fract(v_vTexcoord * size * 3.4 +vec2(0.0,time*1.6))).g *strength *1.3;\r\n\t\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\r\n\t\r\n\tvec4 orig_col = gl_FragColor;\r\n\t//*\r\n\tvec2 offsetx = vec2(pixelW,0.0)*1.0;\r\n\tvec2 offsety = vec2(0.0,pixelH)*1.0;\r\n\t\r\n\r\n\t\tfloat alpha = texture2D( gm_BaseTexture, v_vTexcoord+distort ).a;\r\n\t\tfloat base_alpha = alpha;\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort + offsetx).a);\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort - offsetx).a);\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort + offsety).a);\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort - offsety).a);\r\n\t\t\r\n\t\tif(base_alpha != alpha)\r\n\t\t{\r\n\t\t\r\n\t\t\tgl_FragColor.rgb = ol_col;\r\n\t\t\tgl_FragColor.a = alpha;//*/\r\n\t\t}\r\n\t\telse alpha = 0.0;\r\n\t\r\n\r\n\t\r\n\tgl_FragColor.a = alpha;//*/\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform sampler2D distort_tex;\r\n\r\nuniform float time;\r\nuniform vec3 ol_col;\r\n\r\n\r\nconst float size = 1.0;\r\nconst float strength = .0065;\r\n\r\nvoid main()\r\n{\r\n\tvec2 distort;\r\n\tdistort.x = texture2D(distort_tex,fract(v_vTexcoord * size +vec2(0,time))).r *strength*1.0;\r\n\tdistort.y = texture2D(distort_tex,fract(v_vTexcoord * size * 3.4 +vec2(0.0,time*1.6))).g *strength *1.3;\r\n\t\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\r\n\t\r\n\tvec4 orig_col = gl_FragColor;\r\n\t//*\r\n\tvec2 offsetx = vec2(pixelW,0.0)*1.0;\r\n\tvec2 offsety = vec2(0.0,pixelH)*1.0;\r\n\t\r\n\r\n\t\tfloat alpha = texture2D( gm_BaseTexture, v_vTexcoord+distort ).a;\r\n\t\tfloat base_alpha = alpha;\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort + offsetx).a);\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort - offsetx).a);\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort + offsety).a);\r\n\t\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord+ distort - offsety).a);\r\n\t\t\r\n\t\tif(base_alpha != alpha)\r\n\t\t{\r\n\t\t\r\n\t\t\tgl_FragColor.rgb = ol_col;\r\n\t\t\tgl_FragColor.a = alpha;//*/\r\n\t\t}\r\n\t\telse alpha = 0.0;\r\n\t\r\n\r\n\t\r\n\tgl_FragColor.a = alpha;//*/\r\n\t\r\n}\r\n",
        "shd_jrain",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nuniform vec2 scale;\r\nuniform float pos;\r\nuniform float pos2;\r\nuniform float wave_pos;\r\nuniform sampler2D rain1;\r\nuniform sampler2D rain2;\r\nuniform sampler2D rainwave1;\r\nuniform sampler2D rainwave2;\r\nuniform sampler2D night_tex;\r\nuniform float night;\r\nuniform float full_force;\r\nconst float pi = 3.1415926;\r\n\r\nvoid main()\r\n{\r\n\tfloat scale_scale = 1.0;\r\n\tvec4 rain1color = texture2D(rain1,vec2(fract((v_vTexcoord.x*2.-pos*8.)*scale.x*scale_scale),fract((v_vTexcoord.y*2.+pos*8.)*scale.y*scale_scale)));\r\n\tvec4 rain2color = texture2D(rain2,vec2(fract((v_vTexcoord.x*3.-(pos+pos2)*10.)*scale.x*scale_scale),fract((v_vTexcoord.y*3.+pos*10.)*scale.y*scale_scale)));\r\n    vec4 rainwave1color = texture2D(rainwave1,vec2(((v_vTexcoord.x+wave_pos*1.15)*scale.x*scale_scale),((v_vTexcoord.y+wave_pos*1.-v_vTexcoord.x*0.36)*scale.y*scale_scale+sin(v_vTexcoord.x*(pi*2.)+wave_pos*0.2548*10.)*0.05)));\r\n\tvec4 rainwave2color = texture2D(rainwave2,vec2(((v_vTexcoord.x+wave_pos*1.5)*scale.x*scale_scale),((v_vTexcoord.y+wave_pos*1.-v_vTexcoord.x*0.36)*scale.y*scale_scale+sin(v_vTexcoord.x*(pi*2.)+wave_pos*0.3548*10.)*0.05)));\r\n\tfloat dist=1.0-distance(v_vTexcoord,vec2(0.5))*1.6;\r\n\t\r\n\tfloat rain_wave_mult = 1.0;\r\n\tif(night == 1.0)\r\n\t{\r\n\t\tvec4 night_col = texture2D(night_tex,v_vTexcoord);\r\n\t\train_wave_mult *= night_col.a;\r\n\t}\r\n\t\r\n\t//gl_FragColor = (rain1color + rain2color*0.5) * 0.15 * dist + (rain1color * rain2color)*rainwave1color*0.25 + rainwave1color*0.1*dist + (rainwave2color*rainwave2color*rainwave2color)*0.2*dist;\r\n\tgl_FragColor = (rain1color + rain2color*0.5) * 0.15 * 0.25 + rain_wave_mult*(rain1color * rain2color)*rainwave1color*0.25 + rainwave1color*0.05*dist + rain_wave_mult*(rainwave2color*rainwave2color*rainwave2color)*0.1*dist;\r\n\t\r\n\tif(full_force == 1.0)\r\n\t{\r\n\t\tgl_FragColor = (rain1color + rain2color*0.5);\r\n\t}\r\n\t\r\n\tgl_FragColor.a = 1.;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nuniform vec2 scale;\r\nuniform float pos;\r\nuniform float pos2;\r\nuniform float wave_pos;\r\nuniform sampler2D rain1;\r\nuniform sampler2D rain2;\r\nuniform sampler2D rainwave1;\r\nuniform sampler2D rainwave2;\r\nuniform sampler2D night_tex;\r\nuniform float night;\r\nuniform float full_force;\r\nconst float pi = 3.1415926;\r\n\r\nvoid main()\r\n{\r\n\tfloat scale_scale = 1.0;\r\n\tvec4 rain1color = texture2D(rain1,vec2(fract((v_vTexcoord.x*2.-pos*8.)*scale.x*scale_scale),fract((v_vTexcoord.y*2.+pos*8.)*scale.y*scale_scale)));\r\n\tvec4 rain2color = texture2D(rain2,vec2(fract((v_vTexcoord.x*3.-(pos+pos2)*10.)*scale.x*scale_scale),fract((v_vTexcoord.y*3.+pos*10.)*scale.y*scale_scale)));\r\n    vec4 rainwave1color = texture2D(rainwave1,vec2(((v_vTexcoord.x+wave_pos*1.15)*scale.x*scale_scale),((v_vTexcoord.y+wave_pos*1.-v_vTexcoord.x*0.36)*scale.y*scale_scale+sin(v_vTexcoord.x*(pi*2.)+wave_pos*0.2548*10.)*0.05)));\r\n\tvec4 rainwave2color = texture2D(rainwave2,vec2(((v_vTexcoord.x+wave_pos*1.5)*scale.x*scale_scale),((v_vTexcoord.y+wave_pos*1.-v_vTexcoord.x*0.36)*scale.y*scale_scale+sin(v_vTexcoord.x*(pi*2.)+wave_pos*0.3548*10.)*0.05)));\r\n\tfloat dist=1.0-distance(v_vTexcoord,vec2(0.5))*1.6;\r\n\t\r\n\tfloat rain_wave_mult = 1.0;\r\n\tif(night == 1.0)\r\n\t{\r\n\t\tvec4 night_col = texture2D(night_tex,v_vTexcoord);\r\n\t\train_wave_mult *= night_col.a;\r\n\t}\r\n\t\r\n\t//gl_FragColor = (rain1color + rain2color*0.5) * 0.15 * dist + (rain1color * rain2color)*rainwave1color*0.25 + rainwave1color*0.1*dist + (rainwave2color*rainwave2color*rainwave2color)*0.2*dist;\r\n\tgl_FragColor = (rain1color + rain2color*0.5) * 0.15 * 0.25 + rain_wave_mult*(rain1color * rain2color)*rainwave1color*0.25 + rainwave1color*0.05*dist + rain_wave_mult*(rainwave2color*rainwave2color*rainwave2color)*0.1*dist;\r\n\t\r\n\tif(full_force == 1.0)\r\n\t{\r\n\t\tgl_FragColor = (rain1color + rain2color*0.5);\r\n\t}\r\n\t\r\n\tgl_FragColor.a = 1.;\r\n}\r\n",
        "shd_map_city",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform vec3 city_col;\r\nuniform vec3 water_ol_col;\r\nuniform vec3 water_il_col;\r\nuniform vec3 water_col;\r\n\r\nuniform sampler2D city;\r\nuniform sampler2D lake_tex;\r\n\r\nfloat water_alpha = 0.75;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tfloat water_il_range = 4.0;\r\n\r\n\t\r\n\tvec2 offsetx = vec2(pixelW,0.0);\r\n\tvec2 offsety = vec2(0.0,pixelH);\r\n\t\r\n\t/*\r\n\tif(gl_FragColor.rgb == vec3(0,0,0))\r\n\t{\r\n\t\tdiscard;\r\n\t}//*/\r\n\t\r\n\t\r\n\tif(gl_FragColor.r > 0.1)\r\n\t{\r\n\t\tfloat red = texture2D( gm_BaseTexture, v_vTexcoord ).r;\r\n\t\t\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsety).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx + offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx - offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx - offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx + offsety).r);\r\n\t\tif(red == 0.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = city_col;//vec4(0.0,0.0,0.0,1.0);\r\n\t\t\tgl_FragColor.a = 1.0;\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor = v_vColour * texture2D( city, v_vTexcoord );\r\n\t\t}\r\n\t\t\r\n\t\t//gl_FragColor.rgb = vec3(0.0,0.0,0.0);\r\n\t}\r\n\telse if(gl_FragColor.rgb == vec3(0.0,.0,1.0))\r\n\t{\r\n\t\tgl_FragColor.rgb = water_col;\r\n\t\tvec4 water = v_vColour * texture2D( lake_tex, v_vTexcoord );\r\n\t\tgl_FragColor.a = water.a;\r\n\t\tfloat blue = texture2D( gm_BaseTexture, v_vTexcoord ).b;\r\n\t\t\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsetx*2.).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsetx*2.).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsety*2.).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsety*2.).b);\r\n\t\tif(blue == 0.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = water_ol_col;\r\n\t\t\tgl_FragColor.a = 1.0;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\tfloat blue = texture2D( gm_BaseTexture, v_vTexcoord ).b;\r\n\t\t\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsety).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsety).b);\r\n\t\tif(blue == 0.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = water_ol_col;\r\n\t\t\tgl_FragColor.a = water_alpha;//.5;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsetx*water_il_range).b);\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsetx*water_il_range).b);\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsety*water_il_range).b);\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsety*water_il_range).b);\r\n\t\t\tif(blue == 0.0)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = water_il_col;\r\n\t\t\t\tgl_FragColor.a = water_alpha;//.15;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = water_col;\r\n\t\t\t\tgl_FragColor.a = water_alpha;//.35;//.15\r\n\t\t\t}\r\n\t\t}//*/\r\n\t}\r\n\telse discard;\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform vec3 city_col;\r\nuniform vec3 water_ol_col;\r\nuniform vec3 water_il_col;\r\nuniform vec3 water_col;\r\n\r\nuniform sampler2D city;\r\nuniform sampler2D lake_tex;\r\n\r\nfloat water_alpha = 0.75;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tfloat water_il_range = 4.0;\r\n\r\n\t\r\n\tvec2 offsetx = vec2(pixelW,0.0);\r\n\tvec2 offsety = vec2(0.0,pixelH);\r\n\t\r\n\t/*\r\n\tif(gl_FragColor.rgb == vec3(0,0,0))\r\n\t{\r\n\t\tdiscard;\r\n\t}//*/\r\n\t\r\n\t\r\n\tif(gl_FragColor.r > 0.1)\r\n\t{\r\n\t\tfloat red = texture2D( gm_BaseTexture, v_vTexcoord ).r;\r\n\t\t\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsety).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx + offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx - offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx - offsety).r);\r\n\t\t//red = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx + offsety).r);\r\n\t\tif(red == 0.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = city_col;//vec4(0.0,0.0,0.0,1.0);\r\n\t\t\tgl_FragColor.a = 1.0;\r\n\t\t\t\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor = v_vColour * texture2D( city, v_vTexcoord );\r\n\t\t}\r\n\t\t\r\n\t\t//gl_FragColor.rgb = vec3(0.0,0.0,0.0);\r\n\t}\r\n\telse if(gl_FragColor.rgb == vec3(0.0,.0,1.0))\r\n\t{\r\n\t\tgl_FragColor.rgb = water_col;\r\n\t\tvec4 water = v_vColour * texture2D( lake_tex, v_vTexcoord );\r\n\t\tgl_FragColor.a = water.a;\r\n\t\tfloat blue = texture2D( gm_BaseTexture, v_vTexcoord ).b;\r\n\t\t\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsetx*2.).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsetx*2.).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsety*2.).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsety*2.).b);\r\n\t\tif(blue == 0.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = water_ol_col;\r\n\t\t\tgl_FragColor.a = 1.0;\r\n\t\t}\r\n\t\t\r\n\t\t/*\r\n\t\tfloat blue = texture2D( gm_BaseTexture, v_vTexcoord ).b;\r\n\t\t\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsety).b);\r\n\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsety).b);\r\n\t\tif(blue == 0.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = water_ol_col;\r\n\t\t\tgl_FragColor.a = water_alpha;//.5;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsetx*water_il_range).b);\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsetx*water_il_range).b);\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord + offsety*water_il_range).b);\r\n\t\t\tblue = min(blue,texture2D(gm_BaseTexture,v_vTexcoord - offsety*water_il_range).b);\r\n\t\t\tif(blue == 0.0)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = water_il_col;\r\n\t\t\t\tgl_FragColor.a = water_alpha;//.15;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = water_col;\r\n\t\t\t\tgl_FragColor.a = water_alpha;//.35;//.15\r\n\t\t\t}\r\n\t\t}//*/\r\n\t}\r\n\telse discard;\r\n\r\n}\r\n",
        "shd_map_forest",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nfloat tex_size = 33.0;\r\n\r\nuniform sampler2D forest;\r\nuniform sampler2D mountain;\r\nuniform sampler2D mountain_gradient;\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform vec2 offset;\r\n\r\nuniform vec3 mountain_col;\r\nuniform vec3 forest_col;\r\nuniform vec3 desert_col;\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord);\r\n\t//vec4 forest_col = gl_FragColor = v_vColour * texture2D( forest, v_vTexcoord );\r\n\tvec2 offsetx = vec2(pixelW,0.0);\r\n\tvec2 offsety = vec2(0.0,pixelH);\r\n\t\r\n\t///*\r\n\tif(gl_FragColor.rgb == vec3(0.0,1.0,0.0))\r\n\t{\r\n\t\tgl_FragColor = v_vColour * texture2D( forest, v_vTexcoord );\r\n\t\tgl_FragColor.rgb = forest_col;\r\n\t\t//gl_FragColor = v_vColour * texture2D( forest, vec2(fract(v_vTexcoord.x*tex_size),fract(v_vTexcoord.y*tex_size)) );\r\n\t}\r\n\telse if(gl_FragColor.rgb == vec3(0.0,0.0,1.0))\r\n\t{\r\n\t\tgl_FragColor = v_vColour * texture2D( forest, v_vTexcoord );\r\n\t\tgl_FragColor.rgb = desert_col;\r\n\t}//*\r\n\telse if(gl_FragColor.rgb != vec3(0.0))//else if(gl_FragColor.rgb == vec3(1.0,0.0,0.0))//MOUNTAINS\r\n\t{\r\n\t\tfloat red = texture2D( gm_BaseTexture, v_vTexcoord ).r;\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsety).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsety).r);\r\n\t\tif(red < gl_FragColor.r)\r\n\t\t{\r\n\t\t\tgl_FragColor.a = 1.0;//0.25*(1.0-red);\r\n\t\t\tgl_FragColor.rgb = mountain_col;//vec3(0.75,0.5,0.12);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.a = 0.01*(1.0-red);\r\n\t\t\tgl_FragColor.rgb = mountain_col;//vec3(.75,.75,.12);\r\n\t\t\tfloat mountain_alpha = 0.25*(1.0-red);\r\n\t\t\tvec4 mountain_gradient_col = texture2D( mountain_gradient, vec2(1.0-red,0.0));\r\n\t\t\tgl_FragColor.rgb = mountain_gradient_col.rgb;//vec4(1.0,1.0,1.0,mountain_alpha);\r\n\t\t\tgl_FragColor.a = .25;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t//gl_FragColor = v_vColour * texture2D( mountain, vec2(fract((v_vTexcoord.x)*tex_size), fract((v_vTexcoord.y)*tex_size)) );\r\n\t\t//gl_FragColor = v_vColour * texture2D( mountain, v_vTexcoord );\r\n\t}//*/\r\n\telse discard;\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nfloat tex_size = 33.0;\r\n\r\nuniform sampler2D forest;\r\nuniform sampler2D mountain;\r\nuniform sampler2D mountain_gradient;\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform vec2 offset;\r\n\r\nuniform vec3 mountain_col;\r\nuniform vec3 forest_col;\r\nuniform vec3 desert_col;\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord);\r\n\t//vec4 forest_col = gl_FragColor = v_vColour * texture2D( forest, v_vTexcoord );\r\n\tvec2 offsetx = vec2(pixelW,0.0);\r\n\tvec2 offsety = vec2(0.0,pixelH);\r\n\t\r\n\t///*\r\n\tif(gl_FragColor.rgb == vec3(0.0,1.0,0.0))\r\n\t{\r\n\t\tgl_FragColor = v_vColour * texture2D( forest, v_vTexcoord );\r\n\t\tgl_FragColor.rgb = forest_col;\r\n\t\t//gl_FragColor = v_vColour * texture2D( forest, vec2(fract(v_vTexcoord.x*tex_size),fract(v_vTexcoord.y*tex_size)) );\r\n\t}\r\n\telse if(gl_FragColor.rgb == vec3(0.0,0.0,1.0))\r\n\t{\r\n\t\tgl_FragColor = v_vColour * texture2D( forest, v_vTexcoord );\r\n\t\tgl_FragColor.rgb = desert_col;\r\n\t}//*\r\n\telse if(gl_FragColor.rgb != vec3(0.0))//else if(gl_FragColor.rgb == vec3(1.0,0.0,0.0))//MOUNTAINS\r\n\t{\r\n\t\tfloat red = texture2D( gm_BaseTexture, v_vTexcoord ).r;\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord + offsety).r);\r\n\t\tred = min(red,texture2D(gm_BaseTexture,v_vTexcoord - offsety).r);\r\n\t\tif(red < gl_FragColor.r)\r\n\t\t{\r\n\t\t\tgl_FragColor.a = 1.0;//0.25*(1.0-red);\r\n\t\t\tgl_FragColor.rgb = mountain_col;//vec3(0.75,0.5,0.12);\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.a = 0.01*(1.0-red);\r\n\t\t\tgl_FragColor.rgb = mountain_col;//vec3(.75,.75,.12);\r\n\t\t\tfloat mountain_alpha = 0.25*(1.0-red);\r\n\t\t\tvec4 mountain_gradient_col = texture2D( mountain_gradient, vec2(1.0-red,0.0));\r\n\t\t\tgl_FragColor.rgb = mountain_gradient_col.rgb;//vec4(1.0,1.0,1.0,mountain_alpha);\r\n\t\t\tgl_FragColor.a = .25;\r\n\t\t\t\r\n\t\t}\r\n\t\t\r\n\t\t//gl_FragColor = v_vColour * texture2D( mountain, vec2(fract((v_vTexcoord.x)*tex_size), fract((v_vTexcoord.y)*tex_size)) );\r\n\t\t//gl_FragColor = v_vColour * texture2D( mountain, v_vTexcoord );\r\n\t}//*/\r\n\telse discard;\r\n\r\n}\r\n",
        "shd_map_roads",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform sampler2D dot_tex;\r\n\r\n//vec3 \r\n\r\nvoid main()\r\n{\r\n\t\r\n\tvec2 offsetx = vec2(pixelW,0.0);\r\n\tvec2 offsety = vec2(0.0,pixelH);\r\n\tvec2 pixel_vec = vec2(pixelW,pixelH);\r\n\t\r\n    vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 dot_col = v_vColour * texture2D(dot_tex,fract(v_vTexcoord/pixel_vec*5.0));\r\n\t\r\n\tif(col.rgb == vec3(0.0,0.0,1.0)) //rough\r\n\t{\r\n\t\tfloat hor_alpha\t\t= floor(mod(v_vTexcoord.x/pixelW,2.0));\r\n\t\tfloat vert_alpha\t= 0.0;//floor(mod(v_vTexcoord.y/pixelH,2.0));\r\n\t\tcol.a = dot_col.a;//max(hor_alpha,vert_alpha);\r\n\t\t\r\n\t}\r\n\t\r\n\tcol.rgb = vec3(0.0);\r\n\t\r\n\t//if(col.rgb == vec3(0.0,1.0,0.0))\r\n\t//{\r\n\t\tfloat green = texture2D( gm_BaseTexture, v_vTexcoord ).g;\r\n\t\t\r\n\t\tif(green == 1.0) //OUTLINE (motorway)\r\n\t\t{\r\n\t\t\tcol.rgb = vec3(1.0);\r\n\t\t}\r\n\t\t\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + offsety).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - offsety).g);\r\n\t\t\r\n\t\tif(green != .0)\r\n\t\t{\r\n\t\t\tcol.a = green;\r\n\t\t}\r\n\t//}\r\n\t\r\n\t//col.rgb = vec3(0.0);\r\n\t\r\n\tgl_FragColor = col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform sampler2D dot_tex;\r\n\r\n//vec3 \r\n\r\nvoid main()\r\n{\r\n\t\r\n\tvec2 offsetx = vec2(pixelW,0.0);\r\n\tvec2 offsety = vec2(0.0,pixelH);\r\n\tvec2 pixel_vec = vec2(pixelW,pixelH);\r\n\t\r\n    vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 dot_col = v_vColour * texture2D(dot_tex,fract(v_vTexcoord/pixel_vec*5.0));\r\n\t\r\n\tif(col.rgb == vec3(0.0,0.0,1.0)) //rough\r\n\t{\r\n\t\tfloat hor_alpha\t\t= floor(mod(v_vTexcoord.x/pixelW,2.0));\r\n\t\tfloat vert_alpha\t= 0.0;//floor(mod(v_vTexcoord.y/pixelH,2.0));\r\n\t\tcol.a = dot_col.a;//max(hor_alpha,vert_alpha);\r\n\t\t\r\n\t}\r\n\t\r\n\tcol.rgb = vec3(0.0);\r\n\t\r\n\t//if(col.rgb == vec3(0.0,1.0,0.0))\r\n\t//{\r\n\t\tfloat green = texture2D( gm_BaseTexture, v_vTexcoord ).g;\r\n\t\t\r\n\t\tif(green == 1.0) //OUTLINE (motorway)\r\n\t\t{\r\n\t\t\tcol.rgb = vec3(1.0);\r\n\t\t}\r\n\t\t\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + offsety).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - offsety).g);\r\n\t\t\r\n\t\tif(green != .0)\r\n\t\t{\r\n\t\t\tcol.a = green;\r\n\t\t}\r\n\t//}\r\n\t\r\n\t//col.rgb = vec3(0.0);\r\n\t\r\n\tgl_FragColor = col;\r\n}\r\n",
        "shd_mix_alpha_grad",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\nuniform float mix_amount;\r\n\r\nvoid main()\r\n{\r\n\tvec4 main_col\t= v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 tex_col\t= v_vColour * texture2D( tex, v_vTexcoord );\r\n\t\r\n\t\r\n\tfloat alpha_grad = 1.0;\r\n\t\r\n    gl_FragColor.rgb = mix(main_col.rgb,tex_col.rgb,mix_amount);//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//gl_FragColor.a = alpha_grad;\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\nuniform float mix_amount;\r\n\r\nvoid main()\r\n{\r\n\tvec4 main_col\t= v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 tex_col\t= v_vColour * texture2D( tex, v_vTexcoord );\r\n\t\r\n\t\r\n\tfloat alpha_grad = 1.0;\r\n\t\r\n    gl_FragColor.rgb = mix(main_col.rgb,tex_col.rgb,mix_amount);//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//gl_FragColor.a = alpha_grad;\r\n\r\n}\r\n",
        "shd_mix",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\nuniform float mix_amount;\r\n\r\nvoid main()\r\n{\r\n\tvec4 main_col\t= v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 tex_col\t= v_vColour * texture2D( tex, v_vTexcoord );\r\n\t\r\n\t//gl_FragColor.rgba = vec4(1.0-mix_amount)*main_col.rgba + vec4(mix_amount)*tex_col.rgba;\r\n\t\r\n    gl_FragColor.rgba = mix(main_col.rgba,tex_col.rgba,mix_amount);//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor.a = main_col.a;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\nuniform float mix_amount;\r\n\r\nvoid main()\r\n{\r\n\tvec4 main_col\t= v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 tex_col\t= v_vColour * texture2D( tex, v_vTexcoord );\r\n\t\r\n\t//gl_FragColor.rgba = vec4(1.0-mix_amount)*main_col.rgba + vec4(mix_amount)*tex_col.rgba;\r\n\t\r\n    gl_FragColor.rgba = mix(main_col.rgba,tex_col.rgba,mix_amount);//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tgl_FragColor.a = main_col.a;\r\n}\r\n",
        "shd_motion_blur",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nuniform vec2 pos;//x,y\r\nconst int Quality = 32;\r\n\r\nuniform sampler2D prev_surf;\r\n\r\nvoid main()\r\n{\r\n    vec4 Color,Origin_color,Blur_color,Prev_Blur_color;\r\n\tOrigin_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord);\r\n\t//Prev_color = texture2D(prev_surf,v_vTexcoord);\r\n\r\n\r\n\tfor( float i=0.0;i<1.0;i+=1.0/float(Quality) )\r\n\t{\r\n\t\t\t\r\n\t\t\tBlur_color = texture2D( gm_BaseTexture, clamp(v_vTexcoord+(0.5-pos)*i,0.0,1.0));\r\n\t\t\tPrev_Blur_color =  texture2D( prev_surf, clamp(v_vTexcoord+(0.5-pos)*i,0.0,1.0));\r\n\t\t\t\r\n\t\t\t//Color += Blur_color;\r\n\r\n\t\t\t//*\r\n\t\t\tif(Blur_color.a > 0.0)\r\n\t\t\t{\r\n\t\t\t\tColor += Blur_color;\r\n\t\t\t}\r\n\t\t\telse if(Prev_Blur_color.a > 0.0)\r\n\t\t\t{\r\n\t\t\t\tColor += Prev_Blur_color;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//Color += Blur_color;\r\n\t\t\t\t//Color += Origin_color * vec4(1.0,0.0,0.0,0.5);\r\n\t\t\t}//*/\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tif(Blur_color.a > 0.0)\r\n\t\t\t{\r\n\t\t\t\tColor = Blur_color;//texture2D( gm_BaseTexture, clamp(v_vTexcoord+(0.5-pos)*i,0.0,1.0));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tBlur_color = Prev_Blur_color;\r\n\t\t\t\tColor = Blur_color;\r\n\t\t\t\tif(Blur_color.a <= 0.0)\r\n\t\t\t\t{\r\n\t\t\t\t\tColor.rgba = Origin_color.rgba;\r\n\t\t\t\t}\r\n\t\t\t}//*/\r\n\t\t\t//else Color += Origin_color;\r\n\r\n\t}\r\n\t\r\n\tColor /= float(Quality);\r\n\t//Color.a = texture2D( gm_BaseTexture, v_vTexcoord).a;\r\n\t/*\r\n\tif(Color.a == 0.0)\r\n\t{\r\n\t\tdiscard;\r\n\t}//*/\r\n\t//Color.a = Origin_color.a;\r\n\t//Color.a = mix(Origin_color.a,Color.a,Color.a);\r\n\t//gl_FragColor =  Color * v_vColour;\r\n\t//DISABLE MOTION BLUR\r\n\tgl_FragColor =  v_vColour * texture2D( gm_BaseTexture, v_vTexcoord);\r\n\t\r\n\t//PREMALPHA\r\n\t/*\r\n\tvec4 col = gl_FragColor;\r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);//*/\r\n\t\r\n\t\r\n\t//gl_FragColor =  mix(Color,Origin_color,1.1-Origin_color.a) *  v_vColour;\r\n\t//gl_FragColor =  mix(Origin_color,Color,Color.a) *  v_vColour;\r\n\t//gl_FragColor.a = Origin_color.a;\r\n\t//vec4 col = gl_FragColor;\r\n\t//gl_FragColor = vec4(col.a*col.rgb,col.a);\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\nuniform vec2 pos;//x,y\r\nconst int Quality = 32;\r\n\r\nuniform sampler2D prev_surf;\r\n\r\nvoid main()\r\n{\r\n    vec4 Color,Origin_color,Blur_color,Prev_Blur_color;\r\n\tOrigin_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord);\r\n\t//Prev_color = texture2D(prev_surf,v_vTexcoord);\r\n\r\n\r\n\tfor( float i=0.0;i<1.0;i+=1.0/float(Quality) )\r\n\t{\r\n\t\t\t\r\n\t\t\tBlur_color = texture2D( gm_BaseTexture, clamp(v_vTexcoord+(0.5-pos)*i,0.0,1.0));\r\n\t\t\tPrev_Blur_color =  texture2D( prev_surf, clamp(v_vTexcoord+(0.5-pos)*i,0.0,1.0));\r\n\t\t\t\r\n\t\t\t//Color += Blur_color;\r\n\r\n\t\t\t//*\r\n\t\t\tif(Blur_color.a > 0.0)\r\n\t\t\t{\r\n\t\t\t\tColor += Blur_color;\r\n\t\t\t}\r\n\t\t\telse if(Prev_Blur_color.a > 0.0)\r\n\t\t\t{\r\n\t\t\t\tColor += Prev_Blur_color;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//Color += Blur_color;\r\n\t\t\t\t//Color += Origin_color * vec4(1.0,0.0,0.0,0.5);\r\n\t\t\t}//*/\r\n\t\t\t\r\n\t\t\t/*\r\n\t\t\tif(Blur_color.a > 0.0)\r\n\t\t\t{\r\n\t\t\t\tColor = Blur_color;//texture2D( gm_BaseTexture, clamp(v_vTexcoord+(0.5-pos)*i,0.0,1.0));\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\tBlur_color = Prev_Blur_color;\r\n\t\t\t\tColor = Blur_color;\r\n\t\t\t\tif(Blur_color.a <= 0.0)\r\n\t\t\t\t{\r\n\t\t\t\t\tColor.rgba = Origin_color.rgba;\r\n\t\t\t\t}\r\n\t\t\t}//*/\r\n\t\t\t//else Color += Origin_color;\r\n\r\n\t}\r\n\t\r\n\tColor /= float(Quality);\r\n\t//Color.a = texture2D( gm_BaseTexture, v_vTexcoord).a;\r\n\t/*\r\n\tif(Color.a == 0.0)\r\n\t{\r\n\t\tdiscard;\r\n\t}//*/\r\n\t//Color.a = Origin_color.a;\r\n\t//Color.a = mix(Origin_color.a,Color.a,Color.a);\r\n\t//gl_FragColor =  Color * v_vColour;\r\n\t//DISABLE MOTION BLUR\r\n\tgl_FragColor =  v_vColour * texture2D( gm_BaseTexture, v_vTexcoord);\r\n\t\r\n\t//PREMALPHA\r\n\t/*\r\n\tvec4 col = gl_FragColor;\r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);//*/\r\n\t\r\n\t\r\n\t//gl_FragColor =  mix(Color,Origin_color,1.1-Origin_color.a) *  v_vColour;\r\n\t//gl_FragColor =  mix(Origin_color,Color,Color.a) *  v_vColour;\r\n\t//gl_FragColor.a = Origin_color.a;\r\n\t//vec4 col = gl_FragColor;\r\n\t//gl_FragColor = vec4(col.a*col.rgb,col.a);\r\n\r\n}\r\n",
        "shd_music_menu_screen",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform vec3 ol_col;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec2 offsetx = vec2(pixelW,0.0)*1.0;\r\n\tvec2 offsety = vec2(0.0,pixelH)*1.0;\r\n\t\r\n\tfloat alpha = texture2D( gm_BaseTexture, v_vTexcoord ).a;\r\n\tfloat base_alpha = alpha;\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsety).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsety).a);\r\n\t\t\r\n\tif(base_alpha != alpha)\r\n\t{\r\n\t\t\r\n\t\tgl_FragColor.rgb = ol_col;\r\n\t\tgl_FragColor.a = alpha;//*/\r\n\t}\r\n\telse alpha = 0.0;\r\n\t\r\n\r\n\t\r\n\t//gl_FragColor.a = alpha;//*/\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float pixelW;\r\nuniform float pixelH;\r\n\r\nuniform vec3 ol_col;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec2 offsetx = vec2(pixelW,0.0)*1.0;\r\n\tvec2 offsety = vec2(0.0,pixelH)*1.0;\r\n\t\r\n\tfloat alpha = texture2D( gm_BaseTexture, v_vTexcoord ).a;\r\n\tfloat base_alpha = alpha;\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsety).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsety).a);\r\n\t\t\r\n\tif(base_alpha != alpha)\r\n\t{\r\n\t\t\r\n\t\tgl_FragColor.rgb = ol_col;\r\n\t\tgl_FragColor.a = alpha;//*/\r\n\t}\r\n\telse alpha = 0.0;\r\n\t\r\n\r\n\t\r\n\t//gl_FragColor.a = alpha;//*/\r\n\t\r\n}\r\n",
        "shd_options",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float base_intensity;\r\nuniform float intensity;\r\nuniform float intensity_line;\r\n\r\nvoid main()\r\n{\r\n   //gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//sets the base color without changes\r\n\t//vec4 because it has 4 values: (red, green, blue, alpha)\r\n\tvec4 basecolor = texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\t//create newcolor to equal basecolor\r\n\tvec4 newcolor = basecolor;\r\n\t\r\n\t//divides level of intensity by 100\r\n\tfloat adj_amt = base_intensity;//.002;//intensity / 100.0;\r\n\tif(v_vTexcoord.x >= intensity_line\r\n\t&& v_vTexcoord.x <= intensity_line+.005)\r\n\t{\r\n\t\tadj_amt = intensity;\r\n\t}\r\n\t\t\r\n\t//offsets the red value\r\n\tnewcolor.r = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x + adj_amt, v_vTexcoord.y + adj_amt)).r;\r\n\t// green value stays the same\r\n\tnewcolor.g = basecolor.g;\r\n\t//offsets the blue value\r\n\tnewcolor.b = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x - adj_amt, v_vTexcoord.y - adj_amt)).b;\r\n\r\n\t//sets the fragment color to the value of newcolor\r\n\tgl_FragColor = newcolor;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float base_intensity;\r\nuniform float intensity;\r\nuniform float intensity_line;\r\n\r\nvoid main()\r\n{\r\n   //gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t//sets the base color without changes\r\n\t//vec4 because it has 4 values: (red, green, blue, alpha)\r\n\tvec4 basecolor = texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\t//create newcolor to equal basecolor\r\n\tvec4 newcolor = basecolor;\r\n\t\r\n\t//divides level of intensity by 100\r\n\tfloat adj_amt = base_intensity;//.002;//intensity / 100.0;\r\n\tif(v_vTexcoord.x >= intensity_line\r\n\t&& v_vTexcoord.x <= intensity_line+.005)\r\n\t{\r\n\t\tadj_amt = intensity;\r\n\t}\r\n\t\t\r\n\t//offsets the red value\r\n\tnewcolor.r = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x + adj_amt, v_vTexcoord.y + adj_amt)).r;\r\n\t// green value stays the same\r\n\tnewcolor.g = basecolor.g;\r\n\t//offsets the blue value\r\n\tnewcolor.b = texture2D(gm_BaseTexture, vec2(v_vTexcoord.x - adj_amt, v_vTexcoord.y - adj_amt)).b;\r\n\r\n\t//sets the fragment color to the value of newcolor\r\n\tgl_FragColor = newcolor;\r\n}\r\n",
        "shd_outline",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 pixel_size;\r\nuniform vec3 col;\r\nuniform float alpha;\r\n\r\nvoid main()\r\n{\r\n\t//THIS SHADER DOESNT WORK: NEEDS UVs AND STUFF. FIX SOMETIME\r\n\tvec4 orig_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tvec2 offsetx = vec2(pixel_size.x,0.0);\r\n\tvec2 offsety = vec2(0.0,pixel_size.y);\r\n\t\r\n\t\r\n\tfloat orig_alpha = orig_col.a;\r\n\tfloat alpha = orig_alpha;\r\n\t\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsety).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsety).a);\r\n\talpha = ceil(alpha);\r\n\t\r\n\torig_col.a = alpha;\r\n\t//*\r\n\tif(orig_alpha == 0.0)\r\n\t{\r\n\t\torig_col.rgb = col.rgb;//vec3(1.0,.0,.0);\r\n\t}//*/\r\n\t\r\n\tif(orig_col.rgb == 0.0)\r\n\t{\r\n\t\tdiscard;\r\n\t}\r\n\t\r\n    gl_FragColor = orig_col;//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform vec2 pixel_size;\r\nuniform vec3 col;\r\nuniform float alpha;\r\n\r\nvoid main()\r\n{\r\n\t//THIS SHADER DOESNT WORK: NEEDS UVs AND STUFF. FIX SOMETIME\r\n\tvec4 orig_col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\tvec2 offsetx = vec2(pixel_size.x,0.0);\r\n\tvec2 offsety = vec2(0.0,pixel_size.y);\r\n\t\r\n\t\r\n\tfloat orig_alpha = orig_col.a;\r\n\tfloat alpha = orig_alpha;\r\n\t\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsetx).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord + offsety).a);\r\n\talpha = max(alpha,texture2D(gm_BaseTexture,v_vTexcoord - offsety).a);\r\n\talpha = ceil(alpha);\r\n\t\r\n\torig_col.a = alpha;\r\n\t//*\r\n\tif(orig_alpha == 0.0)\r\n\t{\r\n\t\torig_col.rgb = col.rgb;//vec3(1.0,.0,.0);\r\n\t}//*/\r\n\t\r\n\tif(orig_col.rgb == 0.0)\r\n\t{\r\n\t\tdiscard;\r\n\t}\r\n\t\r\n    gl_FragColor = orig_col;//v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n}\r\n",
        "shd_overall_bg",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float night;\r\nuniform vec3 glitter_col;\r\nuniform vec3 light_col;\r\nuniform vec3 dark_light_col;\r\nuniform sampler2D fox_tex;\r\nuniform vec3 darkness_col;\r\n\r\nuniform float thunder;\r\n\r\nbool lighten = false;\r\nbool half_light = false;\r\n\r\nvec2 offset = vec2(1.0/480.0,1.0/270.0);\r\n\r\n//LUT ADD\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\nuniform sampler2D lut_tex_env;\r\nuniform float lut_strength_env;\r\n\r\nuniform sampler2D lut_tex_env_prev;\r\nuniform float lut_strength_env_prev;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\n\r\n\r\n\r\nvec3 light_check_col = vec3(1.0,1.0,0.0); //ignore blue\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 fox_color = v_vColour * texture2D( fox_tex, v_vTexcoord );\r\n\t\r\n\t//if(night == 1.0)\r\n\tif(night > 0.0)\r\n\t{\r\n\t\t//LIGHTS\r\n\t\tvec4 night_col = gl_FragColor;\r\n\t\t//light check method\r\n\t\tvec3 pos_col = texture2D( gm_BaseTexture, v_vTexcoord ).rgb;\r\n\t\tbool light_found = false;\r\n\t\t\r\n\t\tif(pos_col == light_check_col)\r\n\t\t{\r\n\t\t\tlight_found = true;\r\n\t\t\t\r\n\t\t}\r\n\t\t/*\r\n\t\tif(!light_found)\r\n\t\t{\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord + vec2(offset.x,0.0)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord - vec2(offset.x,0.0)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord + vec2(0.0,offset.y)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord - vec2(0.0,offset.y)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t}//*/\r\n\t\t\r\n\t\tif(light_found)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = light_col.rgb;\r\n\t\t\tif(half_light)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = light_col.rgb * .95;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//gl_FragColor.rgb =mix(gl_FragColor.rgb,glitter_col.rgb,mix_amount);\r\n\t\t\t//gl_FragColor.rgb = vec3(1.0,1.0,0.0);\r\n\t\t\tlighten = true;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t//GREEN METHOD\r\n\t\t/*\r\n\t\tfloat green = texture2D( gm_BaseTexture, v_vTexcoord ).g;\r\n\t\t\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + vec2(offset.x,0.0)).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - vec2(offset.x,0.0)).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + vec2(0.0,offset.y)).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - vec2(0.0,offset.y)).g);\r\n\r\n\t\tif(green == 1.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = glitter_col.rgb;\r\n\t\t\t//gl_FragColor.rgb = vec3(1.0,1.0,0.0);\r\n\t\t\tlighten = true;\r\n\t\t}//*/\r\n\t\t//GLITTER\r\n\t\tif(!lighten)\r\n\t\t{\r\n\t\t\tif(gl_FragColor.rgb == vec3(0.0,1.0,0.0))\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = glitter_col.rgb;\r\n\t\t\t}\r\n\t\t\telse if(gl_FragColor.rgb != vec3(1.0,0.0,0.0))\r\n\t\t\t{\r\n\t\t\t\t//gl_FragColor.rgb *= .075;\r\n\t\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb,darkness_col.rgb,.9*night);//95\r\n\t\t\t\t//gl_FragColor.rgb = dark_light_col;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//gl_FragColor.rgb = glitter_col.rgb;\r\n\t\t\t\tgl_FragColor.rgb = dark_light_col;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t//THUNDER\r\n\tif(thunder > 0.0)\r\n\t{\r\n\t\tfloat lum = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t\tfloat threshold = .5;\r\n\t\tif(night == 1.0)\r\n\t\t{\r\n\t\t\tthreshold = .3;\r\n\t\t}\r\n\t\tif(lum >= threshold)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t\tgl_FragColor.rgb *= 1.0 - .35 * thunder;\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb *= 1.0 - 0.5*thunder;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t \r\n\tfloat gray = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\tvec4 shade = vec4(gray * fox_color.rgb,1.0);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,fox_color.rgb,.15);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,shade.rgb,.15);//DISABLED FOX\r\n\t\r\n\tvec4 col = gl_FragColor;\r\n\t \r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);\r\n\t\r\n\t//ADD LUT//////////////////////////////////////////////////////\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\r\n\t//OUTPUT OLD_ENV\r\n\tvec3 out_col_env_prev = mix(texture2D(lut_tex_env_prev,lower_sample).rgb,texture2D(lut_tex_env_prev,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env_prev = mix(base_col.rgb,out_col_env_prev,lut_strength_env_prev);\r\n\t//OUTPUT NEW_ENV\r\n\tvec3 out_col_env = mix(texture2D(lut_tex_env,lower_sample).rgb,texture2D(lut_tex_env,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env = mix(out_col_env_prev.rgb,out_col_env,lut_strength_env);\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(out_col_env.rgb,out_col,lut_strength);\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t//gl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float night;\r\nuniform vec3 glitter_col;\r\nuniform vec3 light_col;\r\nuniform vec3 dark_light_col;\r\nuniform sampler2D fox_tex;\r\nuniform vec3 darkness_col;\r\n\r\nuniform float thunder;\r\n\r\nbool lighten = false;\r\nbool half_light = false;\r\n\r\nvec2 offset = vec2(1.0/480.0,1.0/270.0);\r\n\r\n//LUT ADD\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\nuniform sampler2D lut_tex_env;\r\nuniform float lut_strength_env;\r\n\r\nuniform sampler2D lut_tex_env_prev;\r\nuniform float lut_strength_env_prev;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\n\r\n\r\n\r\nvec3 light_check_col = vec3(1.0,1.0,0.0); //ignore blue\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 fox_color = v_vColour * texture2D( fox_tex, v_vTexcoord );\r\n\t\r\n\t//if(night == 1.0)\r\n\tif(night > 0.0)\r\n\t{\r\n\t\t//LIGHTS\r\n\t\tvec4 night_col = gl_FragColor;\r\n\t\t//light check method\r\n\t\tvec3 pos_col = texture2D( gm_BaseTexture, v_vTexcoord ).rgb;\r\n\t\tbool light_found = false;\r\n\t\t\r\n\t\tif(pos_col == light_check_col)\r\n\t\t{\r\n\t\t\tlight_found = true;\r\n\t\t\t\r\n\t\t}\r\n\t\t/*\r\n\t\tif(!light_found)\r\n\t\t{\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord + vec2(offset.x,0.0)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord - vec2(offset.x,0.0)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord + vec2(0.0,offset.y)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t\tif( texture2D(gm_BaseTexture,v_vTexcoord - vec2(0.0,offset.y)).rgb == light_check_col)\r\n\t\t\t{\r\n\t\t\t\tlight_found = true;\r\n\t\t\t\thalf_light = true;\r\n\t\t\t}\r\n\t\t}//*/\r\n\t\t\r\n\t\tif(light_found)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = light_col.rgb;\r\n\t\t\tif(half_light)\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = light_col.rgb * .95;\r\n\t\t\t}\r\n\t\t\t\r\n\t\t\t//gl_FragColor.rgb =mix(gl_FragColor.rgb,glitter_col.rgb,mix_amount);\r\n\t\t\t//gl_FragColor.rgb = vec3(1.0,1.0,0.0);\r\n\t\t\tlighten = true;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t//GREEN METHOD\r\n\t\t/*\r\n\t\tfloat green = texture2D( gm_BaseTexture, v_vTexcoord ).g;\r\n\t\t\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + vec2(offset.x,0.0)).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - vec2(offset.x,0.0)).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord + vec2(0.0,offset.y)).g);\r\n\t\tgreen = max(green,texture2D(gm_BaseTexture,v_vTexcoord - vec2(0.0,offset.y)).g);\r\n\r\n\t\tif(green == 1.0)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = glitter_col.rgb;\r\n\t\t\t//gl_FragColor.rgb = vec3(1.0,1.0,0.0);\r\n\t\t\tlighten = true;\r\n\t\t}//*/\r\n\t\t//GLITTER\r\n\t\tif(!lighten)\r\n\t\t{\r\n\t\t\tif(gl_FragColor.rgb == vec3(0.0,1.0,0.0))\r\n\t\t\t{\r\n\t\t\t\tgl_FragColor.rgb = glitter_col.rgb;\r\n\t\t\t}\r\n\t\t\telse if(gl_FragColor.rgb != vec3(1.0,0.0,0.0))\r\n\t\t\t{\r\n\t\t\t\t//gl_FragColor.rgb *= .075;\r\n\t\t\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb,darkness_col.rgb,.9*night);//95\r\n\t\t\t\t//gl_FragColor.rgb = dark_light_col;\r\n\t\t\t}\r\n\t\t\telse\r\n\t\t\t{\r\n\t\t\t\t//gl_FragColor.rgb = glitter_col.rgb;\r\n\t\t\t\tgl_FragColor.rgb = dark_light_col;\r\n\t\t\t}\r\n\t\t}\r\n\t\t\r\n\t\t\r\n\t}\r\n\t\r\n\t//THUNDER\r\n\tif(thunder > 0.0)\r\n\t{\r\n\t\tfloat lum = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t\tfloat threshold = .5;\r\n\t\tif(night == 1.0)\r\n\t\t{\r\n\t\t\tthreshold = .3;\r\n\t\t}\r\n\t\tif(lum >= threshold)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t\tgl_FragColor.rgb *= 1.0 - .35 * thunder;\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb *= 1.0 - 0.5*thunder;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t \r\n\tfloat gray = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\tvec4 shade = vec4(gray * fox_color.rgb,1.0);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,fox_color.rgb,.15);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,shade.rgb,.15);//DISABLED FOX\r\n\t\r\n\tvec4 col = gl_FragColor;\r\n\t \r\n\tgl_FragColor = vec4(col.a*col.rgb,col.a);\r\n\t\r\n\t//ADD LUT//////////////////////////////////////////////////////\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\r\n\t//OUTPUT OLD_ENV\r\n\tvec3 out_col_env_prev = mix(texture2D(lut_tex_env_prev,lower_sample).rgb,texture2D(lut_tex_env_prev,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env_prev = mix(base_col.rgb,out_col_env_prev,lut_strength_env_prev);\r\n\t//OUTPUT NEW_ENV\r\n\tvec3 out_col_env = mix(texture2D(lut_tex_env,lower_sample).rgb,texture2D(lut_tex_env,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env = mix(out_col_env_prev.rgb,out_col_env,lut_strength_env);\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(out_col_env.rgb,out_col,lut_strength);\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t//gl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);\r\n}\r\n",
        "shd_overall_front",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float night;\r\nuniform sampler2D light_tex;\r\nuniform sampler2D bg_tex;\r\nuniform sampler2D fox_tex;\r\nuniform vec3 darkness_col;\r\n\r\nuniform float thunder;\r\n\r\nuniform sampler2D shadow_tex;\r\nuniform float shadow_alpha;\r\n//uniform float shadow_x;\r\n//LUT ADD\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\nuniform sampler2D lut_tex_env;\r\nuniform float lut_strength_env;\r\n\r\nuniform sampler2D lut_tex_env_prev;\r\nuniform float lut_strength_env_prev;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\n\r\nvec3 rgb2hsv(vec3 c)\r\n{\r\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n    float d = q.x - min(q.w, q.y);\r\n    float e = 1.0e-10;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord  );\r\n    vec4 light_color = v_vColour * texture2D( light_tex, v_vTexcoord );\r\n    vec4 bg_color = v_vColour * texture2D( bg_tex, v_vTexcoord );\r\n    vec4 fox_color = v_vColour * texture2D( fox_tex, v_vTexcoord );\r\n\t//vec4 shadow_color = v_vColour * texture2D( shadow_tex,  vec2(fract(v_vTexcoord.x+shadow_x),v_vTexcoord.y) );\r\n\tvec4 shadow_color = v_vColour * texture2D( shadow_tex, v_vTexcoord);\r\n\t\r\n\t/*\r\n\tif(light_color.rgb == vec3(.0,.0,.0))\r\n\t{\r\n\t\tlight_color.a = .0;\r\n\t}//*/\r\n\tvec3 light_lum = vec3(0.299, 0.587, 0.114);\r\n\tfloat light_dot_lum = dot( light_color.rgb, light_lum);\r\n\tlight_color.a *= light_dot_lum;\r\n\t//premultiply alhpa of original color\r\n\t//orig_color = vec4(orig_color.a*orig_color.rgb,orig_color.a);\r\n\t\r\n\tgl_FragColor = orig_color;\r\n\t\r\n\tgl_FragColor.rgb *= 1.0 - .9 *shadow_color.a * shadow_alpha;\r\n\t//orig_color = vec4(orig_color.a*orig_color.rgb,orig_color.a);\r\n\t//gl_FragColor = orig_color;\r\n\t//if(night == 1.0)\r\n\tif(night > 0.0)\r\n\t{\r\n\t\tvec4 night_col = gl_FragColor;\r\n\t\t//gl_FragColor.rgb *= vec3(.45,.45,.65);\r\n\t\t//gl_FragColor.rgb *= darkness_col;//vec3(.45,.45,.65);\r\n\t\tnight_col.rgb = mix(gl_FragColor.rgb,darkness_col,(1.0-light_color.a)*.7);//75\r\n\t\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,light_color.rgb,light_color.a*.5);\r\n\t\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,light_color.rgb,light_color.a*.125);\r\n\t\t\r\n\t\t//greyscael tone shader\r\n\t\t//*\r\n\t\tfloat gray\t\t\t= dot(night_col.rgb, vec3(0.299, 0.587, 0.114));\r\n\t\tvec3 shade\t\t\t= vec3(gray * light_color.rgb);\r\n\t\tnight_col.rgb\t= mix(shade, night_col.rgb, 1.0-light_color.a*.5);\r\n\t\t//*/\r\n\t\t\r\n\t\t//gl_FragColor.rgb = smoothstep(gl_FragColor.rgb,light_color.rgb,light_color.a*.125);\r\n\t\t//HSV TRIES\r\n\t\t/*\r\n\t\tvec3 hsv_frag\t= rgb2hsv(gl_FragColor.rgb);\r\n\t\tvec3 hsv_light\t= rgb2hsv(light_color.rgb);\r\n\t\t\r\n\t\tvec3 new_hsv = hsv_frag.rgb;\r\n\t\t//new_hsv.r *= (hsv_light.r*light_color.a);\r\n\t\tnew_hsv.r = mix(hsv_frag.r,hsv_light.r,light_color.a);\r\n\t\t\r\n\t\tgl_FragColor.rgb = hsv2rgb(new_hsv);//*/\r\n\t\t\r\n\t\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,orig_color.rgb,light_color.a);\r\n\t\t\r\n\t\tif(orig_color.a == 0.0)\r\n\t\t{\r\n\t\t\tnight_col.rgb = bg_color.rgb;//*light_color.a;\r\n\t\t\tnight_col.a = bg_color.a*light_color.a*.5;//*light_color.a;\r\n\t\t}\r\n\t\t\r\n\t\tvec3 lum = vec3(0.299, 0.587, 0.114);\r\n\t\tfloat dot_lum = dot( night_col.rgb, lum);\r\n\t\t\r\n\t\tvec4 bw_col  = night_col;//vec4( vec3(dot_lum), gl_FragColor.a);\r\n\t\tif(dot_lum >= .5)\r\n\t\t{\r\n\t\t\tbw_col *= 1.0*light_color;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvec3 dark_col = dot_lum * orig_color.rgb;\r\n\t\tif(dot_lum < .1)//.55\r\n\t\t{\r\n\t\t\tbw_col.rgb *= dot_lum*1.5;\r\n\t\t\t//gl_FragColor.rgb *= .25 * (1.0-light_color.a);\r\n\t\t\tbw_col.rgb = mix(bw_col.rgb,dark_col.rgb,(1.0-light_color.a)*2.0);\r\n\t\t}\r\n\t\t\r\n\t\tnight_col.rgb = mix(night_col.rgb,bw_col.rgb,light_color.a);\r\n\t\t\r\n\t\tgl_FragColor = mix(gl_FragColor,night_col,night);\r\n\t\t//gl_FragColor = light_color;\r\n\t\t\r\n\t\t\r\n\t}\r\n\t//float gray = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t//vec4 shade =  vec4(gray,1.0);//vec4(gray * fox_color.rgb,1.0);\r\n\t////gl_FragColor.rgb = mix(gl_FragColor.rgb,fox_color.rgb,.15);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,shade.rgb,.15);\r\n\tgl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);//pre multiply alpha\r\n\t\r\n\t\r\n\t//THUNDER\r\n\tif(thunder > 0.0)\r\n\t{\r\n\t\tfloat threshold = .5;\r\n\t\tif(night == 1.0)\r\n\t\t{\r\n\t\t\tthreshold = .3;\r\n\t\t}\r\n\t\tfloat lum = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t\tif(lum >= threshold)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t\tgl_FragColor.rgb *= 1.0 - .35 * thunder;\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb *= 1.0 - 0.5*thunder;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t//ADD LUT//////////////////////////////////////////////////////\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t//OUTPUT OLD_ENV\r\n\tvec3 out_col_env_prev = mix(texture2D(lut_tex_env_prev,lower_sample).rgb,texture2D(lut_tex_env_prev,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env_prev = mix(base_col.rgb,out_col_env_prev,lut_strength_env_prev*(1.0-light_color.a));\r\n\t//OUTPUT NEW_ENV\r\n\tvec3 out_col_env = mix(texture2D(lut_tex_env,lower_sample).rgb,texture2D(lut_tex_env,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env = mix(out_col_env_prev.rgb,out_col_env,lut_strength_env*(1.0-light_color.a));\r\n\t\r\n\t\r\n\t//OUTPUT #NIGHT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(out_col_env.rgb,out_col,lut_strength*(1.0-light_color.a));\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t\r\n\t\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float night;\r\nuniform sampler2D light_tex;\r\nuniform sampler2D bg_tex;\r\nuniform sampler2D fox_tex;\r\nuniform vec3 darkness_col;\r\n\r\nuniform float thunder;\r\n\r\nuniform sampler2D shadow_tex;\r\nuniform float shadow_alpha;\r\n//uniform float shadow_x;\r\n//LUT ADD\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\n\r\nuniform sampler2D lut_tex_env;\r\nuniform float lut_strength_env;\r\n\r\nuniform sampler2D lut_tex_env_prev;\r\nuniform float lut_strength_env_prev;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\n\r\nvec3 rgb2hsv(vec3 c)\r\n{\r\n    vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\r\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\r\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\r\n\r\n    float d = q.x - min(q.w, q.y);\r\n    float e = 1.0e-10;\r\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\r\n}\r\n\r\nvec3 hsv2rgb(vec3 c)\r\n{\r\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\r\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\r\n    return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\r\n}\r\n\r\nvoid main()\r\n{\r\n    vec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord  );\r\n    vec4 light_color = v_vColour * texture2D( light_tex, v_vTexcoord );\r\n    vec4 bg_color = v_vColour * texture2D( bg_tex, v_vTexcoord );\r\n    vec4 fox_color = v_vColour * texture2D( fox_tex, v_vTexcoord );\r\n\t//vec4 shadow_color = v_vColour * texture2D( shadow_tex,  vec2(fract(v_vTexcoord.x+shadow_x),v_vTexcoord.y) );\r\n\tvec4 shadow_color = v_vColour * texture2D( shadow_tex, v_vTexcoord);\r\n\t\r\n\t/*\r\n\tif(light_color.rgb == vec3(.0,.0,.0))\r\n\t{\r\n\t\tlight_color.a = .0;\r\n\t}//*/\r\n\tvec3 light_lum = vec3(0.299, 0.587, 0.114);\r\n\tfloat light_dot_lum = dot( light_color.rgb, light_lum);\r\n\tlight_color.a *= light_dot_lum;\r\n\t//premultiply alhpa of original color\r\n\t//orig_color = vec4(orig_color.a*orig_color.rgb,orig_color.a);\r\n\t\r\n\tgl_FragColor = orig_color;\r\n\t\r\n\tgl_FragColor.rgb *= 1.0 - .9 *shadow_color.a * shadow_alpha;\r\n\t//orig_color = vec4(orig_color.a*orig_color.rgb,orig_color.a);\r\n\t//gl_FragColor = orig_color;\r\n\t//if(night == 1.0)\r\n\tif(night > 0.0)\r\n\t{\r\n\t\tvec4 night_col = gl_FragColor;\r\n\t\t//gl_FragColor.rgb *= vec3(.45,.45,.65);\r\n\t\t//gl_FragColor.rgb *= darkness_col;//vec3(.45,.45,.65);\r\n\t\tnight_col.rgb = mix(gl_FragColor.rgb,darkness_col,(1.0-light_color.a)*.7);//75\r\n\t\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,light_color.rgb,light_color.a*.5);\r\n\t\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,light_color.rgb,light_color.a*.125);\r\n\t\t\r\n\t\t//greyscael tone shader\r\n\t\t//*\r\n\t\tfloat gray\t\t\t= dot(night_col.rgb, vec3(0.299, 0.587, 0.114));\r\n\t\tvec3 shade\t\t\t= vec3(gray * light_color.rgb);\r\n\t\tnight_col.rgb\t= mix(shade, night_col.rgb, 1.0-light_color.a*.5);\r\n\t\t//*/\r\n\t\t\r\n\t\t//gl_FragColor.rgb = smoothstep(gl_FragColor.rgb,light_color.rgb,light_color.a*.125);\r\n\t\t//HSV TRIES\r\n\t\t/*\r\n\t\tvec3 hsv_frag\t= rgb2hsv(gl_FragColor.rgb);\r\n\t\tvec3 hsv_light\t= rgb2hsv(light_color.rgb);\r\n\t\t\r\n\t\tvec3 new_hsv = hsv_frag.rgb;\r\n\t\t//new_hsv.r *= (hsv_light.r*light_color.a);\r\n\t\tnew_hsv.r = mix(hsv_frag.r,hsv_light.r,light_color.a);\r\n\t\t\r\n\t\tgl_FragColor.rgb = hsv2rgb(new_hsv);//*/\r\n\t\t\r\n\t\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,orig_color.rgb,light_color.a);\r\n\t\t\r\n\t\tif(orig_color.a == 0.0)\r\n\t\t{\r\n\t\t\tnight_col.rgb = bg_color.rgb;//*light_color.a;\r\n\t\t\tnight_col.a = bg_color.a*light_color.a*.5;//*light_color.a;\r\n\t\t}\r\n\t\t\r\n\t\tvec3 lum = vec3(0.299, 0.587, 0.114);\r\n\t\tfloat dot_lum = dot( night_col.rgb, lum);\r\n\t\t\r\n\t\tvec4 bw_col  = night_col;//vec4( vec3(dot_lum), gl_FragColor.a);\r\n\t\tif(dot_lum >= .5)\r\n\t\t{\r\n\t\t\tbw_col *= 1.0*light_color;\r\n\t\t}\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tvec3 dark_col = dot_lum * orig_color.rgb;\r\n\t\tif(dot_lum < .1)//.55\r\n\t\t{\r\n\t\t\tbw_col.rgb *= dot_lum*1.5;\r\n\t\t\t//gl_FragColor.rgb *= .25 * (1.0-light_color.a);\r\n\t\t\tbw_col.rgb = mix(bw_col.rgb,dark_col.rgb,(1.0-light_color.a)*2.0);\r\n\t\t}\r\n\t\t\r\n\t\tnight_col.rgb = mix(night_col.rgb,bw_col.rgb,light_color.a);\r\n\t\t\r\n\t\tgl_FragColor = mix(gl_FragColor,night_col,night);\r\n\t\t//gl_FragColor = light_color;\r\n\t\t\r\n\t\t\r\n\t}\r\n\t//float gray = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t//vec4 shade =  vec4(gray,1.0);//vec4(gray * fox_color.rgb,1.0);\r\n\t////gl_FragColor.rgb = mix(gl_FragColor.rgb,fox_color.rgb,.15);\r\n\t//gl_FragColor.rgb = mix(gl_FragColor.rgb,shade.rgb,.15);\r\n\tgl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);//pre multiply alpha\r\n\t\r\n\t\r\n\t//THUNDER\r\n\tif(thunder > 0.0)\r\n\t{\r\n\t\tfloat threshold = .5;\r\n\t\tif(night == 1.0)\r\n\t\t{\r\n\t\t\tthreshold = .3;\r\n\t\t}\r\n\t\tfloat lum = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t\tif(lum >= threshold)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t\tgl_FragColor.rgb *= 1.0 - .35 * thunder;\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb *= 1.0 - 0.5*thunder;\r\n\t\t}\r\n\t}\r\n\t\r\n\t\r\n\t\r\n\t//ADD LUT//////////////////////////////////////////////////////\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t//OUTPUT OLD_ENV\r\n\tvec3 out_col_env_prev = mix(texture2D(lut_tex_env_prev,lower_sample).rgb,texture2D(lut_tex_env_prev,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env_prev = mix(base_col.rgb,out_col_env_prev,lut_strength_env_prev*(1.0-light_color.a));\r\n\t//OUTPUT NEW_ENV\r\n\tvec3 out_col_env = mix(texture2D(lut_tex_env,lower_sample).rgb,texture2D(lut_tex_env,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env = mix(out_col_env_prev.rgb,out_col_env,lut_strength_env*(1.0-light_color.a));\r\n\t\r\n\t\r\n\t//OUTPUT #NIGHT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(out_col_env.rgb,out_col,lut_strength*(1.0-light_color.a));\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n\t\r\n\t\r\n\t\r\n}\r\n",
        "shd_paper_test",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nfloat dufay_size\t= 128.0;\r\nfloat dfsize_x\t\t= 960.0*4.0/128.0;\r\nfloat dfsize_y\t\t= 540.0*4.0/128.0;\r\n\r\n\r\nuniform sampler2D paper_tex;\r\n\r\n\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\nprecision highp float;\r\n//#endif\r\n \r\n//uniform sampler2D uSampler; // The image to reproduce as a halftone\r\nvec2 uDims = vec2(480.0,270.0); // Texture dimensions, in pixels (width, height)\r\n \r\n\r\nuniform float uScale; // For imperfect, isotropic anti-aliasing in\r\n//float uScale = 0.25; // For imperfect, isotropic anti-aliasing in\r\nuniform float uYrot;  // absence of dFdx() and dFdy() functions\r\n//float uYrot = 480.0;  // absence of dFdx() and dFdy() functions\r\n\r\n \r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n \r\n//float frequency = 1.0; // Needed globally for lame version of aastep()\r\nuniform float uFreq; // Needed globally for lame version of aastep()\r\nfloat frequency = uFreq; // Needed globally for lame version of aastep()\r\n \r\n// Anti-aliased step function. If the auto derivatives extension\r\n// is supported, the AA is done in a fully general, anisotropic\r\n// manner. If not, the expression for \"afwidth\" is a kludge for\r\n// this particular shader and this particular view transform.\r\nfloat aastep(float threshold, float value) {\r\n  float afwidth = frequency * (1.0/240.0) / uScale / cos(uYrot);\r\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\r\n}\r\n \r\n// Explicit bilinear texture lookup to circumvent bad hardware precision.\r\n// The extra arguments specify the dimension of the texture. (GLSL 1.30\r\n// introduced textureSize() to get that information from the sampler.)\r\n// 'dims' is the width and height of the texture, 'one' is 1.0/dims.\r\n// (Precomputing 'one' saves two divisions for each lookup.)\r\nvec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\r\n  vec2 uv = st * dims;\r\n  vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\r\n  vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\r\n  vec2 st00 = (uv00 + vec2(0.5)) * one;\r\n  vec4 texel00 = texture2D(tex, st00);\r\n  vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\r\n  vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\r\n  vec4 texel11 = texture2D(tex, st00 + one);\r\n  vec4 texel0 = mix(texel00, texel01, uvlerp.y); \r\n  vec4 texel1 = mix(texel10, texel11, uvlerp.y); \r\n  return mix(texel0, texel1, uvlerp.x);\r\n}\r\n \r\n// 2D simplex noise\r\n \r\n// Description : Array- and textureless GLSL 2D simplex noise.\r\n// Author : Ian McEwan, Ashima Arts. Version: 20110822\r\n// Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n// Distributed under the MIT License. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n \r\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\r\n \r\nfloat snoise(vec2 v) {\r\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\r\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\r\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\r\n                      0.024390243902439); // 1.0 / 41.0\r\n  // First corner\r\n  vec2 i = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v - i + dot(i, C.xx);\r\n  // Other corners\r\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  // Permutations\r\n  i = mod289(i); // Avoid truncation effects in permutation\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n                           + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n                          dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m; m = m*m;\r\n  // Gradients\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 a0 = x - floor(x + 0.5);\r\n  // Normalise gradients implicitly by scaling m\r\n  m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\r\n  // Compute final noise value at P\r\n  vec3 g;\r\n  g.x = a0.x * x0.x + h.x * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n \r\n// 2D simplex noise end\r\n\r\n \r\n \r\nvoid main() {\r\n    // Use a texture to modulate the size of the dots, and\r\n    // use explicit bilinear interpolation for better precision\r\n\tvec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 paper_color = v_vColour * texture2D( paper_tex, v_vTexcoord );\r\n\torig_color.rgb *= paper_color.rgb;\r\n   // vec3 texcolor = texture2D_bilinear(uSampler, st, uDims, vOne).rgb;\r\n    vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, uDims, vOne).rgb;\r\n    //vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, vec2(480,270), 1.0/vec2(480,270)).rgb;\r\n    //vec3 texcolor = orig_color.rgb;\r\n \r\n    float n = 0.1*snoise(st*200.0);  // Fractal noise\r\n    n += 0.05*snoise(st*400.0);      // with three\r\n    n += 0.025*snoise(st*800.0);     // octaves\r\n    vec3 white = vec3(n*0.2 + 0.97); // Paper color + noise\r\n    //vec3 white = orig_color.rgb; // Paper color + noise\r\n    vec3 black = vec3(n + 0.1);      // Ink density + noise\r\n    //vec3 black = orig_color.rgb;      // Ink density + noise\r\n \r\n    // Perform a crude RGB-to-CMYK conversion\r\n    vec4 cmyk;\r\n    cmyk.xyz = 1.0 - texcolor; // CMY = 1-RGB\r\n    // Black generation: K = min(C,M,Y)\r\n    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z));\r\n    // Grey component replacement: subtract K from CMY\r\n    cmyk.xyz -= cmyk.w;\r\n \r\n    // Distances to nearest point in angled grids of\r\n    // (frequency x frequency) points over the unit square\r\n    // K component: 45 degrees screen angle\r\n    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\r\n    vec2 Kuv = 2.0*fract(Kst)-1.0;\r\n    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\r\n    // C component: 15 degrees screen angle\r\n    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\r\n    vec2 Cuv = 2.0*fract(Cst)-1.0;\r\n    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\r\n    // M component: -15 degrees screen angle\r\n    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\r\n    vec2 Muv = 2.0*fract(Mst)-1.0;\r\n    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\r\n    // Y component: 0 degrees screen angle\r\n    vec2 Yst = frequency*st;\r\n    vec2 Yuv = 2.0*fract(Yst)-1.0;\r\n    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\r\n \r\n    // CMY screen in RGB\r\n    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\r\n    // Blend in K for final color\r\n    rgbscreen = mix(rgbscreen, texcolor, 0.85*k + 0.3*n);\r\n   // rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\r\n   //END OF HALFTONE STUFF\r\n\r\n\tgl_FragColor = orig_color;\r\n\t//gl_FragColor.rgb = rgbscreen.rgb;\r\n\r\n\t//rgbscreen.rgb = vec3(1.0)-rgbscreen.rgb;\r\n\t//vec3 lum = vec3(1.0,1.0,1.0);\r\n\tif(gl_FragColor.a > 0.0)\r\n\t{\r\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,gl_FragColor.a*.2);\r\n\t}\r\n\t//else gl_FragColor = orig_color;\r\n\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\nfloat dufay_size\t= 128.0;\r\nfloat dfsize_x\t\t= 960.0*4.0/128.0;\r\nfloat dfsize_y\t\t= 540.0*4.0/128.0;\r\n\r\n\r\nuniform sampler2D paper_tex;\r\n\r\n\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\nprecision highp float;\r\n//#endif\r\n \r\n//uniform sampler2D uSampler; // The image to reproduce as a halftone\r\nvec2 uDims = vec2(480.0,270.0); // Texture dimensions, in pixels (width, height)\r\n \r\n\r\nuniform float uScale; // For imperfect, isotropic anti-aliasing in\r\n//float uScale = 0.25; // For imperfect, isotropic anti-aliasing in\r\nuniform float uYrot;  // absence of dFdx() and dFdy() functions\r\n//float uYrot = 480.0;  // absence of dFdx() and dFdy() functions\r\n\r\n \r\nvarying vec2 st; // Texcoords\r\nvarying vec2 vOne; // 1.0/uDims, precomputed vertex shader for speed\r\n \r\n//float frequency = 1.0; // Needed globally for lame version of aastep()\r\nuniform float uFreq; // Needed globally for lame version of aastep()\r\nfloat frequency = uFreq; // Needed globally for lame version of aastep()\r\n \r\n// Anti-aliased step function. If the auto derivatives extension\r\n// is supported, the AA is done in a fully general, anisotropic\r\n// manner. If not, the expression for \"afwidth\" is a kludge for\r\n// this particular shader and this particular view transform.\r\nfloat aastep(float threshold, float value) {\r\n  float afwidth = frequency * (1.0/240.0) / uScale / cos(uYrot);\r\n  return smoothstep(threshold-afwidth, threshold+afwidth, value);\r\n}\r\n \r\n// Explicit bilinear texture lookup to circumvent bad hardware precision.\r\n// The extra arguments specify the dimension of the texture. (GLSL 1.30\r\n// introduced textureSize() to get that information from the sampler.)\r\n// 'dims' is the width and height of the texture, 'one' is 1.0/dims.\r\n// (Precomputing 'one' saves two divisions for each lookup.)\r\nvec4 texture2D_bilinear(sampler2D tex, vec2 st, vec2 dims, vec2 one) {\r\n  vec2 uv = st * dims;\r\n  vec2 uv00 = floor(uv - vec2(0.5)); // Lower left corner of lower left texel\r\n  vec2 uvlerp = uv - uv00 - vec2(0.5); // Texel-local lerp blends [0,1]\r\n  vec2 st00 = (uv00 + vec2(0.5)) * one;\r\n  vec4 texel00 = texture2D(tex, st00);\r\n  vec4 texel10 = texture2D(tex, st00 + vec2(one.x, 0.0));\r\n  vec4 texel01 = texture2D(tex, st00 + vec2(0.0, one.y));\r\n  vec4 texel11 = texture2D(tex, st00 + one);\r\n  vec4 texel0 = mix(texel00, texel01, uvlerp.y); \r\n  vec4 texel1 = mix(texel10, texel11, uvlerp.y); \r\n  return mix(texel0, texel1, uvlerp.x);\r\n}\r\n \r\n// 2D simplex noise\r\n \r\n// Description : Array- and textureless GLSL 2D simplex noise.\r\n// Author : Ian McEwan, Ashima Arts. Version: 20110822\r\n// Copyright (C) 2011 Ashima Arts. All rights reserved.\r\n// Distributed under the MIT License. See LICENSE file.\r\n// https://github.com/ashima/webgl-noise\r\n \r\nvec2 mod289(vec2 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 mod289(vec3 x) { return x - floor(x * (1.0 / 289.0)) * 289.0; }\r\nvec3 permute(vec3 x) { return mod289((( x * 34.0) + 1.0) * x); }\r\n \r\nfloat snoise(vec2 v) {\r\n  const vec4 C = vec4(0.211324865405187,  // (3.0-sqrt(3.0))/6.0\r\n                      0.366025403784439,  // 0.5*(sqrt(3.0)-1.0)\r\n                     -0.577350269189626,  // -1.0 + 2.0 * C.x\r\n                      0.024390243902439); // 1.0 / 41.0\r\n  // First corner\r\n  vec2 i = floor(v + dot(v, C.yy) );\r\n  vec2 x0 = v - i + dot(i, C.xx);\r\n  // Other corners\r\n  vec2 i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\r\n  vec4 x12 = x0.xyxy + C.xxzz;\r\n  x12.xy -= i1;\r\n  // Permutations\r\n  i = mod289(i); // Avoid truncation effects in permutation\r\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\r\n                           + i.x + vec3(0.0, i1.x, 1.0 ));\r\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\r\n                          dot(x12.zw,x12.zw)), 0.0);\r\n  m = m*m; m = m*m;\r\n  // Gradients\r\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\r\n  vec3 h = abs(x) - 0.5;\r\n  vec3 a0 = x - floor(x + 0.5);\r\n  // Normalise gradients implicitly by scaling m\r\n  m *= 1.792843 - 0.853735 * ( a0*a0 + h*h );\r\n  // Compute final noise value at P\r\n  vec3 g;\r\n  g.x = a0.x * x0.x + h.x * x0.y;\r\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\r\n  return 130.0 * dot(m, g);\r\n}\r\n \r\n// 2D simplex noise end\r\n\r\n \r\n \r\nvoid main() {\r\n    // Use a texture to modulate the size of the dots, and\r\n    // use explicit bilinear interpolation for better precision\r\n\tvec4 orig_color = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\tvec4 paper_color = v_vColour * texture2D( paper_tex, v_vTexcoord );\r\n\torig_color.rgb *= paper_color.rgb;\r\n   // vec3 texcolor = texture2D_bilinear(uSampler, st, uDims, vOne).rgb;\r\n    vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, uDims, vOne).rgb;\r\n    //vec3 texcolor = texture2D_bilinear(gm_BaseTexture, st, vec2(480,270), 1.0/vec2(480,270)).rgb;\r\n    //vec3 texcolor = orig_color.rgb;\r\n \r\n    float n = 0.1*snoise(st*200.0);  // Fractal noise\r\n    n += 0.05*snoise(st*400.0);      // with three\r\n    n += 0.025*snoise(st*800.0);     // octaves\r\n    vec3 white = vec3(n*0.2 + 0.97); // Paper color + noise\r\n    //vec3 white = orig_color.rgb; // Paper color + noise\r\n    vec3 black = vec3(n + 0.1);      // Ink density + noise\r\n    //vec3 black = orig_color.rgb;      // Ink density + noise\r\n \r\n    // Perform a crude RGB-to-CMYK conversion\r\n    vec4 cmyk;\r\n    cmyk.xyz = 1.0 - texcolor; // CMY = 1-RGB\r\n    // Black generation: K = min(C,M,Y)\r\n    cmyk.w = min(cmyk.x, min(cmyk.y, cmyk.z));\r\n    // Grey component replacement: subtract K from CMY\r\n    cmyk.xyz -= cmyk.w;\r\n \r\n    // Distances to nearest point in angled grids of\r\n    // (frequency x frequency) points over the unit square\r\n    // K component: 45 degrees screen angle\r\n    vec2 Kst = frequency*mat2(0.707, -0.707, 0.707, 0.707)*st;\r\n    vec2 Kuv = 2.0*fract(Kst)-1.0;\r\n    float k = aastep(0.0, sqrt(cmyk.w)-length(Kuv)+n);\r\n    // C component: 15 degrees screen angle\r\n    vec2 Cst = frequency*mat2(0.966, -0.259, 0.259, 0.966)*st;\r\n    vec2 Cuv = 2.0*fract(Cst)-1.0;\r\n    float c = aastep(0.0, sqrt(cmyk.x)-length(Cuv)+n);\r\n    // M component: -15 degrees screen angle\r\n    vec2 Mst = frequency*mat2(0.966, 0.259, -0.259, 0.966)*st;\r\n    vec2 Muv = 2.0*fract(Mst)-1.0;\r\n    float m = aastep(0.0, sqrt(cmyk.y)-length(Muv)+n);\r\n    // Y component: 0 degrees screen angle\r\n    vec2 Yst = frequency*st;\r\n    vec2 Yuv = 2.0*fract(Yst)-1.0;\r\n    float y = aastep(0.0, sqrt(cmyk.z)-length(Yuv)+n);\r\n \r\n    // CMY screen in RGB\r\n    vec3 rgbscreen = 1.0 - 0.9*vec3(c,m,y) + n;\r\n    // Blend in K for final color\r\n    rgbscreen = mix(rgbscreen, texcolor, 0.85*k + 0.3*n);\r\n   // rgbscreen = mix(rgbscreen, black, 0.85*k + 0.3*n);\r\n   //END OF HALFTONE STUFF\r\n\r\n\tgl_FragColor = orig_color;\r\n\t//gl_FragColor.rgb = rgbscreen.rgb;\r\n\r\n\t//rgbscreen.rgb = vec3(1.0)-rgbscreen.rgb;\r\n\t//vec3 lum = vec3(1.0,1.0,1.0);\r\n\tif(gl_FragColor.a > 0.0)\r\n\t{\r\n\t\tgl_FragColor.rgb = mix(gl_FragColor.rgb,rgbscreen.rgb,gl_FragColor.a*.2);\r\n\t}\r\n\t//else gl_FragColor = orig_color;\r\n\r\n}\r\n",
        "shd_prem_alpha_invert",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n     vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t gl_FragColor = vec4(col.a*col.rgb,col.a);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n     vec4 col = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t gl_FragColor = vec4(col.a*col.rgb,col.a);\r\n}\r\n",
        "shd_prem_alpha",
        "shd_rain_drops",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 text_col = v_vColour * texture2D( tex, v_vTexcoord*vec2(1.01) );\r\n\t\r\n\tgl_FragColor.rgb = text_col.rgb;\r\n\t//gl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform sampler2D tex;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    vec4 text_col = v_vColour * texture2D( tex, v_vTexcoord*vec2(1.01) );\r\n\t\r\n\tgl_FragColor.rgb = text_col.rgb;\r\n\t//gl_FragColor = vec4(gl_FragColor.a*gl_FragColor.rgb,gl_FragColor.a);\r\n\t\r\n}\r\n",
        "shd_rain",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float intensity_time;\r\nuniform sampler2D intensity_tex;\r\nuniform float light_extra_contrast;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    //vec4 intensity_col = v_vColour * texture2D( intensity_tex, fract(v_vTexcoord+vec2(sin(intensity_time*-0.6),intensity_time)) ) ;\r\n    vec4 intensity_col = v_vColour * texture2D( intensity_tex, fract(v_vTexcoord+vec2(.0,(intensity_time) )) ) ;\r\n   // vec4 intensity_col = v_vColour * texture2D( intensity_tex, v_vTexcoord) ;\r\n\t//gl_FragColor.a = gl_FragColor.r*.5;\r\n\tif(light_extra_contrast != 1.0)\r\n\t{\r\n\t\tgl_FragColor.a *= 0.5+intensity_col.a;\r\n\t}\r\n\telse \r\n\t{\r\n\t\tgl_FragColor.a = intensity_col.a*.25;\r\n\t\tgl_FragColor.rgb *= vec3(2.5);\r\n\t}\r\n\t//gl_FragColor.rgb = vec3(1.0);\r\n\tgl_FragColor.rgb *= vec3(1.5);\r\n\t//gl_FragColor = intensity_col;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float intensity_time;\r\nuniform sampler2D intensity_tex;\r\nuniform float light_extra_contrast;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n    //vec4 intensity_col = v_vColour * texture2D( intensity_tex, fract(v_vTexcoord+vec2(sin(intensity_time*-0.6),intensity_time)) ) ;\r\n    vec4 intensity_col = v_vColour * texture2D( intensity_tex, fract(v_vTexcoord+vec2(.0,(intensity_time) )) ) ;\r\n   // vec4 intensity_col = v_vColour * texture2D( intensity_tex, v_vTexcoord) ;\r\n\t//gl_FragColor.a = gl_FragColor.r*.5;\r\n\tif(light_extra_contrast != 1.0)\r\n\t{\r\n\t\tgl_FragColor.a *= 0.5+intensity_col.a;\r\n\t}\r\n\telse \r\n\t{\r\n\t\tgl_FragColor.a = intensity_col.a*.25;\r\n\t\tgl_FragColor.rgb *= vec3(2.5);\r\n\t}\r\n\t//gl_FragColor.rgb = vec3(1.0);\r\n\tgl_FragColor.rgb *= vec3(1.5);\r\n\t//gl_FragColor = intensity_col;\r\n}\r\n",
        "shd_sky",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\n\r\n\r\n//LUT ADD\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\nuniform float thunder;\r\n\r\nuniform sampler2D lut_tex_env;\r\nuniform float lut_strength_env;\r\n\r\nuniform sampler2D lut_tex_env_prev;\r\nuniform float lut_strength_env_prev;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\t\r\n\t//THUNDER\r\n\tif(thunder > 0.0)\r\n\t{\r\n\t\tfloat lum = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t\tif(lum >= .5)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t\tgl_FragColor.rgb *= 1.0 - .35 * thunder;\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb *= 1.0 - 0.5*thunder;\r\n\t\t}\r\n\t}\r\n\t\r\n\t//ADD LUT//////////////////////////////////////////////////////\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\r\n\t//OUTPUT OLD_ENV\r\n\tvec3 out_col_env_prev = mix(texture2D(lut_tex_env_prev,lower_sample).rgb,texture2D(lut_tex_env_prev,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env_prev = mix(base_col.rgb,out_col_env_prev,lut_strength_env_prev);\r\n\t//OUTPUT NEW_ENV\r\n\tvec3 out_col_env = mix(texture2D(lut_tex_env,lower_sample).rgb,texture2D(lut_tex_env,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env = mix(out_col_env_prev.rgb,out_col_env,lut_strength_env);\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(out_col_env.rgb,out_col,lut_strength);\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\n\r\n\r\n\r\n//LUT ADD\r\n\r\nuniform sampler2D lut_tex;\r\nfloat strength\t\t= .8;\r\nuniform float lut_strength;\r\nuniform float thunder;\r\n\r\nuniform sampler2D lut_tex_env;\r\nuniform float lut_strength_env;\r\n\r\nuniform sampler2D lut_tex_env_prev;\r\nuniform float lut_strength_env_prev;\r\n\r\n//lutmap_texture_wh = 512.0;\r\n#define CELLS_PER_ROW\t8.0\r\n#define\tCELL_SIZE\t\t0.125 //1.0/CELLS_PER_ROW\r\n#define\tHALF_TEXEL_SIZE 0.000976562 //0.5/lutmap_texture_wh\r\n#define CELL_SIZE_FIXED 0.123046875\r\n\r\n\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\t\r\n\t//THUNDER\r\n\tif(thunder > 0.0)\r\n\t{\r\n\t\tfloat lum = dot(gl_FragColor,vec4(0.299,0.587,0.114,0));\r\n\t\tif(lum >= .5)\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t\tgl_FragColor.rgb *= 1.0 - .35 * thunder;\r\n\t\t\tgl_FragColor.rgb = vec3(1.0)-gl_FragColor.rgb;\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tgl_FragColor.rgb *= 1.0 - 0.5*thunder;\r\n\t\t}\r\n\t}\r\n\t\r\n\t//ADD LUT//////////////////////////////////////////////////////\r\n\t//LUT MAP SYSTEM:\r\n\t//BASE\r\n\tvec4 base_col = gl_FragColor;\r\n\tfloat blue_cell = base_col.b * (CELLS_PER_ROW * CELLS_PER_ROW -1.0);\r\n\t//SAMPLE COORDS\r\n\tvec2 lower_cell, lower_sample, upper_cell, upper_sample;\r\n\t\r\n\tlower_cell.y = floor(blue_cell / CELLS_PER_ROW);\r\n\tlower_cell.x = floor(blue_cell) - lower_cell.y * CELLS_PER_ROW;\r\n\tlower_sample.x = lower_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tlower_sample.y = lower_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\tupper_cell.y = floor(ceil(blue_cell) / CELLS_PER_ROW);\r\n\tupper_cell.x = ceil(blue_cell) - upper_cell.y * CELLS_PER_ROW;\r\n\tupper_sample.x = upper_cell.x * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.r;\r\n\tupper_sample.y = upper_cell.y * CELL_SIZE + HALF_TEXEL_SIZE + CELL_SIZE_FIXED * base_col.g;\r\n\t\r\n\t\r\n\t//OUTPUT OLD_ENV\r\n\tvec3 out_col_env_prev = mix(texture2D(lut_tex_env_prev,lower_sample).rgb,texture2D(lut_tex_env_prev,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env_prev = mix(base_col.rgb,out_col_env_prev,lut_strength_env_prev);\r\n\t//OUTPUT NEW_ENV\r\n\tvec3 out_col_env = mix(texture2D(lut_tex_env,lower_sample).rgb,texture2D(lut_tex_env,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col_env = mix(out_col_env_prev.rgb,out_col_env,lut_strength_env);\r\n\t\r\n\t//OUTPUT\r\n\tvec3 out_col = mix(texture2D(lut_tex,lower_sample).rgb,texture2D(lut_tex,upper_sample).rgb,fract(blue_cell));\r\n\t//out_col = mix(base_col.rgb,out_col,strength);\r\n\tout_col = mix(out_col_env.rgb,out_col,lut_strength);\r\n\t\r\n\tgl_FragColor = v_vColour * vec4(out_col,base_col.a);//LUT COLOR\r\n}\r\n",
        "shd_trait_fade",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\t\r\n\tif(v_vTexcoord.y <= .08)\r\n\t{\r\n\t\tgl_FragColor.a *= v_vTexcoord.y/.08;\r\n\t}\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvoid main()\r\n{\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n\t\r\n\t\r\n\tif(v_vTexcoord.y <= .08)\r\n\t{\r\n\t\tgl_FragColor.a *= v_vTexcoord.y/.08;\r\n\t}\r\n\t\r\n}\r\n",
        "shd_tree_animate",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying vec2 v_vPosition;\r\n//varying vec2 uvs;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n\t//uvs = in_TextureCoord;\r\n\t\r\n\tv_vPosition = in_Position.xy;\r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float\ttime;\r\nuniform float\tpx_w;\r\nuniform float\tpx_h;\r\nuniform vec4\tuvs;\r\n\r\nfloat wind_start_y = 0.75;\r\n\r\n//varying vec2 uvs;\r\nvarying vec2 v_vPosition;\r\n\r\nvoid main()\r\n{\r\n\tvec2 size = vec2(214.0,198.0);\r\n\t//vec2 pos = v_vTexcoord;\r\n\t//pos.x = sin(pos.y);\r\n\t//vec2 pos = v_vTexcoord + vec2(sin(v_vTexcoord.y+time)*(1.0-v_vTexcoord.y)*.1,0);\r\n\t//vec2 pos = v_vTexcoord;\r\n\t\r\n\t//v_vColour.a *= .5;\r\n\t/*\r\n\t//vec2 pos = v_vPosition;\r\n\tfloat _w = uvs.w - uvs.x;\r\n\tfloat _h = uvs.z - uvs.y;\r\n\tvec2 coord = v_vTexcoord;\r\n\tgl_FragColor = v_vColour * texture2D( gm_BaseTexture, coord );\r\n\tif(v_vTexcoord.y >= wind_start_y*_h)\r\n\t{\r\n\t\tgl_FragColor.a = .5;\r\n\t}\r\n\t//*/\r\n\t//works\r\n\t///*\r\n\tvec2 pos = v_vTexcoord;\r\n\tpos.y-=uvs.y;\r\n\tvec2 coord = v_vTexcoord;\r\n\t///*\r\n\tif(pos.y <= wind_start_y)\r\n\t{\r\n\t\tcoord = v_vTexcoord + vec2(cos(v_vTexcoord.y+time*.04)*(wind_start_y-pos.y)*.025,0);\r\n\t\tfloat newval = sin(.05*(v_vTexcoord.y*px_h+time))*.025*(wind_start_y-pos.y);\r\n\t\t\r\n\t\tcoord.x += newval;\r\n\t\t//pos.x += sin(.05*(v_vTexcoord.y*px_h+time))*.025*(wind_start_y-v_vTexcoord.y);\r\n\t}//*/\r\n\t\r\n\t/*vec2 coord = v_vTexcoord + \r\n\tvec2(cos((v_vPosition.y/48.0+time)*.5)*5.0,0)/size*(1.0-v_vTexcoord.y);*/\r\n\t\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, coord );\r\n\t//gl_FragColor.a = pos.y;\r\n\t//gl_FragColor.g = pos.y/size.y*(v_vTexcoord.y);\r\n    //gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough vertex shader\r\n//\r\nattribute vec3 in_Position;                  // (x,y,z)\r\n//attribute vec3 in_Normal;                  // (x,y,z)     unused in this shader.\r\nattribute vec4 in_Colour;                    // (r,g,b,a)\r\nattribute vec2 in_TextureCoord;              // (u,v)\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying vec2 v_vPosition;\r\n//varying vec2 uvs;\r\n\r\nvoid main()\r\n{\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n\t//uvs = in_TextureCoord;\r\n\t\r\n\tv_vPosition = in_Position.xy;\r\n    v_vColour = in_Colour;\r\n    v_vTexcoord = in_TextureCoord;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n//\r\n// Simple passthrough fragment shader\r\n//\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float\ttime;\r\nuniform float\tpx_w;\r\nuniform float\tpx_h;\r\nuniform vec4\tuvs;\r\n\r\nfloat wind_start_y = 0.75;\r\n\r\n//varying vec2 uvs;\r\nvarying vec2 v_vPosition;\r\n\r\nvoid main()\r\n{\r\n\tvec2 size = vec2(214.0,198.0);\r\n\t//vec2 pos = v_vTexcoord;\r\n\t//pos.x = sin(pos.y);\r\n\t//vec2 pos = v_vTexcoord + vec2(sin(v_vTexcoord.y+time)*(1.0-v_vTexcoord.y)*.1,0);\r\n\t//vec2 pos = v_vTexcoord;\r\n\t\r\n\t//v_vColour.a *= .5;\r\n\t/*\r\n\t//vec2 pos = v_vPosition;\r\n\tfloat _w = uvs.w - uvs.x;\r\n\tfloat _h = uvs.z - uvs.y;\r\n\tvec2 coord = v_vTexcoord;\r\n\tgl_FragColor = v_vColour * texture2D( gm_BaseTexture, coord );\r\n\tif(v_vTexcoord.y >= wind_start_y*_h)\r\n\t{\r\n\t\tgl_FragColor.a = .5;\r\n\t}\r\n\t//*/\r\n\t//works\r\n\t///*\r\n\tvec2 pos = v_vTexcoord;\r\n\tpos.y-=uvs.y;\r\n\tvec2 coord = v_vTexcoord;\r\n\t///*\r\n\tif(pos.y <= wind_start_y)\r\n\t{\r\n\t\tcoord = v_vTexcoord + vec2(cos(v_vTexcoord.y+time*.04)*(wind_start_y-pos.y)*.025,0);\r\n\t\tfloat newval = sin(.05*(v_vTexcoord.y*px_h+time))*.025*(wind_start_y-pos.y);\r\n\t\t\r\n\t\tcoord.x += newval;\r\n\t\t//pos.x += sin(.05*(v_vTexcoord.y*px_h+time))*.025*(wind_start_y-v_vTexcoord.y);\r\n\t}//*/\r\n\t\r\n\t/*vec2 coord = v_vTexcoord + \r\n\tvec2(cos((v_vPosition.y/48.0+time)*.5)*5.0,0)/size*(1.0-v_vTexcoord.y);*/\r\n\t\r\n    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, coord );\r\n\t//gl_FragColor.a = pos.y;\r\n\t//gl_FragColor.g = pos.y/size.y*(v_vTexcoord.y);\r\n    //gl_FragColor = v_vColour * texture2D( gm_BaseTexture, v_vTexcoord );\r\n}\r\n",
        "shd_tree",
        "shd_water",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\n/*-----------------------------------------------------------------------------\r\nWater Sidescroller Shader: create a distorted & recoloured reflection\r\nVertex Shader: set up distortiom map coordinate systems\r\n-------------------------------------------------------------------------------\r\n_______________________________________________________________________________\r\nINFO:\r\n-------------------------------------------------------------------------------\r\nFirst draw a vertical reflection of the upper part of the application surface\r\nonto a water surface and then draw the surface back to the application surface\r\nusing this shader:\r\n\r\n   +-------------------+   +-------------------+   +-------------------+\r\n   |AppSrf   /\\        |   |AppSrf   /\\        |   |AppSrf   /\\        |\r\n   |    /\\  /  \\       |   |    /\\  /  \\       |   |    /\\  /  \\       |\r\n   |   /  \\/    \\  /\\  |-->|-------------------|-->|   <  ><    >      |\r\n   |  /          \\/  \\ |   |    \\/  \\  /       |   |    \\/  \\  /       |\r\n   | /                \\|   |WaterSrf \\/        |   |         \\/        |\r\n   +-------------------+   +-------------------+   +-------------------+\r\n   \r\n\r\n\r\nThe shader will use a distortion map to distort in the x and y axis.\r\nThe distortion map should have 3 different but tileable leopard patterns. One\r\nan each colour channel. The red channel will distort the y-axis, the green\r\nchannel will distort the x-axis and the blue channel will affect both to add\r\nsome irregularites.\r\n\r\nThe shader will also use the vertex colour and an additional colour to colourize\r\nthe water surface. The vertex colour is blended with the sample colour in a \r\nphotoshop blend mode and the water colour will be mixed in to reduce the \r\nreflection strength.\r\n\r\nOptionally the shader also allows to change the brightness, saturation and\r\ncontrast of the reflection to emulate the influence of weather and water\r\nparticles.\r\n\r\n_______________________________________________________________________________\r\nUNIFORMS:\r\n-------------------------------------------------------------------------------\r\nvec2\tpattern_size\t\twidth and height in pixels of the distortion map\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec3\twater_shift_RGB\t\tmovement of the distortion channels in pixels\r\n\t\t\t\t\t\t\tneeds to constantly de- or increase to move the distortion\r\n\t\t\t\t\t\t\tR: affects general distortion and can be on for still water\r\n\t\t\t\t\t\t\tG: emulates horizontal movement\r\n\t\t\t\t\t\t\tB: adds irregularites and emulates vertical movement\r\n\r\nvec2\tdistort_strength\tx: 0 <= abs(distort_strength.x) < 0.2 looks good\r\n\t\t\t\t\t\t\ty: 0 <= abs(distort_strength.x) < 2.0 looks good\r\n\t\t\t\t\t\t\thow much the surface is distorted in the x & y axis\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec3\twater_col\t\t\t0 <= water_col.rgb <= 1\r\n\t\t\t\t\t\t\tmainly replaces the dark areas of the reflection\r\n\t\t\t\t\t\t\t(whereas the vertex colour affects all)\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec2\tcol_mix\t\t\t\t0 <= col_mix[0] + col_mix[1] <= 1\r\n\t\t\t\t\t\t\tboth components added up shouldn't be larger than 1\r\n\t\t\t\t\t\t\tlower and upper threshold when smppth-mixing water_col with the sample colour\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec3\tbrt_sat_con\t\t\t-1 <= brt <= 1 // 0 is neutral\r\n\t\t\t\t\t\t\t 0 <= sat <= 4 // 1 is neutral\r\n\t\t\t\t\t\t\t 0 <= con <= 4 // 1 is neutral\r\n\t\t\t\t\t\t\tsets brightness, saturation & contrast\r\n\t\t\t\t\t\t\tcould be removed or turned into a constant\r\n\r\ns2D\t\tdistort_tex\t\t\ttexture id of the distortion map\r\n\r\nfloat\tblend_mode\t\t\t0: overlay\r\n\t\t\t\t\t\t\t1: soft light\r\n\t\t\t\t\t\t\t2: hard light\r\n\t\t\t\t\t\t\t3: vivid light\r\n\t\t\t\t\t\t\tfor testing only, should be removed\r\n\t\t\t\t\t\t\t\r\nfloat\tshow_result\t\t\t0 <= show_result <= 1\r\n\t\t\t\t\t\t\tmixes the distortion maps colour with the output colour\r\n\t\t\t\t\t\t\tfor debugging only, should be removed\r\n\r\n_______________________________________________________________________________\r\nEXAMPLE:\r\n-------------------------------------------------------------------------------\r\ncheck demo file\r\n*/\r\n\r\nattribute vec3\tin_Position;\t\t// (x,y,z)\r\nattribute vec4\tin_Colour;\t\t\t// (r,g,b,a)\r\nattribute vec2\tin_TextureCoord;\t// (u,v)\r\n\r\nvarying vec2\tv_vTexcoord;\r\nvarying vec4\tv_vColour;\r\n\r\nvarying vec2\tv_vPosition_R;\r\nvarying vec2\tv_vPosition_G;\r\nvarying vec2\tv_vPosition_B;\r\n\r\nuniform vec2\tpattern_size;\t\t// could be turned into a constant\r\nuniform vec3\twater_shift_RGB;\r\n\r\n\r\nvoid main() {\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position\t\t= gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour\t\t= in_Colour;\r\n    v_vTexcoord\t\t= in_TextureCoord;\r\n\t\r\n\tv_vPosition_R\t= (in_Position.xy - vec2(water_shift_RGB.r, 0.0)) / pattern_size;\r\n\tv_vPosition_G\t= (in_Position.xy - vec2(water_shift_RGB.g, 0.0)) / pattern_size;\r\n\tv_vPosition_B\t= (in_Position.xy - vec2(0.0, water_shift_RGB.b)) / pattern_size;\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\n\r\n/*-----------------------------------------------------------------------------\r\nWater Sidescroller Shader: create a distorted & recoloured reflection\r\nFragment Shader: distort & colourize\r\n-----------------------------------------------------------------------------*/\r\n\r\nvarying vec2\t\tv_vTexcoord;\r\nvarying vec4\t\tv_vColour;\r\n\r\nvarying vec2\t\tv_vPosition_R;\r\nvarying vec2\t\tv_vPosition_G;\r\nvarying vec2\t\tv_vPosition_B;\r\n\r\nuniform vec2\t\tdistort_strength;\t// could be turned into a constant\r\nuniform vec3\t\twater_col;\t\t\t// could be turned into a constant\r\nuniform vec2\t\tcol_mix;\t\t\t// could be turned into a constant\r\nuniform vec3\t\tbrt_sat_con;\t\t// could be turned into a constant\r\nuniform vec3\t\tglitter_col;\r\n\r\nuniform sampler2D\tdistort_tex;\r\n\r\nuniform float\t\tblend_mode;\t\t\t// for testing only\r\nuniform float\t\tshow_result;\t\t// for debugging only\r\n\r\n\r\nvoid main() {\r\n    // DISTORT REFLECTION:\r\n\t// create s the distorted water surface effect\r\n\t//----------------------------------------------------------------------------\r\n\tvec3 distort_sample;\r\n\tdistort_sample.r\t= texture2D(distort_tex, fract(v_vPosition_R)).r;\r\n\tdistort_sample.g\t= texture2D(distort_tex, fract(v_vPosition_G)).g;\r\n\tdistort_sample.b\t= texture2D(distort_tex, fract(v_vPosition_B)).b;\r\n\tdistort_sample\t\t-= 0.5;\r\n\t\r\n\tvec2 distort\t\t= distort_sample.rg * distort_sample.b * distort_strength * (0.2 + 0.8 * v_vTexcoord.y);\r\n\tvec3 base_col\t\t= texture2D( gm_BaseTexture, clamp(v_vTexcoord + distort, 0.0, 1.0)).rgb;\r\n\t\t\r\n\t\r\n\t// BLEND REFLECTION WITH BLEND COLOUR:\r\n\t// After testing, choose one blend mode, remove the if statement and the uniform blend_mode.\r\n\t//----------------------------------------------------------------------------\r\n\tvec3 light_or_dark;\r\n\tvec3 out_col;\r\n\t// overlay:\r\n\tif (blend_mode == 0.0) {\r\n\t\tlight_or_dark = floor(0.5 + base_col);\r\n\t\tout_col =\tlight_or_dark\t\t\t* (1.0 - (1.0 - 2.0 * (base_col - 0.5)) * (1.0 - v_vColour.rgb)) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* 2.0 * base_col * v_vColour.rgb;\r\n\t}\r\n\t// soft light:\r\n\tif (blend_mode == 1.0) {\r\n\t\tlight_or_dark = floor(0.5 + v_vColour.rgb);\r\n\t\tout_col =\tlight_or_dark\t\t\t* (1.0 - (1.0 - base_col) * (1.0 - (v_vColour.rgb - 0.5))) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* (base_col * (v_vColour.rgb + 0.5));\r\n\t}\r\n\t// hard light:\r\n\tif (blend_mode == 2.0) {\r\n\t\tlight_or_dark = floor(0.5 + v_vColour.rgb);\r\n\t\tout_col =\tlight_or_dark\t\t\t* (1.0 - (1.0 - base_col) * (1.0 - 2.0 * (v_vColour.rgb - 0.5))) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* base_col * 2.0 * v_vColour.rgb;\r\n\t}\r\n\t// vivid light:\r\n\tif (blend_mode == 3.0) {\r\n\t\tlight_or_dark = floor(0.5 + v_vColour.rgb);\r\n\t\tout_col =\tlight_or_dark\t\t\t* min(base_col / (1.0 - 2.0 * (v_vColour.rgb - 0.5)), 1.0) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* max(1.0 - (1.0 - base_col) / (2.0 * v_vColour.rgb), 0.0);\r\n\t}\r\n\t\r\n\t\r\n\t// ADJUST BLENDED COLOUR:\r\n\t//----------------------------------------------------------------------------\r\n\t// brightness:\r\n\tout_col += brt_sat_con.x;\r\n\t\r\n\t// saturation:\r\n\tfloat value = dot(out_col, vec3(0.299, 0.587, 0.114));\r\n\tout_col = mix(vec3(value), out_col, brt_sat_con.y);\r\n\t\r\n\t// contrast:\r\n\tout_col = (out_col - 0.5) * brt_sat_con.z + 0.5;\r\n\t\r\n\t\r\n\t// MIX REFLECTION WITH WATER COLOUR:\r\n\t//----------------------------------------------------------------------------\r\n\tout_col\t= mix(water_col, out_col, smoothstep(col_mix.r, col_mix.g, dot(base_col, vec3(0.299, 0.587, 0.114))));\r\n\t\r\n\t\t\r\n\t// DEBUG:\r\n\t// After testing, remove this and the show_result uniform\r\n\t//----------------------------------------------------------------------------\r\n\tout_col = mix(out_col, distort_sample, show_result);\r\n\t\r\n\tfloat lum = dot(out_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\tif(lum > .99)\r\n\t{\r\n\t\tout_col.rgb = glitter_col.rgb;\r\n\t}\r\n\t\r\n\t// OUTPUT:\r\n\t//----------------------------------------------------------------------------\r\n\tgl_FragColor\t\t= vec4(out_col, 1.0);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\n/*-----------------------------------------------------------------------------\r\nWater Sidescroller Shader: create a distorted & recoloured reflection\r\nVertex Shader: set up distortiom map coordinate systems\r\n-------------------------------------------------------------------------------\r\n_______________________________________________________________________________\r\nINFO:\r\n-------------------------------------------------------------------------------\r\nFirst draw a vertical reflection of the upper part of the application surface\r\nonto a water surface and then draw the surface back to the application surface\r\nusing this shader:\r\n\r\n   +-------------------+   +-------------------+   +-------------------+\r\n   |AppSrf   /\\        |   |AppSrf   /\\        |   |AppSrf   /\\        |\r\n   |    /\\  /  \\       |   |    /\\  /  \\       |   |    /\\  /  \\       |\r\n   |   /  \\/    \\  /\\  |-->|-------------------|-->|   <  ><    >      |\r\n   |  /          \\/  \\ |   |    \\/  \\  /       |   |    \\/  \\  /       |\r\n   | /                \\|   |WaterSrf \\/        |   |         \\/        |\r\n   +-------------------+   +-------------------+   +-------------------+\r\n   \r\n\r\n\r\nThe shader will use a distortion map to distort in the x and y axis.\r\nThe distortion map should have 3 different but tileable leopard patterns. One\r\nan each colour channel. The red channel will distort the y-axis, the green\r\nchannel will distort the x-axis and the blue channel will affect both to add\r\nsome irregularites.\r\n\r\nThe shader will also use the vertex colour and an additional colour to colourize\r\nthe water surface. The vertex colour is blended with the sample colour in a \r\nphotoshop blend mode and the water colour will be mixed in to reduce the \r\nreflection strength.\r\n\r\nOptionally the shader also allows to change the brightness, saturation and\r\ncontrast of the reflection to emulate the influence of weather and water\r\nparticles.\r\n\r\n_______________________________________________________________________________\r\nUNIFORMS:\r\n-------------------------------------------------------------------------------\r\nvec2\tpattern_size\t\twidth and height in pixels of the distortion map\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec3\twater_shift_RGB\t\tmovement of the distortion channels in pixels\r\n\t\t\t\t\t\t\tneeds to constantly de- or increase to move the distortion\r\n\t\t\t\t\t\t\tR: affects general distortion and can be on for still water\r\n\t\t\t\t\t\t\tG: emulates horizontal movement\r\n\t\t\t\t\t\t\tB: adds irregularites and emulates vertical movement\r\n\r\nvec2\tdistort_strength\tx: 0 <= abs(distort_strength.x) < 0.2 looks good\r\n\t\t\t\t\t\t\ty: 0 <= abs(distort_strength.x) < 2.0 looks good\r\n\t\t\t\t\t\t\thow much the surface is distorted in the x & y axis\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec3\twater_col\t\t\t0 <= water_col.rgb <= 1\r\n\t\t\t\t\t\t\tmainly replaces the dark areas of the reflection\r\n\t\t\t\t\t\t\t(whereas the vertex colour affects all)\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec2\tcol_mix\t\t\t\t0 <= col_mix[0] + col_mix[1] <= 1\r\n\t\t\t\t\t\t\tboth components added up shouldn't be larger than 1\r\n\t\t\t\t\t\t\tlower and upper threshold when smppth-mixing water_col with the sample colour\r\n\t\t\t\t\t\t\tcould be turned into a constant\r\n\t\t\t\t\t\t\t\r\nvec3\tbrt_sat_con\t\t\t-1 <= brt <= 1 // 0 is neutral\r\n\t\t\t\t\t\t\t 0 <= sat <= 4 // 1 is neutral\r\n\t\t\t\t\t\t\t 0 <= con <= 4 // 1 is neutral\r\n\t\t\t\t\t\t\tsets brightness, saturation & contrast\r\n\t\t\t\t\t\t\tcould be removed or turned into a constant\r\n\r\ns2D\t\tdistort_tex\t\t\ttexture id of the distortion map\r\n\r\nfloat\tblend_mode\t\t\t0: overlay\r\n\t\t\t\t\t\t\t1: soft light\r\n\t\t\t\t\t\t\t2: hard light\r\n\t\t\t\t\t\t\t3: vivid light\r\n\t\t\t\t\t\t\tfor testing only, should be removed\r\n\t\t\t\t\t\t\t\r\nfloat\tshow_result\t\t\t0 <= show_result <= 1\r\n\t\t\t\t\t\t\tmixes the distortion maps colour with the output colour\r\n\t\t\t\t\t\t\tfor debugging only, should be removed\r\n\r\n_______________________________________________________________________________\r\nEXAMPLE:\r\n-------------------------------------------------------------------------------\r\ncheck demo file\r\n*/\r\n\r\nattribute vec3\tin_Position;\t\t// (x,y,z)\r\nattribute vec4\tin_Colour;\t\t\t// (r,g,b,a)\r\nattribute vec2\tin_TextureCoord;\t// (u,v)\r\n\r\nvarying vec2\tv_vTexcoord;\r\nvarying vec4\tv_vColour;\r\n\r\nvarying vec2\tv_vPosition_R;\r\nvarying vec2\tv_vPosition_G;\r\nvarying vec2\tv_vPosition_B;\r\n\r\nuniform vec2\tpattern_size;\t\t// could be turned into a constant\r\nuniform vec3\twater_shift_RGB;\r\n\r\n\r\nvoid main() {\r\n    vec4 object_space_pos = vec4( in_Position.x, in_Position.y, in_Position.z, 1.0);\r\n    gl_Position\t\t= gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    \r\n    v_vColour\t\t= in_Colour;\r\n    v_vTexcoord\t\t= in_TextureCoord;\r\n\t\r\n\tv_vPosition_R\t= (in_Position.xy - vec2(water_shift_RGB.r, 0.0)) / pattern_size;\r\n\tv_vPosition_G\t= (in_Position.xy - vec2(water_shift_RGB.g, 0.0)) / pattern_size;\r\n\tv_vPosition_B\t= (in_Position.xy - vec2(0.0, water_shift_RGB.b)) / pattern_size;\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\n\r\n/*-----------------------------------------------------------------------------\r\nWater Sidescroller Shader: create a distorted & recoloured reflection\r\nFragment Shader: distort & colourize\r\n-----------------------------------------------------------------------------*/\r\n\r\nvarying vec2\t\tv_vTexcoord;\r\nvarying vec4\t\tv_vColour;\r\n\r\nvarying vec2\t\tv_vPosition_R;\r\nvarying vec2\t\tv_vPosition_G;\r\nvarying vec2\t\tv_vPosition_B;\r\n\r\nuniform vec2\t\tdistort_strength;\t// could be turned into a constant\r\nuniform vec3\t\twater_col;\t\t\t// could be turned into a constant\r\nuniform vec2\t\tcol_mix;\t\t\t// could be turned into a constant\r\nuniform vec3\t\tbrt_sat_con;\t\t// could be turned into a constant\r\nuniform vec3\t\tglitter_col;\r\n\r\nuniform sampler2D\tdistort_tex;\r\n\r\nuniform float\t\tblend_mode;\t\t\t// for testing only\r\nuniform float\t\tshow_result;\t\t// for debugging only\r\n\r\n\r\nvoid main() {\r\n    // DISTORT REFLECTION:\r\n\t// create s the distorted water surface effect\r\n\t//----------------------------------------------------------------------------\r\n\tvec3 distort_sample;\r\n\tdistort_sample.r\t= texture2D(distort_tex, fract(v_vPosition_R)).r;\r\n\tdistort_sample.g\t= texture2D(distort_tex, fract(v_vPosition_G)).g;\r\n\tdistort_sample.b\t= texture2D(distort_tex, fract(v_vPosition_B)).b;\r\n\tdistort_sample\t\t-= 0.5;\r\n\t\r\n\tvec2 distort\t\t= distort_sample.rg * distort_sample.b * distort_strength * (0.2 + 0.8 * v_vTexcoord.y);\r\n\tvec3 base_col\t\t= texture2D( gm_BaseTexture, clamp(v_vTexcoord + distort, 0.0, 1.0)).rgb;\r\n\t\t\r\n\t\r\n\t// BLEND REFLECTION WITH BLEND COLOUR:\r\n\t// After testing, choose one blend mode, remove the if statement and the uniform blend_mode.\r\n\t//----------------------------------------------------------------------------\r\n\tvec3 light_or_dark;\r\n\tvec3 out_col;\r\n\t// overlay:\r\n\tif (blend_mode == 0.0) {\r\n\t\tlight_or_dark = floor(0.5 + base_col);\r\n\t\tout_col =\tlight_or_dark\t\t\t* (1.0 - (1.0 - 2.0 * (base_col - 0.5)) * (1.0 - v_vColour.rgb)) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* 2.0 * base_col * v_vColour.rgb;\r\n\t}\r\n\t// soft light:\r\n\tif (blend_mode == 1.0) {\r\n\t\tlight_or_dark = floor(0.5 + v_vColour.rgb);\r\n\t\tout_col =\tlight_or_dark\t\t\t* (1.0 - (1.0 - base_col) * (1.0 - (v_vColour.rgb - 0.5))) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* (base_col * (v_vColour.rgb + 0.5));\r\n\t}\r\n\t// hard light:\r\n\tif (blend_mode == 2.0) {\r\n\t\tlight_or_dark = floor(0.5 + v_vColour.rgb);\r\n\t\tout_col =\tlight_or_dark\t\t\t* (1.0 - (1.0 - base_col) * (1.0 - 2.0 * (v_vColour.rgb - 0.5))) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* base_col * 2.0 * v_vColour.rgb;\r\n\t}\r\n\t// vivid light:\r\n\tif (blend_mode == 3.0) {\r\n\t\tlight_or_dark = floor(0.5 + v_vColour.rgb);\r\n\t\tout_col =\tlight_or_dark\t\t\t* min(base_col / (1.0 - 2.0 * (v_vColour.rgb - 0.5)), 1.0) + \r\n\t\t\t\t\t(1.0 - light_or_dark)\t* max(1.0 - (1.0 - base_col) / (2.0 * v_vColour.rgb), 0.0);\r\n\t}\r\n\t\r\n\t\r\n\t// ADJUST BLENDED COLOUR:\r\n\t//----------------------------------------------------------------------------\r\n\t// brightness:\r\n\tout_col += brt_sat_con.x;\r\n\t\r\n\t// saturation:\r\n\tfloat value = dot(out_col, vec3(0.299, 0.587, 0.114));\r\n\tout_col = mix(vec3(value), out_col, brt_sat_con.y);\r\n\t\r\n\t// contrast:\r\n\tout_col = (out_col - 0.5) * brt_sat_con.z + 0.5;\r\n\t\r\n\t\r\n\t// MIX REFLECTION WITH WATER COLOUR:\r\n\t//----------------------------------------------------------------------------\r\n\tout_col\t= mix(water_col, out_col, smoothstep(col_mix.r, col_mix.g, dot(base_col, vec3(0.299, 0.587, 0.114))));\r\n\t\r\n\t\t\r\n\t// DEBUG:\r\n\t// After testing, remove this and the show_result uniform\r\n\t//----------------------------------------------------------------------------\r\n\tout_col = mix(out_col, distort_sample, show_result);\r\n\t\r\n\tfloat lum = dot(out_col.rgb,vec3(0.299, 0.587, 0.114));\r\n\tif(lum > .99)\r\n\t{\r\n\t\tout_col.rgb = glitter_col.rgb;\r\n\t}\r\n\t\r\n\t// OUTPUT:\r\n\t//----------------------------------------------------------------------------\r\n\tgl_FragColor\t\t= vec4(out_col, 1.0);\r\n}\r\n",
        "shd_z_tilt",
        "#define LOWPREC lowp\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSLES_ 1\nattribute vec3 in_Position;\r\nattribute vec4 in_Colour;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying float tree_height;\r\n\r\nvarying vec2 corner_coord;\r\n\r\nuniform float extra_z;\r\n\r\n\r\nvoid main()\r\n{\r\n    vec4 col = in_Colour;\r\n    vec4 object_space_pos = vec4( in_Position, 1.0);\r\n\r\n\t///*\r\n    float top = 1.0 - mod( col.b * 255.0, 2.0); // identify upper vertex\r\n    object_space_pos.z -= 255.0 * col.a * top +extra_z; //tilt using alpha\r\n    object_space_pos.y += col.a / 10.0; //tweak zfighting\r\n\t\r\n\ttree_height = 255.0*col.a;\r\n\t\r\n\t//*/\r\n\t/*\r\n\tfloat top = 1.0 - mod( col.b * 255.0, 2.0); // identify upper vertex\r\n\t//object_space_pos.z = -object_space_pos.y;\r\n\tobject_space_pos.z -= 255.0 * col.a * top; //tilt using alpha\r\n\tobject_space_pos.y += col.a / 10.0; //tweak zfighting\r\n\t//*/\r\n\t\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    v_vColour = vec4(col.rgb, 1.0); // lock alpha blend to fully opaque\r\n    v_vTexcoord = in_TextureCoord;  \r\n\tcorner_coord.x = abs(mod( col.b * 255.0, 2.0)-mod( col.r * 255.0, 2.0));\r\n\tcorner_coord.y = mod( col.b * 255.0, 2.0);\r\n}\r\n",
        "precision mediump float;\n#define LOWPREC lowp\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSLES_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float wind;\r\nuniform float time;\r\nuniform float wind_x;\r\nuniform float wind_strength;\r\n\r\nuniform vec2 uv_sides;\r\n\r\nvarying float tree_height;\r\nvarying vec2 corner_coord;\r\n\r\nvoid main()\r\n{\r\n    vec4 sprite_col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    \r\n    gl_FragColor = sprite_col * v_vColour;\r\n\t\r\n\t\r\n\t\r\n\tif(wind== 1.0)\r\n\t{\r\n\t\t///*\r\n\t\tfloat wind_start_y = .85;//1.0/tree_height*.75;\r\n\t\tfloat px_h = 1.0/tree_height;\r\n\t\tvec2 pos = v_vTexcoord;\r\n\t\tvec2 coord = v_vTexcoord;\r\n\r\n\t\t//if(pos.y-uvs_top_left.y <= wind_start_y)\r\n\t\tif(corner_coord.y <= wind_start_y)\r\n\t\t{\r\n\t\t\t//coord = v_vTexcoord + vec2(cos(v_vTexcoord.y+time*.5)*(wind_start_y-pos.y)*.01,0);\r\n\t\t\t//float newval = sin(.5*(v_vTexcoord.y*px_h+time))*.01*(wind_start_y-pos.y);\r\n\t\t\t\r\n\t\t\t//float y_factor = wind_start_y-corner_coord.y;\r\n\t\t\t//float y_factor = floor((wind_start_y-corner_coord.y)*32.)*.03125;\r\n\t\t\tfloat y_factor = floor((wind_start_y-corner_coord.y)*16.)*.0625;\r\n\r\n\t\t\tfloat newval = cos(((wind_x+time)*.0025))*.0025*wind_strength*(y_factor);\r\n\t\t\t\r\n\t\t\t//newval = clamp(newval,-corner_coord.x,1.0-corner_coord.x);\r\n\t\t\t//newval = clamp(newval,uv_sides.x,uv_sides.y);\r\n\t\t\tcoord.x += newval;// * (1.0-abs(0.5-corner_coord.x));\r\n\t\t\tcoord.x = clamp(coord.x,uv_sides.x,uv_sides.y);\r\n\t\t\t\r\n\t\t}\r\n\t\r\n\t    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, coord );//*/\r\n\t\t//gl_FragColor.rgb = vec3(corner_coord.x);\r\n\t}\r\n\tif (gl_FragColor.a < 1.0) { discard; } // discard non opaque sprite pixels\r\n\t//if (gl_FragColor.a < 1.0) { gl_FragColor.a = 0.0; } // discard non opaque sprite pixels\r\n\t\r\n\t\r\n\t\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n#define\tMATRIX_VIEW \t\t\t\t\t0\n#define\tMATRIX_PROJECTION \t\t\t\t1\n#define\tMATRIX_WORLD \t\t\t\t\t2\n#define\tMATRIX_WORLD_VIEW \t\t\t\t3\n#define\tMATRIX_WORLD_VIEW_PROJECTION \t4\n#define\tMATRICES_MAX\t\t\t\t\t5\n\nuniform mat4 gm_Matrices[MATRICES_MAX]; \n\nuniform bool gm_LightingEnabled;\nuniform bool gm_VS_FogEnabled;\nuniform float gm_FogStart;\nuniform float gm_RcpFogRange;\n\n#define MAX_VS_LIGHTS\t8\n#define MIRROR_WIN32_LIGHTING_EQUATION\n\n\n//#define\tMAX_VS_LIGHTS\t\t\t\t\t8\nuniform vec4   gm_AmbientColour;\t\t\t\t\t\t\t// rgb=colour, a=1\nuniform vec4   gm_Lights_Direction[MAX_VS_LIGHTS];\t\t// normalised direction\nuniform vec4   gm_Lights_PosRange[MAX_VS_LIGHTS];\t\t\t// X,Y,Z position,  W range\nuniform vec4   gm_Lights_Colour[MAX_VS_LIGHTS];\t\t\t// rgb=colour, a=1\n\nfloat CalcFogFactor(vec4 pos)\n{\n\tif (gm_VS_FogEnabled)\n\t{\n\t\tvec4 viewpos = gm_Matrices[MATRIX_WORLD_VIEW] * pos;\n\t\tfloat fogfactor = ((viewpos.z - gm_FogStart) * gm_RcpFogRange);\n\t\treturn fogfactor;\n\t}\n\telse\n\t{\n\t\treturn 0.0;\n\t}\n}\n\nvec4 DoDirLight(vec3 ws_normal, vec4 dir, vec4 diffusecol)\n{\n\tfloat dotresult = dot(ws_normal, dir.xyz);\n\tdotresult = min(dotresult, dir.w);\t\t\t// the w component is 1 if the directional light is active, or 0 if it isn't\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * diffusecol;\n}\n\nvec4 DoPointLight(vec3 ws_pos, vec3 ws_normal, vec4 posrange, vec4 diffusecol)\n{\n\tvec3 diffvec = ws_pos - posrange.xyz;\n\tfloat veclen = length(diffvec);\n\tdiffvec /= veclen;\t// normalise\n\tfloat atten;\n\tif (posrange.w == 0.0)\t\t// the w component of posrange is 0 if the point light is disabled - if we don't catch it here we might end up generating INFs or NaNs\n\t{\n\t\tatten = 0.0;\n\t}\n\telse\n\t{\n#ifdef MIRROR_WIN32_LIGHTING_EQUATION\n\t// This is based on the Win32 D3D and OpenGL falloff model, where:\n\t// Attenuation = 1.0f / (factor0 + (d * factor1) + (d*d * factor2))\n\t// For some reason, factor0 is set to 0.0f while factor1 is set to 1.0f/lightrange (on both D3D and OpenGL)\n\t// This'll result in no visible falloff as 1.0f / (d / lightrange) will always be larger than 1.0f (if the vertex is within range)\n\t\n\t\tatten = 1.0 / (veclen / posrange.w);\n\t\tif (veclen > posrange.w)\n\t\t{\n\t\t\tatten = 0.0;\n\t\t}\t\n#else\n\t\tatten = clamp( (1.0 - (veclen / posrange.w)), 0.0, 1.0);\t\t// storing 1.0f/range instead would save a rcp\n#endif\n\t}\n\tfloat dotresult = dot(ws_normal, diffvec);\n\tdotresult = max(0.0, dotresult);\n\n\treturn dotresult * atten * diffusecol;\n}\n\nvec4 DoLighting(vec4 vertexcolour, vec4 objectspacepos, vec3 objectspacenormal)\n{\n\tif (gm_LightingEnabled)\n\t{\n\t\t// Normally we'd have the light positions\\\\directions back-transformed from world to object space\n\t\t// But to keep things simple for the moment we'll just transform the normal to world space\n\t\tvec4 objectspacenormal4 = vec4(objectspacenormal, 0.0);\n\t\tvec3 ws_normal;\n\t\tws_normal = (gm_Matrices[MATRIX_WORLD] * objectspacenormal4).xyz;\n\t\tws_normal = normalize(ws_normal);\n\n\t\tvec3 ws_pos;\n\t\tws_pos = (gm_Matrices[MATRIX_WORLD] * objectspacepos).xyz;\n\n\t\t// Accumulate lighting from different light types\n\t\tvec4 accumcol = vec4(0.0, 0.0, 0.0, 0.0);\t\t\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoDirLight(ws_normal, gm_Lights_Direction[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\tfor(int i = 0; i < MAX_VS_LIGHTS; i++)\n\t\t{\n\t\t\taccumcol += DoPointLight(ws_pos, ws_normal, gm_Lights_PosRange[i], gm_Lights_Colour[i]);\n\t\t}\n\n\t\taccumcol *= vertexcolour;\n\t\taccumcol += gm_AmbientColour;\n\t\taccumcol = min(vec4(1.0, 1.0, 1.0, 1.0), accumcol);\n\t\taccumcol.a = vertexcolour.a;\n\t\treturn accumcol;\n\t}\n\telse\n\t{\n\t\treturn vertexcolour;\n\t}\n}\n\n#define _YY_GLSL_ 1\nattribute vec3 in_Position;\r\nattribute vec4 in_Colour;\r\nattribute vec2 in_TextureCoord;\r\n\r\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nvarying float tree_height;\r\n\r\nvarying vec2 corner_coord;\r\n\r\nuniform float extra_z;\r\n\r\n\r\nvoid main()\r\n{\r\n    vec4 col = in_Colour;\r\n    vec4 object_space_pos = vec4( in_Position, 1.0);\r\n\r\n\t///*\r\n    float top = 1.0 - mod( col.b * 255.0, 2.0); // identify upper vertex\r\n    object_space_pos.z -= 255.0 * col.a * top +extra_z; //tilt using alpha\r\n    object_space_pos.y += col.a / 10.0; //tweak zfighting\r\n\t\r\n\ttree_height = 255.0*col.a;\r\n\t\r\n\t//*/\r\n\t/*\r\n\tfloat top = 1.0 - mod( col.b * 255.0, 2.0); // identify upper vertex\r\n\t//object_space_pos.z = -object_space_pos.y;\r\n\tobject_space_pos.z -= 255.0 * col.a * top; //tilt using alpha\r\n\tobject_space_pos.y += col.a / 10.0; //tweak zfighting\r\n\t//*/\r\n\t\r\n    gl_Position = gm_Matrices[MATRIX_WORLD_VIEW_PROJECTION] * object_space_pos;\r\n    v_vColour = vec4(col.rgb, 1.0); // lock alpha blend to fully opaque\r\n    v_vTexcoord = in_TextureCoord;  \r\n\tcorner_coord.x = abs(mod( col.b * 255.0, 2.0)-mod( col.r * 255.0, 2.0));\r\n\tcorner_coord.y = mod( col.b * 255.0, 2.0);\r\n}\r\n",
        "#version 120\n#define LOWPREC \n#define lowp\n#define mediump\n#define highp\n#define precision\n// Uniforms look like they're shared between vertex and fragment shaders in GLSL, so we have to be careful to avoid name clashes\n\nuniform sampler2D gm_BaseTexture;\n\nuniform bool gm_PS_FogEnabled;\nuniform vec4 gm_FogColour;\nuniform bool gm_AlphaTestEnabled;\nuniform float gm_AlphaRefValue;\n\nvoid DoAlphaTest(vec4 SrcColour)\n{\n\tif (gm_AlphaTestEnabled)\n\t{\n\t\tif (SrcColour.a <= gm_AlphaRefValue)\n\t\t{\n\t\t\tdiscard;\n\t\t}\n\t}\n}\n\nvoid DoFog(inout vec4 SrcColour, float fogval)\n{\n\tif (gm_PS_FogEnabled)\n\t{\n\t\tSrcColour = mix(SrcColour, gm_FogColour, clamp(fogval, 0.0, 1.0)); \n\t}\n}\n\n#define _YY_GLSL_ 1\nvarying vec2 v_vTexcoord;\r\nvarying vec4 v_vColour;\r\n\r\nuniform float wind;\r\nuniform float time;\r\nuniform float wind_x;\r\nuniform float wind_strength;\r\n\r\nuniform vec2 uv_sides;\r\n\r\nvarying float tree_height;\r\nvarying vec2 corner_coord;\r\n\r\nvoid main()\r\n{\r\n    vec4 sprite_col = texture2D( gm_BaseTexture, v_vTexcoord );\r\n    \r\n    gl_FragColor = sprite_col * v_vColour;\r\n\t\r\n\t\r\n\t\r\n\tif(wind== 1.0)\r\n\t{\r\n\t\t///*\r\n\t\tfloat wind_start_y = .85;//1.0/tree_height*.75;\r\n\t\tfloat px_h = 1.0/tree_height;\r\n\t\tvec2 pos = v_vTexcoord;\r\n\t\tvec2 coord = v_vTexcoord;\r\n\r\n\t\t//if(pos.y-uvs_top_left.y <= wind_start_y)\r\n\t\tif(corner_coord.y <= wind_start_y)\r\n\t\t{\r\n\t\t\t//coord = v_vTexcoord + vec2(cos(v_vTexcoord.y+time*.5)*(wind_start_y-pos.y)*.01,0);\r\n\t\t\t//float newval = sin(.5*(v_vTexcoord.y*px_h+time))*.01*(wind_start_y-pos.y);\r\n\t\t\t\r\n\t\t\t//float y_factor = wind_start_y-corner_coord.y;\r\n\t\t\t//float y_factor = floor((wind_start_y-corner_coord.y)*32.)*.03125;\r\n\t\t\tfloat y_factor = floor((wind_start_y-corner_coord.y)*16.)*.0625;\r\n\r\n\t\t\tfloat newval = cos(((wind_x+time)*.0025))*.0025*wind_strength*(y_factor);\r\n\t\t\t\r\n\t\t\t//newval = clamp(newval,-corner_coord.x,1.0-corner_coord.x);\r\n\t\t\t//newval = clamp(newval,uv_sides.x,uv_sides.y);\r\n\t\t\tcoord.x += newval;// * (1.0-abs(0.5-corner_coord.x));\r\n\t\t\tcoord.x = clamp(coord.x,uv_sides.x,uv_sides.y);\r\n\t\t\t\r\n\t\t}\r\n\t\r\n\t    gl_FragColor = v_vColour * texture2D( gm_BaseTexture, coord );//*/\r\n\t\t//gl_FragColor.rgb = vec3(corner_coord.x);\r\n\t}\r\n\tif (gl_FragColor.a < 1.0) { discard; } // discard non opaque sprite pixels\r\n\t//if (gl_FragColor.a < 1.0) { gl_FragColor.a = 0.0; } // discard non opaque sprite pixels\r\n\t\r\n\t\r\n\t\r\n}\r\n",
        "fnt_calendar_big",
        "Gadugi",
        "fnt_calendar",
        "fnt_cc_polaroid",
        "GrapeSoda",
        "fnt_dashboard_mid_bold",
        "ai_assistant_icon_font",
        "04b03",
        "Small Pixel",
        "fnt_debug_big",
        "Arial",
        "04b03_ca_edit",
        "Calibri",
        "fnt_dest_exit_title",
        "fnt_dialogue_new",
        "fnt_dialogue_old",
        "Comic Sans MS",
        "fnt_dialogue_text",
        "Trebuchet MS",
        "fnt_ending_book_title",
        "fnt_envelope_title",
        "Impact",
        "fnt_hh_menu_desc",
        "fnt_hh_stats",
        "fnt_hh_stop",
        "trueitalicWIP",
        "fnt_hostel_hours",
        "fnt_hostel_title",
        "fnt_introspection_choice",
        "Times New Roman",
        "fnt_introspection_title",
        "Majoris",
        "fnt_journal_buttons",
        "fnt_journal_skill_points",
        "TheWall",
        "fnt_jujudroid",
        "Droid Sans Mono",
        "fnt_map_selected",
        "fnt_mini",
        "fnt_music_menu_bold",
        "04b11",
        "fnt_music_menu_normal",
        "fnt_music_unlock_artist",
        "fnt_music_unlock_cd",
        "fnt_option",
        "Verdana",
        "fnt_options_title",
        "fnt_perfect_flash",
        "Bahnschrift",
        "fnt_quest_window_title",
        "BitTypeWriter",
        "fnt_road_event_bottom",
        "Edit Undo BRK",
        "fnt_road_event_intro",
        "fnt_skill_focus_name",
        "fnt_skill_tree_unlock",
        "fnt_title_screen",
        "04b_25",
        "fnt_trait_big_unstylized_ch",
        "Microsoft JhengHei UI",
        "fnt_trait_big_unstylized",
        "Cascadia Mono",
        "fnt_trait_big",
        "Plastique",
        "fnt_trait_unstylized",
        "Courier New",
        "fnt_trait",
        "fnt_vignette",
        "m5x7",
        "fnt_work_title",
        "Macintosh128K",
        "input_controller_object",
        "obj_3d_ending",
        "obj_ailment_list",
        "obj_armor_lose_effect",
        "obj_banter_list",
        "obj_banter",
        "obj_bee",
        "obj_bg_list",
        "obj_bg_strip",
        "obj_bg_temp_object",
        "obj_biker",
        "obj_bird",
        "obj_black_out",
        "obj_blur_mask",
        "obj_button",
        "obj_calendar",
        "obj_camera_flash",
        "obj_camera",
        "obj_car_list",
        "obj_car_menu_tutorial_simplified",
        "obj_car_menu_tutorial",
        "obj_casino_coin",
        "obj_casino_interface",
        "obj_cat",
        "obj_cc_list",
        "obj_character_creation",
        "obj_collision_car",
        "obj_credits",
        "obj_cyclist",
        "obj_dashboard",
        "obj_deer",
        "obj_definition_list",
        "obj_demo_intro_tutorial",
        "obj_dest_dot_delay",
        "obj_dest_dot",
        "obj_destination_car_pos_trigger",
        "obj_destination_controller",
        "obj_destination_list",
        "obj_dialogue_list",
        "obj_dialogue_old",
        "obj_dialogue",
        "obj_disclaimer",
        "obj_drive_ui",
        "obj_ending_book",
        "obj_ending_delayer",
        "obj_ending_list",
        "obj_ending_room_prop",
        "obj_ending_unlock",
        "obj_ending",
        "obj_epa",
        "obj_event_debug",
        "obj_event_list",
        "obj_event_queue",
        "obj_event",
        "obj_explore_list",
        "obj_explore_menu",
        "obj_explore_prop",
        "obj_falcon",
        "obj_festival_controller",
        "obj_fire_flies",
        "obj_first_setup",
        "obj_font_list",
        "obj_gamepad_screen_controller",
        "obj_garage_tutorial",
        "obj_garage_ui_old",
        "obj_garage_ui",
        "obj_gas_interface",
        "obj_gas_pedal_tutorial",
        "obj_glovebox_lid",
        "obj_graveyard_music",
        "obj_gui_effect_delayed",
        "obj_gui_effect",
        "obj_gui_sprite_scrolling",
        "obj_hh_event_tutorial",
        "obj_hh_exp_delayer",
        "obj_hh_fade",
        "obj_hh_level_up_window",
        "obj_hh_list",
        "obj_hh_menu",
        "obj_hh_pickup_message",
        "obj_hh_preview",
        "obj_hh_road_dog",
        "obj_hh_stop_buttons",
        "obj_hospital_visit",
        "obj_hostel_ui",
        "obj_input_controller",
        "obj_insect",
        "obj_intro",
        "obj_introspection_list",
        "obj_introspection",
        "obj_inventory_extra_space",
        "obj_inventory_upgrade_screen",
        "obj_inventory",
        "obj_item_drag_tutorial",
        "obj_item_list",
        "obj_item_use_tutorial",
        "obj_item",
        "obj_journal_tutorial",
        "obj_journal",
        "obj_junkyard_car_blocker",
        "obj_junkyard_car_interact_bounds",
        "obj_junkyard_guy",
        "obj_junkyard",
        "obj_map_3d_test",
        "obj_map_blocker",
        "obj_map_city",
        "obj_map_collision_checker",
        "obj_map_desert",
        "obj_map_dest_blocker",
        "obj_map_forest",
        "obj_map_gen_blocker",
        "obj_map_gen_traveller",
        "obj_map_generator",
        "obj_map_itty_witty_mountaineer",
        "obj_map_lake",
        "obj_map_marker_saver",
        "obj_map_mini_blocker",
        "obj_map_mountain",
        "obj_map_runner",
        "obj_map_temp_blocker",
        "obj_map_traveller",
        "obj_map",
        "obj_memory_list",
        "obj_menu_text_list",
        "obj_menu",
        "obj_meta_save_controller",
        "obj_mist",
        "obj_move_car_tutorial_simplified",
        "obj_move_car_tutorial",
        "obj_music_list",
        "obj_music_menu",
        "obj_music_unlock",
        "obj_open_journal_tutorial",
        "obj_options",
        "obj_particle_controller",
        "obj_party_hot_tub",
        "obj_passive_effect_flash",
        "obj_pedestrian_controller",
        "obj_pedestrian",
        "obj_people_list",
        "obj_person",
        "obj_police_chase_creator",
        "obj_prison_ending_controller",
        "obj_prompt_empty",
        "obj_prompt_old",
        "obj_prompt",
        "obj_pushing_car",
        "obj_quest_board",
        "obj_quest_complete",
        "obj_quest_list",
        "obj_quest_menu_dontuse",
        "obj_quest_notification",
        "obj_quest_window",
        "obj_queueable_thing",
        "obj_race_controller",
        "obj_rain_spawner",
        "obj_re_upcoming",
        "obj_reward_message",
        "obj_road_controller",
        "obj_road_director",
        "obj_road_event_attack_effect",
        "obj_road_event_attack_spawn_effect",
        "obj_road_event_card_list",
        "obj_road_event_card",
        "obj_road_event_hit_effect",
        "obj_road_event_list",
        "obj_road_event_post",
        "obj_road_event_tutorial",
        "obj_road_event",
        "obj_road_info",
        "obj_road_peeing_kid",
        "obj_road_summary",
        "obj_road_temp_object",
        "obj_salvage_bar",
        "obj_salvage_marker",
        "obj_save_controller",
        "obj_seagull",
        "obj_setup",
        "obj_shop",
        "obj_side_stop_sign",
        "obj_siren_light",
        "obj_skate_kid",
        "obj_skill_check",
        "obj_skill_focus",
        "obj_skill_list",
        "obj_skill_point_get_menu",
        "obj_skill_tree_get_menu",
        "obj_skill_tree_list",
        "obj_skill_ui",
        "obj_skill_unlock",
        "obj_sky",
        "obj_social_ui",
        "obj_sound_controller",
        "obj_sound_debug",
        "obj_sound_fader",
        "obj_sound_list",
        "obj_splash_screens",
        "obj_stat_effect",
        "obj_stats_controller",
        "obj_steam_controller",
        "obj_street_light",
        "obj_swift_journal_tutorial",
        "obj_temp_player_effect",
        "obj_threat_move_effect",
        "obj_threat_status_window",
        "obj_thunder",
        "obj_time_pass",
        "obj_title_screen_controller",
        "obj_tooltip",
        "obj_top_close_buttons",
        "obj_tractor",
        "obj_traffic_controller",
        "obj_traffic_light_red",
        "obj_traffic_light",
        "obj_traffic_list",
        "obj_trait_get_menu",
        "obj_trait_list",
        "obj_tree_shader_test",
        "obj_tumble_weed",
        "obj_turn_start_effect",
        "obj_tutorial_passive_message",
        "obj_tutorial",
        "obj_upgrade_list_OLD",
        "obj_upgrade_list",
        "obj_vending_machine",
        "obj_vignette",
        "obj_warning_signs_list",
        "obj_water_controls",
        "obj_window_cleaner",
        "obj_work_list",
        "obj_work_ui",
        "obj_world_drawer",
        "road_temp_light_object",
        "bg_6_tree_shadow",
        "bg_7_tree_shadow",
        "bg_7_sidewalk_desert",
        "bg_7_sidewalk_dirt",
        "bg_5_houses_rural",
        "bg_5_houses_country",
        "bg_5_desert_houses",
        "bg_6_houses_country",
        "bg_6_mc_house",
        "bg_6_desert_houses",
        "bg_6_forest_houses",
        "bg_1_mountain_top",
        "bg_1_mountain_bottom",
        "bg_1_ship_test",
        "bg_2_desert",
        "bg_2_distant_hills",
        "bg_2_country_flat",
        "bg_2_country_hills",
        "bg_2_mountain_bottom",
        "bg_2_mountain_top",
        "bg_2_pine",
        "bg_2_snow",
        "bg_city_2",
        "bg_2_urban",
        "bg_2_yellowgrass",
        "bg_3_city_small_1",
        "bg_3_desert",
        "bg_3_flat_grass_1",
        "bg_3_flat_grass_4",
        "bg_3_sunflowers",
        "bg_3_yellowgrass",
        "bg_3_country_forest",
        "bg_3_country_sparse",
        "bg_3_forest_pine",
        "bg_3_island_test",
        "bg_3_mountains",
        "bg_3_mountain_steep",
        "bg_3_outskirts",
        "bg_4_mountain_steep",
        "bg_4_forest",
        "tree_leaf_5",
        "bg_5_c_bush",
        "bg_5_highgrass",
        "bg_5_lowgrass",
        "bg_5_poppy",
        "bg_5_yellowgrass",
        "desert_plants_5",
        "desert_cacti_5",
        "desert_rocks_5",
        "bg_5_forest_earth",
        "bg_5_forest_mossy",
        "bg_5_grass_parts",
        "bg_5_undergrowth",
        "bg_5_desert_ground",
        "bg_5_pines",
        "bg_5_pines_thin",
        "bg_5_lavender",
        "bg_5_raps",
        "bg_5_sunflower",
        "bg_5_wheat",
        "bg_5_houses_tc",
        "bg_5_apple_trees",
        "bg_5_c_tree",
        "bg_5_birch",
        "bg_6_c_bush_small",
        "bg_6_c_bush_big",
        "bg_6_highgrass",
        "bg_6_lowgrass",
        "bg_6_poppy",
        "bg_6_yellowgrass",
        "bg_6_desert_ground",
        "desert_plants_b_6",
        "desert_cacti_6",
        "desert_rocks_big_6",
        "desert_rocks_small_6",
        "desert_plants_s_6",
        "desert_weeds_6",
        "bg_6_forest_earth",
        "bg_6_forest_grassy",
        "bg_6_forest_mossy",
        "bg_6_grass_parts",
        "bg_6_undergrowth",
        "bg_6_pines",
        "bg_6_pines_thin",
        "bg_6_lavender",
        "bg_6_raps",
        "bg_6_sunflower",
        "bg_6_wheat",
        "bg_6_houses_tc",
        "bg_6_apple_trees",
        "tree_leaf_6",
        "bg_6_tree_lonely",
        "bg_6_c_tree_huge",
        "bg_6_c_tree",
        "bg_6_birch",
        "bg_7_c_bush_big",
        "bg_7_c_bush_small",
        "bg_7_highgrass",
        "bg_7_lowgrass",
        "bg_7_poppy",
        "bg_7_desert_ground",
        "deser_plants_big",
        "bg_7_cacti",
        "desert_plants_small",
        "desert_rocks_big",
        "desert_rocks_small",
        "desert_weeds",
        "forest_bushes",
        "forest_ferns",
        "forest_wood",
        "forest_flowers",
        "forest_grass",
        "forest_small_trees",
        "forest_moss",
        "forest_rocks",
        "forest_mushrooms_7",
        "bg_7_forest_earth",
        "bg_7_forest_grassy",
        "bg_7_forest_mossy",
        "bg_7_grass_parts",
        "bg_7_mountain",
        "bg_7_pines",
        "bg_7_forest_stumps",
        "bg_7_pines_thin",
        "bg_7_tc_prop",
        "bg_7_raps",
        "bg_7_sunflower",
        "bg_7_wheat",
        "bg_7_apple_trees",
        "tree_leaf_7",
        "bg_7_tree_lonely",
        "tree_leaf_7_huge",
        "bg_7_c_tree",
        "bg_7_birch",
        "bikes_8",
        "street_plants_8",
        "trash_8",
        "fg_city_lamp",
        "fg_telepoles",
        "fg_tree_leaf",
        "pines_fg",
        "bg_5_city",
        "bg_7_sidewalk",
        "bg_7_forest_building",
        "pines_7",
        "bg_space_64",
        "car_wear",
        "sportscar_car",
        "fg_festival",
        "forest_small_fg",
        "bg_7_grass",
        "hh_incar",
        "introspection_cloud2",
        "pines_5",
        "pines_6",
        "@@constructor",
        "room_first_setup",
        "Instances",
        "room_setup",
        "room_destination",
        "room_road",
        "room_main_menu",
        "room_loading",
        "room_disclaimer",
        "room_map_generate",
        "Backgrounds_1",
        "room_pause",
        "room_room",
        "room_credits",
        "fallbacktexture.png",
        "__yy__0fallbacktexture.png_yyg_auto_gen_tex_group_name_",
        "DynTex",
        ".yytex",
        "cars",
        "ending_room",
        "hh_girl",
        "hh_stranger",
        "interact_font",
        "interact_font1",
        "music_menu",
        "pc_volvo",
        "title_screen",
        "unique_env",
        "unused",
        "nullish",
        "login_sso",
        "operagx-yyc",
        "mqtt",
        "audio-fx",
        "intellisense",
        "custom_env",
        "filt+fx",
        "gx_mod_wallpaper",
        "gx_mod_gamestrip",
        "live_wallpaper_subscription",
        "code-editor",
        "strip_unused_assets",
        "update-process",
        "package-manager",
        "subscription"
    ]
}